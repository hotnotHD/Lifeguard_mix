
DUPLO_mini_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031f4  0800ef70  0800ef70  0001ef70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012164  08012164  00030288  2**0
                  CONTENTS
  4 .ARM          00000000  08012164  08012164  00030288  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012164  08012164  00030288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012164  08012164  00022164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012168  08012168  00022168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0801216c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030288  2**0
                  CONTENTS
 10 .bss          000007a0  20000288  20000288  00030288  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a28  20000a28  00030288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddf5  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d66  00000000  00000000  0004e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  00051e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001768  00000000  00000000  00053760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f1a  00000000  00000000  00054ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002171d  00000000  00000000  00077de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8557  00000000  00000000  000994ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161a56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b84  00000000  00000000  00161aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef54 	.word	0x0800ef54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	0800ef54 	.word	0x0800ef54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <button_led_init>:
#include "../../Modules/Button/button.h"
#include <gas_sensor.h>
#include <window_drawer.h>
#include "../../Modules/LCD/stm32_adafruit_lcd.h"

void button_led_init() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ON_OFF_LED_GPIO_Port, ON_OFF_LED_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2101      	movs	r1, #1
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <button_led_init+0x3c>)
 8000c52:	f003 ff37 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEAT_LED_GPIO_Port, HEAT_LED_Pin, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <button_led_init+0x3c>)
 8000c5c:	f003 ff32 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MIX_LED_GPIO_Port, MIX_LED_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2104      	movs	r1, #4
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <button_led_init+0x3c>)
 8000c66:	f003 ff2d 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O2_LED_GPIO_Port, O2_LED_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <button_led_init+0x3c>)
 8000c70:	f003 ff28 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEY_EN_GPIO_Port, KEY_EN_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f003 ff22 	bl	8004ac4 <HAL_GPIO_WritePin>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	48000800 	.word	0x48000800

08000c88 <button_on>:

void button_on() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ON_OFF_LED_GPIO_Port, ON_OFF_LED_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <button_on+0x20>)
 8000c92:	f003 ff17 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <button_on+0x24>)
 8000c9e:	f003 ff11 	bl	8004ac4 <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000400 	.word	0x48000400

08000cb0 <button_off>:

void button_off() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ON_OFF_LED_GPIO_Port, ON_OFF_LED_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <button_off+0x54>)
 8000cba:	f003 ff03 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <button_off+0x58>)
 8000cc6:	f003 fefd 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEAT_LED_GPIO_Port, HEAT_LED_Pin, PIN_ON);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <button_off+0x54>)
 8000cd0:	f003 fef8 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MIX_LED_GPIO_Port, MIX_LED_Pin, PIN_ON);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <button_off+0x54>)
 8000cda:	f003 fef3 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O2_LED_GPIO_Port, O2_LED_Pin, PIN_ON);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <button_off+0x54>)
 8000ce4:	f003 feee 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin, PIN_OFF);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <button_off+0x58>)
 8000cf0:	f003 fee8 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin, PIN_OFF);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <button_off+0x58>)
 8000cfa:	f003 fee3 	bl	8004ac4 <HAL_GPIO_WritePin>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000400 	.word	0x48000400

08000d0c <button_check>:

void button_check(I2C_HandleTypeDef hi2c1, uint8_t *o2_mode, uint8_t *mix_mode,
		DUPLO_MODE *cur_mode, uint8_t *mute_counter, bool *settings_open,
		uint8_t *set_mode) {
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b098      	sub	sp, #96	; 0x60
 8000d12:	af14      	add	r7, sp, #80	; 0x50
 8000d14:	f107 0c18 	add.w	ip, r7, #24
 8000d18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char string[8];

	if (BUTTON_GetAction(BUTTON_OK) == BUTTON_LONG_PRESS) {
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f009 fc7b 	bl	800a618 <BUTTON_GetAction>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d166      	bne.n	8000df6 <button_check+0xea>
		if (!*settings_open) {
 8000d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f083 0301 	eor.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00c      	beq.n	8000d50 <button_check+0x44>
			delete_main_frame();
 8000d36:	f002 f94d 	bl	8002fd4 <delete_main_frame>
			*settings_open = true;
 8000d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
			settings_frame();
 8000d40:	f002 f97e 	bl	8003040 <settings_frame>
			circle_draw(set_mode, 0);
 8000d44:	2100      	movs	r1, #0
 8000d46:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000d4a:	f002 fa01 	bl	8003150 <circle_draw>
 8000d4e:	e053      	b.n	8000df8 <button_check+0xec>
		} else {
			switch (*set_mode) {
 8000d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	2b06      	cmp	r3, #6
 8000d5a:	d84d      	bhi.n	8000df8 <button_check+0xec>
 8000d5c:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <button_check+0x58>)
 8000d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d62:	bf00      	nop
 8000d64:	08000d81 	.word	0x08000d81
 8000d68:	08000d8b 	.word	0x08000d8b
 8000d6c:	08000d95 	.word	0x08000d95
 8000d70:	08000d9f 	.word	0x08000d9f
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000db3 	.word	0x08000db3
 8000d7c:	08000dbd 	.word	0x08000dbd
			case 1:
				cur_mode->ar_setting = 300;
 8000d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d86:	805a      	strh	r2, [r3, #2]
				break;
 8000d88:	e036      	b.n	8000df8 <button_check+0xec>
			case 2:
				cur_mode->ar_setting = 350;
 8000d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000d90:	805a      	strh	r2, [r3, #2]
				break;
 8000d92:	e031      	b.n	8000df8 <button_check+0xec>
			case 3:
				cur_mode->ar_setting = 400;
 8000d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d9a:	805a      	strh	r2, [r3, #2]
				break;
 8000d9c:	e02c      	b.n	8000df8 <button_check+0xec>
			case 4:
				cur_mode->o2_setting = 300;
 8000d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000da0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000da4:	809a      	strh	r2, [r3, #4]
				break;
 8000da6:	e027      	b.n	8000df8 <button_check+0xec>
			case 5:
				cur_mode->o2_setting = 350;
 8000da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000daa:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000dae:	809a      	strh	r2, [r3, #4]
				break;
 8000db0:	e022      	b.n	8000df8 <button_check+0xec>
			case 6:
				cur_mode->o2_setting = 400;
 8000db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000db4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000db8:	809a      	strh	r2, [r3, #4]
				break;
 8000dba:	e01d      	b.n	8000df8 <button_check+0xec>
			case 7:
				*settings_open = false;
 8000dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
				delete_main_frame();
 8000dc2:	f002 f907 	bl	8002fd4 <delete_main_frame>
				main_page();
 8000dc6:	f001 fe39 	bl	8002a3c <main_page>
				for (int i = 0; i < cur_mode->vent; i++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e007      	b.n	8000de0 <button_check+0xd4>
					change_vent_mode(i);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 f88f 	bl	8002ef8 <change_vent_mode>
				for (int i = 0; i < cur_mode->vent; i++) {
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	461a      	mov	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4293      	cmp	r3, r2
 8000dea:	dbf1      	blt.n	8000dd0 <button_check+0xc4>
				}
				*set_mode = 1;
 8000dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
				break;
 8000df4:	e000      	b.n	8000df8 <button_check+0xec>
			}

		}
 8000df6:	bf00      	nop

	}

	if (BUTTON_GetAction(BUTTON_OK) == BUTTON_VERY_LONG_PRESS) {
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f009 fc0d 	bl	800a618 <BUTTON_GetAction>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d11a      	bne.n	8000e3a <button_check+0x12e>
		sprintf(string, "OK");
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	497f      	ldr	r1, [pc, #508]	; (8001004 <button_check+0x2f8>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00b fe37 	bl	800ca7c <siprintf>
		BSP_LCD_DisplayStringAt(220, 180, (uint8_t*) string, LEFT_MODE); // gas
 8000e0e:	1d3a      	adds	r2, r7, #4
 8000e10:	2303      	movs	r3, #3
 8000e12:	21b4      	movs	r1, #180	; 0xb4
 8000e14:	20dc      	movs	r0, #220	; 0xdc
 8000e16:	f00a fc99 	bl	800b74c <BSP_LCD_DisplayStringAt>

		calOxy(hi2c1, 0xD2, 0x00);
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9312      	str	r3, [sp, #72]	; 0x48
 8000e1e:	23d2      	movs	r3, #210	; 0xd2
 8000e20:	9311      	str	r3, [sp, #68]	; 0x44
 8000e22:	4668      	mov	r0, sp
 8000e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e28:	2244      	movs	r2, #68	; 0x44
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f00b f9a6 	bl	800c17c <memcpy>
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e36:	f000 f96d 	bl	8001114 <calOxy>
	}

	if (BUTTON_GetAction(BUTTON_UP) == BUTTON_LONG_PRESS) {
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f009 fbec 	bl	800a618 <BUTTON_GetAction>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d11a      	bne.n	8000e7c <button_check+0x170>
		if (*set_mode > 1 && *settings_open) {
 8000e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d915      	bls.n	8000e7c <button_check+0x170>
 8000e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d011      	beq.n	8000e7c <button_check+0x170>
			*set_mode -= 1;
 8000e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e66:	701a      	strb	r2, [r3, #0]
			circle_draw(set_mode, *set_mode + 1);
 8000e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000e78:	f002 f96a 	bl	8003150 <circle_draw>
		}
	}

	if (BUTTON_GetAction(BUTTON_DOWN) == BUTTON_LONG_PRESS) {
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f009 fbcb 	bl	800a618 <BUTTON_GetAction>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d11a      	bne.n	8000ebe <button_check+0x1b2>
		if (*set_mode < 7 && *settings_open) {
 8000e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d815      	bhi.n	8000ebe <button_check+0x1b2>
 8000e92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d011      	beq.n	8000ebe <button_check+0x1b2>
			*set_mode += 1;
 8000e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea8:	701a      	strb	r2, [r3, #0]
			circle_draw(set_mode, *set_mode - 1);
 8000eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000eba:	f002 f949 	bl	8003150 <circle_draw>
		}
	}

	if (BUTTON_GetAction(BUTTON_HEAT) == BUTTON_LONG_PRESS) {
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f009 fbaa 	bl	800a618 <BUTTON_GetAction>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d11e      	bne.n	8000f08 <button_check+0x1fc>
		switch (HAL_GPIO_ReadPin(HEAT_LED_GPIO_Port, HEAT_LED_Pin)) {
 8000eca:	2108      	movs	r1, #8
 8000ecc:	484e      	ldr	r0, [pc, #312]	; (8001008 <button_check+0x2fc>)
 8000ece:	f003 fde1 	bl	8004a94 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00c      	beq.n	8000ef2 <button_check+0x1e6>
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d117      	bne.n	8000f0c <button_check+0x200>
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(HEAT_LED_GPIO_Port, HEAT_LED_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4849      	ldr	r0, [pc, #292]	; (8001008 <button_check+0x2fc>)
 8000ee2:	f003 fdef 	bl	8004ac4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HEAT_VALVE_GPIO_Port, HEAT_VALVE_Pin,
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4848      	ldr	r0, [pc, #288]	; (800100c <button_check+0x300>)
 8000eec:	f003 fdea 	bl	8004ac4 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
			break;
 8000ef0:	e00d      	b.n	8000f0e <button_check+0x202>
		case GPIO_PIN_RESET:
			HAL_GPIO_WritePin(HEAT_LED_GPIO_Port, HEAT_LED_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4844      	ldr	r0, [pc, #272]	; (8001008 <button_check+0x2fc>)
 8000ef8:	f003 fde4 	bl	8004ac4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HEAT_VALVE_GPIO_Port, HEAT_VALVE_Pin,
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	4842      	ldr	r0, [pc, #264]	; (800100c <button_check+0x300>)
 8000f02:	f003 fddf 	bl	8004ac4 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			break;
 8000f06:	e002      	b.n	8000f0e <button_check+0x202>
		default:
			break;
		}
	}
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <button_check+0x202>
			break;
 8000f0c:	bf00      	nop

	if (BUTTON_GetAction(BUTTON_O2) == BUTTON_LONG_PRESS) {
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f009 fb82 	bl	800a618 <BUTTON_GetAction>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d11a      	bne.n	8000f50 <button_check+0x244>
		switch (HAL_GPIO_ReadPin(O2_LED_GPIO_Port, O2_LED_Pin)) {
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	483a      	ldr	r0, [pc, #232]	; (8001008 <button_check+0x2fc>)
 8000f1e:	f003 fdb9 	bl	8004a94 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00a      	beq.n	8000f3e <button_check+0x232>
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d113      	bne.n	8000f54 <button_check+0x248>
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(O2_LED_GPIO_Port, O2_LED_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4835      	ldr	r0, [pc, #212]	; (8001008 <button_check+0x2fc>)
 8000f32:	f003 fdc7 	bl	8004ac4 <HAL_GPIO_WritePin>
			*o2_mode = 1;
 8000f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
			break;
 8000f3c:	e00b      	b.n	8000f56 <button_check+0x24a>
		case GPIO_PIN_RESET:
			HAL_GPIO_WritePin(O2_LED_GPIO_Port, O2_LED_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2102      	movs	r1, #2
 8000f42:	4831      	ldr	r0, [pc, #196]	; (8001008 <button_check+0x2fc>)
 8000f44:	f003 fdbe 	bl	8004ac4 <HAL_GPIO_WritePin>
			*o2_mode = 0;
 8000f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			break;
 8000f4e:	e002      	b.n	8000f56 <button_check+0x24a>
		default:
			break;
		}
	}
 8000f50:	bf00      	nop
 8000f52:	e000      	b.n	8000f56 <button_check+0x24a>
			break;
 8000f54:	bf00      	nop

	if (BUTTON_GetAction(BUTTON_MIX) == BUTTON_LONG_PRESS) {
 8000f56:	2007      	movs	r0, #7
 8000f58:	f009 fb5e 	bl	800a618 <BUTTON_GetAction>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d11a      	bne.n	8000f98 <button_check+0x28c>
		switch (HAL_GPIO_ReadPin(MIX_LED_GPIO_Port, MIX_LED_Pin)) {
 8000f62:	2104      	movs	r1, #4
 8000f64:	4828      	ldr	r0, [pc, #160]	; (8001008 <button_check+0x2fc>)
 8000f66:	f003 fd95 	bl	8004a94 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00a      	beq.n	8000f86 <button_check+0x27a>
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d113      	bne.n	8000f9c <button_check+0x290>
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(MIX_LED_GPIO_Port, MIX_LED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2104      	movs	r1, #4
 8000f78:	4823      	ldr	r0, [pc, #140]	; (8001008 <button_check+0x2fc>)
 8000f7a:	f003 fda3 	bl	8004ac4 <HAL_GPIO_WritePin>
			*mix_mode = 1;
 8000f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	e00b      	b.n	8000f9e <button_check+0x292>
		case GPIO_PIN_RESET:
			HAL_GPIO_WritePin(MIX_LED_GPIO_Port, MIX_LED_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2104      	movs	r1, #4
 8000f8a:	481f      	ldr	r0, [pc, #124]	; (8001008 <button_check+0x2fc>)
 8000f8c:	f003 fd9a 	bl	8004ac4 <HAL_GPIO_WritePin>
			*mix_mode = 0;
 8000f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
			break;
 8000f96:	e002      	b.n	8000f9e <button_check+0x292>
		default:
			break;
		}
	}
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <button_check+0x292>
			break;
 8000f9c:	bf00      	nop

	if (BUTTON_GetAction(BUTTON_VENT) == BUTTON_LONG_PRESS && !*settings_open) {
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f009 fb3a 	bl	800a618 <BUTTON_GetAction>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d10f      	bne.n	8000fca <button_check+0x2be>
 8000faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <button_check+0x2be>
		cur_mode->vent = change_vent_mode(cur_mode->vent);
 8000fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 ff9b 	bl	8002ef8 <change_vent_mode>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fc8:	705a      	strb	r2, [r3, #1]
	}

	if (BUTTON_GetAction(BUTTON_MUTE) == BUTTON_LONG_PRESS)
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f009 fb24 	bl	800a618 <BUTTON_GetAction>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d102      	bne.n	8000fdc <button_check+0x2d0>
		*mute_counter = 120;
 8000fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fd8:	2278      	movs	r2, #120	; 0x78
 8000fda:	701a      	strb	r2, [r3, #0]

	cur_mode->mode = (*mix_mode + (*o2_mode * 10));
 8000fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	0089      	lsls	r1, r1, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ff4:	701a      	strb	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001000:	b004      	add	sp, #16
 8001002:	4770      	bx	lr
 8001004:	0800ef70 	.word	0x0800ef70
 8001008:	48000800 	.word	0x48000800
 800100c:	48000400 	.word	0x48000400

08001010 <setGasType>:

	sprintf(string, "%d.%d  ", res, res1);
    strcpy (out, string);
}

void setGasType(I2C_HandleTypeDef hi2c1, int num) {
 8001010:	b084      	sub	sp, #16
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af02      	add	r7, sp, #8
 8001018:	f107 0c10 	add.w	ip, r7, #16
 800101c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t comCode[2] = { SETGASTYPE, 0x00 };
 8001020:	2306      	movs	r3, #6
 8001022:	80bb      	strh	r3, [r7, #4]
	if (num == 1) {
 8001024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <setGasType+0x20>
		comCode[1] = 0x01;
 800102a:	2301      	movs	r3, #1
 800102c:	717b      	strb	r3, [r7, #5]
 800102e:	e001      	b.n	8001034 <setGasType+0x24>
	} else
		comCode[1] = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	717b      	strb	r3, [r7, #5]
	uint8_t answer0 = 0x00;
 8001034:	2300      	movs	r3, #0
 8001036:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c1, (I2C_ADDRESS << 1), comCode, 2, 5);
 8001038:	1d3a      	adds	r2, r7, #4
 800103a:	2305      	movs	r3, #5
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2302      	movs	r3, #2
 8001040:	2100      	movs	r1, #0
 8001042:	f107 0010 	add.w	r0, r7, #16
 8001046:	f003 fde5 	bl	8004c14 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800104a:	2005      	movs	r0, #5
 800104c:	f002 f942 	bl	80032d4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (I2C_ADDRESS << 1), &answer0, 3, 5);
 8001050:	1cfa      	adds	r2, r7, #3
 8001052:	2305      	movs	r3, #5
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2303      	movs	r3, #3
 8001058:	2100      	movs	r1, #0
 800105a:	f107 0010 	add.w	r0, r7, #16
 800105e:	f003 fecd 	bl	8004dfc <HAL_I2C_Master_Receive>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800106c:	b004      	add	sp, #16
 800106e:	4770      	bx	lr

08001070 <get_both>:
	sprintf(string, "%d.%d  ", res, res1);

	strcpy(out, string);
}

void get_both(I2C_HandleTypeDef hi2c1, uint16_t out[]) {
 8001070:	b084      	sub	sp, #16
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b087      	sub	sp, #28
 8001076:	af02      	add	r7, sp, #8
 8001078:	f107 0420 	add.w	r4, r7, #32
 800107c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t answer5[] = { 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <get_both+0xa0>)
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	6018      	str	r0, [r3, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	7019      	strb	r1, [r3, #0]
	uint8_t comCode = GETBOTH;
 8001090:	2303      	movs	r3, #3
 8001092:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, (I2C_ADDRESS << 1), &comCode, 1, 5);
 8001094:	1dfa      	adds	r2, r7, #7
 8001096:	2305      	movs	r3, #5
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2100      	movs	r1, #0
 800109e:	f107 0020 	add.w	r0, r7, #32
 80010a2:	f003 fdb7 	bl	8004c14 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f002 f914 	bl	80032d4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (I2C_ADDRESS << 1), answer5, 5, 5);
 80010ac:	f107 0208 	add.w	r2, r7, #8
 80010b0:	2305      	movs	r3, #5
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2305      	movs	r3, #5
 80010b6:	2100      	movs	r1, #0
 80010b8:	f107 0020 	add.w	r0, r7, #32
 80010bc:	f003 fe9e 	bl	8004dfc <HAL_I2C_Master_Receive>

	if (sum_check(answer5[0], answer5[1], answer5[2], answer5[3], answer5[4])) {
 80010c0:	7a38      	ldrb	r0, [r7, #8]
 80010c2:	7a79      	ldrb	r1, [r7, #9]
 80010c4:	7aba      	ldrb	r2, [r7, #10]
 80010c6:	7afc      	ldrb	r4, [r7, #11]
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4623      	mov	r3, r4
 80010ce:	f000 f85b 	bl	8001188 <sum_check>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d014      	beq.n	8001102 <get_both+0x92>
		out[0] = ((answer5[1] << 8) + answer5[0]);
 80010d8:	7a7b      	ldrb	r3, [r7, #9]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29a      	uxth	r2, r3
 80010e0:	7a3b      	ldrb	r3, [r7, #8]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ea:	801a      	strh	r2, [r3, #0]
		out[1] = ((answer5[3] << 8) + answer5[2]);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b299      	uxth	r1, r3
 80010f4:	7abb      	ldrb	r3, [r7, #10]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010fa:	3302      	adds	r3, #2
 80010fc:	440a      	add	r2, r1
 80010fe:	b292      	uxth	r2, r2
 8001100:	801a      	strh	r2, [r3, #0]
	}
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800110c:	b004      	add	sp, #16
 800110e:	4770      	bx	lr
 8001110:	0800ef90 	.word	0x0800ef90

08001114 <calOxy>:

uint8_t calOxy(I2C_HandleTypeDef hi2c1, uint8_t lbyte, uint8_t hbyte) {
 8001114:	b084      	sub	sp, #16
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af02      	add	r7, sp, #8
 800111c:	f107 0c18 	add.w	ip, r7, #24
 8001120:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// lbyte and hbyte must be hexadecimal | format: (0x00)

	uint8_t cbyte = ~(lbyte + hbyte);
 8001124:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8001128:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800112c:	4413      	add	r3, r2
 800112e:	b2db      	uxtb	r3, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]
	uint8_t comCode[4] = { CALOXY, lbyte, hbyte, cbyte };
 8001134:	230b      	movs	r3, #11
 8001136:	723b      	strb	r3, [r7, #8]
 8001138:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800113c:	727b      	strb	r3, [r7, #9]
 800113e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001142:	72bb      	strb	r3, [r7, #10]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	72fb      	strb	r3, [r7, #11]
	uint8_t answer = 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, (I2C_ADDRESS << 1), comCode, 4, 10);
 800114c:	f107 0208 	add.w	r2, r7, #8
 8001150:	230a      	movs	r3, #10
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2304      	movs	r3, #4
 8001156:	2100      	movs	r1, #0
 8001158:	f107 0018 	add.w	r0, r7, #24
 800115c:	f003 fd5a 	bl	8004c14 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001160:	2005      	movs	r0, #5
 8001162:	f002 f8b7 	bl	80032d4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (I2C_ADDRESS << 1), &answer, 1, 10);
 8001166:	1dfa      	adds	r2, r7, #7
 8001168:	230a      	movs	r3, #10
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2100      	movs	r1, #0
 8001170:	f107 0018 	add.w	r0, r7, #24
 8001174:	f003 fe42 	bl	8004dfc <HAL_I2C_Master_Receive>

	return answer;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <sum_check>:

bool sum_check(uint8_t hi, uint8_t lo, uint8_t hi2, uint8_t lo2,
		uint8_t sum_ans) {
 8001188:	b490      	push	{r4, r7}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4604      	mov	r4, r0
 8001190:	4608      	mov	r0, r1
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	4623      	mov	r3, r4
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	4603      	mov	r3, r0
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	460b      	mov	r3, r1
 80011a0:	717b      	strb	r3, [r7, #5]
 80011a2:	4613      	mov	r3, r2
 80011a4:	713b      	strb	r3, [r7, #4]
	uint8_t sum = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
	sum = hi + lo + hi2 + lo2;
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	4413      	add	r3, r2
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	793b      	ldrb	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	73fb      	strb	r3, [r7, #15]
	sum = ~sum;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	sum = sum & 255;
	if (sum_ans == sum)
 80011c4:	7e3a      	ldrb	r2, [r7, #24]
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d101      	bne.n	80011d0 <sum_check+0x48>
		return true;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <sum_check+0x4a>
	else
		return false;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc90      	pop	{r4, r7}
 80011da:	4770      	bx	lr

080011dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b0a0      	sub	sp, #128	; 0x80
 80011e0:	af20      	add	r7, sp, #128	; 0x80
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011e2:	f002 f811 	bl	8003208 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011e6:	f000 fa51 	bl	800168c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011ea:	f000 fdd5 	bl	8001d98 <MX_GPIO_Init>
	MX_ADC1_Init();
 80011ee:	f000 faab 	bl	8001748 <MX_ADC1_Init>
	MX_I2C1_Init();
 80011f2:	f000 fb3b 	bl	800186c <MX_I2C1_Init>
	MX_SPI1_Init();
 80011f6:	f000 fb79 	bl	80018ec <MX_SPI1_Init>
	MX_TIM3_Init();
 80011fa:	f000 fbf3 	bl	80019e4 <MX_TIM3_Init>
	MX_TIM6_Init();
 80011fe:	f000 fc4b 	bl	8001a98 <MX_TIM6_Init>
	MX_TIM15_Init();
 8001202:	f000 fd47 	bl	8001c94 <MX_TIM15_Init>
	MX_TIM7_Init();
 8001206:	f000 fc7f 	bl	8001b08 <MX_TIM7_Init>
	MX_USART2_UART_Init();
 800120a:	f000 fd95 	bl	8001d38 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800120e:	f000 fbab 	bl	8001968 <MX_SPI2_Init>
	MX_TIM8_Init();
 8001212:	f000 fcaf 	bl	8001b74 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */

	BSP_LCD_Init();
 8001216:	f00a f9f3 	bl	800b600 <BSP_LCD_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800121a:	2000      	movs	r0, #0
 800121c:	f00a fa48 	bl	800b6b0 <BSP_LCD_Clear>
	BUTTON_Init();
 8001220:	f009 fa24 	bl	800a66c <BUTTON_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001224:	2100      	movs	r1, #0
 8001226:	48b2      	ldr	r0, [pc, #712]	; (80014f0 <main+0x314>)
 8001228:	f002 fb6e 	bl	8003908 <HAL_ADCEx_Calibration_Start>
	TIM3->CCR2 = 0;
 800122c:	4bb1      	ldr	r3, [pc, #708]	; (80014f4 <main+0x318>)
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR2 = 0;
 8001232:	4bb1      	ldr	r3, [pc, #708]	; (80014f8 <main+0x31c>)
 8001234:	2200      	movs	r2, #0
 8001236:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_Base_Start_IT(&htim3);
 8001238:	48b0      	ldr	r0, [pc, #704]	; (80014fc <main+0x320>)
 800123a:	f006 fdd7 	bl	8007dec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800123e:	48b0      	ldr	r0, [pc, #704]	; (8001500 <main+0x324>)
 8001240:	f006 fdd4 	bl	8007dec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 8001244:	48af      	ldr	r0, [pc, #700]	; (8001504 <main+0x328>)
 8001246:	f006 fdd1 	bl	8007dec <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800124a:	2104      	movs	r1, #4
 800124c:	48ab      	ldr	r0, [pc, #684]	; (80014fc <main+0x320>)
 800124e:	f006 fe8f 	bl	8007f70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001252:	2104      	movs	r1, #4
 8001254:	48ac      	ldr	r0, [pc, #688]	; (8001508 <main+0x32c>)
 8001256:	f006 fe8b 	bl	8007f70 <HAL_TIM_PWM_Start>

	cur_mode.mode = 0;
 800125a:	4bac      	ldr	r3, [pc, #688]	; (800150c <main+0x330>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
	cur_mode.vent = 0;
 8001260:	4baa      	ldr	r3, [pc, #680]	; (800150c <main+0x330>)
 8001262:	2200      	movs	r2, #0
 8001264:	705a      	strb	r2, [r3, #1]
	cur_mode.ar_setting = 400;
 8001266:	4ba9      	ldr	r3, [pc, #676]	; (800150c <main+0x330>)
 8001268:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800126c:	805a      	strh	r2, [r3, #2]
	cur_mode.o2_setting = 400;
 800126e:	4ba7      	ldr	r3, [pc, #668]	; (800150c <main+0x330>)
 8001270:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001274:	809a      	strh	r2, [r3, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	setGasType(hi2c1, 1);
 8001276:	4ca6      	ldr	r4, [pc, #664]	; (8001510 <main+0x334>)
 8001278:	2301      	movs	r3, #1
 800127a:	9311      	str	r3, [sp, #68]	; 0x44
 800127c:	4668      	mov	r0, sp
 800127e:	f104 0310 	add.w	r3, r4, #16
 8001282:	2244      	movs	r2, #68	; 0x44
 8001284:	4619      	mov	r1, r3
 8001286:	f00a ff79 	bl	800c17c <memcpy>
 800128a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800128e:	f7ff febf 	bl	8001010 <setGasType>

	HAL_ADC_Start(&hadc1);
 8001292:	4897      	ldr	r0, [pc, #604]	; (80014f0 <main+0x314>)
 8001294:	f002 fa22 	bl	80036dc <HAL_ADC_Start>

	main_page();
 8001298:	f001 fbd0 	bl	8002a3c <main_page>
	button_led_init();
 800129c:	f7ff fcd4 	bl	8000c48 <button_led_init>

	while (1) {
		BUTTON_Process();
 80012a0:	f009 f976 	bl	800a590 <BUTTON_Process>

		if (BUTTON_GetAction(BUTTON_ON) == BUTTON_LONG_PRESS) {
 80012a4:	2008      	movs	r0, #8
 80012a6:	f009 f9b7 	bl	800a618 <BUTTON_GetAction>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d132      	bne.n	8001316 <main+0x13a>
			if (work_on == 0) {
 80012b0:	4b98      	ldr	r3, [pc, #608]	; (8001514 <main+0x338>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10c      	bne.n	80012d2 <main+0xf6>
				button_on();
 80012b8:	f7ff fce6 	bl	8000c88 <button_on>
				work_on = 1;
 80012bc:	4b95      	ldr	r3, [pc, #596]	; (8001514 <main+0x338>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
				cur_mode.vent = change_vent_mode(0);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 fe18 	bl	8002ef8 <change_vent_mode>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b8f      	ldr	r3, [pc, #572]	; (800150c <main+0x330>)
 80012ce:	705a      	strb	r2, [r3, #1]
 80012d0:	e021      	b.n	8001316 <main+0x13a>
			} else {
				work_on = 0;
 80012d2:	4b90      	ldr	r3, [pc, #576]	; (8001514 <main+0x338>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
				button_off();
 80012d8:	f7ff fcea 	bl	8000cb0 <button_off>
				cur_mode.vent = change_vent_mode(3);
 80012dc:	2003      	movs	r0, #3
 80012de:	f001 fe0b 	bl	8002ef8 <change_vent_mode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b89      	ldr	r3, [pc, #548]	; (800150c <main+0x330>)
 80012e8:	705a      	strb	r2, [r3, #1]
				cur_mode.mode = 0;
 80012ea:	4b88      	ldr	r3, [pc, #544]	; (800150c <main+0x330>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
				o2_mode = 0;
 80012f0:	4b89      	ldr	r3, [pc, #548]	; (8001518 <main+0x33c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
				ar_mode = 0;
 80012f6:	4b89      	ldr	r3, [pc, #548]	; (800151c <main+0x340>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
				TIM8->CCR2 = 0;
 80012fc:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <main+0x31c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	639a      	str	r2, [r3, #56]	; 0x38
				mute_counter = 0;
 8001302:	4b87      	ldr	r3, [pc, #540]	; (8001520 <main+0x344>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
				settings_open = 0;
 8001308:	4b86      	ldr	r3, [pc, #536]	; (8001524 <main+0x348>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
				delete_main_frame();
 800130e:	f001 fe61 	bl	8002fd4 <delete_main_frame>
				main_page();
 8001312:	f001 fb93 	bl	8002a3c <main_page>
			}
		}

		if (work_on) {
 8001316:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <main+0x338>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 819e 	beq.w	800165c <main+0x480>

			get_both(hi2c1, i2c_answer);
 8001320:	4c7b      	ldr	r4, [pc, #492]	; (8001510 <main+0x334>)
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <main+0x34c>)
 8001324:	9311      	str	r3, [sp, #68]	; 0x44
 8001326:	4668      	mov	r0, sp
 8001328:	f104 0310 	add.w	r3, r4, #16
 800132c:	2244      	movs	r2, #68	; 0x44
 800132e:	4619      	mov	r1, r3
 8001330:	f00a ff24 	bl	800c17c <memcpy>
 8001334:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001338:	f7ff fe9a 	bl	8001070 <get_both>

			modbus_get_temp_hum(huart2, &temp, &hum);
 800133c:	4c7b      	ldr	r4, [pc, #492]	; (800152c <main+0x350>)
 800133e:	4b7c      	ldr	r3, [pc, #496]	; (8001530 <main+0x354>)
 8001340:	931f      	str	r3, [sp, #124]	; 0x7c
 8001342:	4b7c      	ldr	r3, [pc, #496]	; (8001534 <main+0x358>)
 8001344:	931e      	str	r3, [sp, #120]	; 0x78
 8001346:	4668      	mov	r0, sp
 8001348:	f104 0310 	add.w	r3, r4, #16
 800134c:	2278      	movs	r2, #120	; 0x78
 800134e:	4619      	mov	r1, r3
 8001350:	f00a ff14 	bl	800c17c <memcpy>
 8001354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001358:	f000 ff00 	bl	800215c <modbus_get_temp_hum>

			button_check(hi2c1, &o2_mode, &ar_mode, &cur_mode, &mute_counter,
 800135c:	4c6c      	ldr	r4, [pc, #432]	; (8001510 <main+0x334>)
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <main+0x35c>)
 8001360:	9316      	str	r3, [sp, #88]	; 0x58
 8001362:	4b70      	ldr	r3, [pc, #448]	; (8001524 <main+0x348>)
 8001364:	9315      	str	r3, [sp, #84]	; 0x54
 8001366:	4b6e      	ldr	r3, [pc, #440]	; (8001520 <main+0x344>)
 8001368:	9314      	str	r3, [sp, #80]	; 0x50
 800136a:	4b68      	ldr	r3, [pc, #416]	; (800150c <main+0x330>)
 800136c:	9313      	str	r3, [sp, #76]	; 0x4c
 800136e:	4b6b      	ldr	r3, [pc, #428]	; (800151c <main+0x340>)
 8001370:	9312      	str	r3, [sp, #72]	; 0x48
 8001372:	4b69      	ldr	r3, [pc, #420]	; (8001518 <main+0x33c>)
 8001374:	9311      	str	r3, [sp, #68]	; 0x44
 8001376:	4668      	mov	r0, sp
 8001378:	f104 0310 	add.w	r3, r4, #16
 800137c:	2244      	movs	r2, #68	; 0x44
 800137e:	4619      	mov	r1, r3
 8001380:	f00a fefc 	bl	800c17c <memcpy>
 8001384:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001388:	f7ff fcc0 	bl	8000d0c <button_check>
					&settings_open, &setting_mode);

			if (counter_choice == 9) {
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <main+0x360>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d125      	bne.n	80013e0 <main+0x204>
				o2_mid = i2c_o2_sum / del;
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <main+0x364>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <main+0x368>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b68      	ldr	r3, [pc, #416]	; (8001548 <main+0x36c>)
 80013a6:	801a      	strh	r2, [r3, #0]
				ar_mid = i2c_ar_sum / del;
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <main+0x370>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b65      	ldr	r3, [pc, #404]	; (8001544 <main+0x368>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b65      	ldr	r3, [pc, #404]	; (8001550 <main+0x374>)
 80013ba:	801a      	strh	r2, [r3, #0]
				adc_co2 = adc_co2_sum / del;
 80013bc:	4b65      	ldr	r3, [pc, #404]	; (8001554 <main+0x378>)
 80013be:	edd3 6a00 	vldr	s13, [r3]
 80013c2:	4b60      	ldr	r3, [pc, #384]	; (8001544 <main+0x368>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <main+0x37c>)
 80013de:	801a      	strh	r2, [r3, #0]
			}

			if (!settings_open) {
 80013e0:	4b50      	ldr	r3, [pc, #320]	; (8001524 <main+0x348>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <main+0x23e>
				sensors_draw(o2_mid, temp, hum, adc_co2, ar_mid, &cur_mode);
 80013ee:	4b56      	ldr	r3, [pc, #344]	; (8001548 <main+0x36c>)
 80013f0:	8818      	ldrh	r0, [r3, #0]
 80013f2:	4b50      	ldr	r3, [pc, #320]	; (8001534 <main+0x358>)
 80013f4:	8819      	ldrh	r1, [r3, #0]
 80013f6:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <main+0x354>)
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	4b57      	ldr	r3, [pc, #348]	; (8001558 <main+0x37c>)
 80013fc:	881c      	ldrh	r4, [r3, #0]
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <main+0x374>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	4d42      	ldr	r5, [pc, #264]	; (800150c <main+0x330>)
 8001404:	9501      	str	r5, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	f001 fbe7 	bl	8002bdc <sensors_draw>
				work_mode(cur_mode.mode);
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <main+0x330>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fcee 	bl	8002df4 <work_mode>
 8001418:	e002      	b.n	8001420 <main+0x244>
			} else {
				settings_draw(&cur_mode);
 800141a:	483c      	ldr	r0, [pc, #240]	; (800150c <main+0x330>)
 800141c:	f001 fde2 	bl	8002fe4 <settings_draw>
			}

			switch (cur_mode.mode) {
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <main+0x330>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b0b      	cmp	r3, #11
 8001426:	f200 80f5 	bhi.w	8001614 <main+0x438>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <main+0x254>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001461 	.word	0x08001461
 8001434:	08001479 	.word	0x08001479
 8001438:	08001615 	.word	0x08001615
 800143c:	08001615 	.word	0x08001615
 8001440:	08001615 	.word	0x08001615
 8001444:	08001615 	.word	0x08001615
 8001448:	08001615 	.word	0x08001615
 800144c:	08001615 	.word	0x08001615
 8001450:	08001615 	.word	0x08001615
 8001454:	08001615 	.word	0x08001615
 8001458:	080014bb 	.word	0x080014bb
 800145c:	08001577 	.word	0x08001577
			case 0:
				HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin, PIN_OFF);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	483d      	ldr	r0, [pc, #244]	; (800155c <main+0x380>)
 8001468:	f003 fb2c 	bl	8004ac4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin, PIN_OFF);
 800146c:	2200      	movs	r2, #0
 800146e:	2102      	movs	r1, #2
 8001470:	483a      	ldr	r0, [pc, #232]	; (800155c <main+0x380>)
 8001472:	f003 fb27 	bl	8004ac4 <HAL_GPIO_WritePin>
				break;
 8001476:	e0d9      	b.n	800162c <main+0x450>
			case 1:
				HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin, PIN_OFF);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <main+0x380>)
 8001480:	f003 fb20 	bl	8004ac4 <HAL_GPIO_WritePin>
				if (ar_mid < cur_mode.ar_setting - setting_corr && porsion) {
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <main+0x374>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <main+0x330>)
 800148c:	885b      	ldrh	r3, [r3, #2]
 800148e:	4619      	mov	r1, r3
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <main+0x384>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	1acb      	subs	r3, r1, r3
 8001496:	429a      	cmp	r2, r3
 8001498:	da09      	bge.n	80014ae <main+0x2d2>
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <main+0x388>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <main+0x2d2>
					HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin,
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	482d      	ldr	r0, [pc, #180]	; (800155c <main+0x380>)
 80014a8:	f003 fb0c 	bl	8004ac4 <HAL_GPIO_WritePin>
					PIN_ON);
				} else
					HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin,
					PIN_OFF);
				break;
 80014ac:	e0be      	b.n	800162c <main+0x450>
					HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin,
 80014ae:	2200      	movs	r2, #0
 80014b0:	2102      	movs	r1, #2
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <main+0x380>)
 80014b4:	f003 fb06 	bl	8004ac4 <HAL_GPIO_WritePin>
				break;
 80014b8:	e0b8      	b.n	800162c <main+0x450>
			case 10:
				HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin, PIN_OFF);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2102      	movs	r1, #2
 80014be:	4827      	ldr	r0, [pc, #156]	; (800155c <main+0x380>)
 80014c0:	f003 fb00 	bl	8004ac4 <HAL_GPIO_WritePin>
				if (o2_mid < cur_mode.o2_setting - setting_corr && porsion) {
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <main+0x36c>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <main+0x330>)
 80014cc:	889b      	ldrh	r3, [r3, #4]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <main+0x384>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	1acb      	subs	r3, r1, r3
 80014d6:	429a      	cmp	r2, r3
 80014d8:	da46      	bge.n	8001568 <main+0x38c>
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <main+0x388>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d042      	beq.n	8001568 <main+0x38c>
					HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin, PIN_ON);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	481c      	ldr	r0, [pc, #112]	; (800155c <main+0x380>)
 80014ea:	f003 faeb 	bl	8004ac4 <HAL_GPIO_WritePin>
				} else
					HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin,
					PIN_OFF);
				break;
 80014ee:	e09d      	b.n	800162c <main+0x450>
 80014f0:	200002a4 	.word	0x200002a4
 80014f4:	40000400 	.word	0x40000400
 80014f8:	40013400 	.word	0x40013400
 80014fc:	20000410 	.word	0x20000410
 8001500:	2000045c 	.word	0x2000045c
 8001504:	20000540 	.word	0x20000540
 8001508:	200004f4 	.word	0x200004f4
 800150c:	20000614 	.word	0x20000614
 8001510:	200002f4 	.word	0x200002f4
 8001514:	2000063a 	.word	0x2000063a
 8001518:	20000638 	.word	0x20000638
 800151c:	20000639 	.word	0x20000639
 8001520:	20000626 	.word	0x20000626
 8001524:	20000625 	.word	0x20000625
 8001528:	20000634 	.word	0x20000634
 800152c:	2000058c 	.word	0x2000058c
 8001530:	20000630 	.word	0x20000630
 8001534:	2000062e 	.word	0x2000062e
 8001538:	20000000 	.word	0x20000000
 800153c:	20000628 	.word	0x20000628
 8001540:	20000620 	.word	0x20000620
 8001544:	20000001 	.word	0x20000001
 8001548:	2000062a 	.word	0x2000062a
 800154c:	20000622 	.word	0x20000622
 8001550:	2000062c 	.word	0x2000062c
 8001554:	2000061c 	.word	0x2000061c
 8001558:	20000632 	.word	0x20000632
 800155c:	48000400 	.word	0x48000400
 8001560:	20000002 	.word	0x20000002
 8001564:	20000624 	.word	0x20000624
					HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin,
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156e:	483d      	ldr	r0, [pc, #244]	; (8001664 <main+0x488>)
 8001570:	f003 faa8 	bl	8004ac4 <HAL_GPIO_WritePin>
				break;
 8001574:	e05a      	b.n	800162c <main+0x450>
			case 11:
				if (ar_mid < cur_mode.ar_setting - setting_corr && porsion) {
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <main+0x48c>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <main+0x490>)
 800157e:	885b      	ldrh	r3, [r3, #2]
 8001580:	4619      	mov	r1, r3
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <main+0x494>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	1acb      	subs	r3, r1, r3
 8001588:	429a      	cmp	r2, r3
 800158a:	da09      	bge.n	80015a0 <main+0x3c4>
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <main+0x498>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <main+0x3c4>
					HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin,
 8001594:	2201      	movs	r2, #1
 8001596:	2102      	movs	r1, #2
 8001598:	4832      	ldr	r0, [pc, #200]	; (8001664 <main+0x488>)
 800159a:	f003 fa93 	bl	8004ac4 <HAL_GPIO_WritePin>
 800159e:	e004      	b.n	80015aa <main+0x3ce>
					PIN_ON);
				} else
					HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin,
 80015a0:	2200      	movs	r2, #0
 80015a2:	2102      	movs	r1, #2
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <main+0x488>)
 80015a6:	f003 fa8d 	bl	8004ac4 <HAL_GPIO_WritePin>
					PIN_OFF);

				if (porsion && ar_mid > cur_mode.ar_setting - setting_corr
 80015aa:	4b32      	ldr	r3, [pc, #200]	; (8001674 <main+0x498>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d028      	beq.n	8001604 <main+0x428>
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <main+0x48c>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <main+0x490>)
 80015ba:	885b      	ldrh	r3, [r3, #2]
 80015bc:	4619      	mov	r1, r3
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <main+0x494>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	1acb      	subs	r3, r1, r3
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dd1d      	ble.n	8001604 <main+0x428>
						&& ar_mid < 1000) {
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <main+0x48c>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d0:	d218      	bcs.n	8001604 <main+0x428>
					if (o2_mid < cur_mode.o2_setting - setting_corr) {
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <main+0x49c>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <main+0x490>)
 80015da:	889b      	ldrh	r3, [r3, #4]
 80015dc:	4619      	mov	r1, r3
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <main+0x494>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	1acb      	subs	r3, r1, r3
 80015e4:	429a      	cmp	r2, r3
 80015e6:	da06      	bge.n	80015f6 <main+0x41a>
						HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin,
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ee:	481d      	ldr	r0, [pc, #116]	; (8001664 <main+0x488>)
 80015f0:	f003 fa68 	bl	8004ac4 <HAL_GPIO_WritePin>
					if (o2_mid < cur_mode.o2_setting - setting_corr) {
 80015f4:	e00d      	b.n	8001612 <main+0x436>
						PIN_ON);
					} else
						HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin,
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	4819      	ldr	r0, [pc, #100]	; (8001664 <main+0x488>)
 80015fe:	f003 fa61 	bl	8004ac4 <HAL_GPIO_WritePin>
					if (o2_mid < cur_mode.o2_setting - setting_corr) {
 8001602:	e006      	b.n	8001612 <main+0x436>
						PIN_OFF);
				} else {
					HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin,
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160a:	4816      	ldr	r0, [pc, #88]	; (8001664 <main+0x488>)
 800160c:	f003 fa5a 	bl	8004ac4 <HAL_GPIO_WritePin>
					PIN_OFF);
				}
				break;
 8001610:	e00c      	b.n	800162c <main+0x450>
 8001612:	e00b      	b.n	800162c <main+0x450>
			default:
				HAL_GPIO_WritePin(O2_VALVE_GPIO_Port, O2_VALVE_Pin, PIN_OFF);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <main+0x488>)
 800161c:	f003 fa52 	bl	8004ac4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin, PIN_OFF);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <main+0x488>)
 8001626:	f003 fa4d 	bl	8004ac4 <HAL_GPIO_WritePin>
				break;
 800162a:	bf00      	nop
			}

			if ((adc_co2 > 100 || o2_mid < 190 || temp > 4000)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <main+0x4a0>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2b64      	cmp	r3, #100	; 0x64
 8001632:	d808      	bhi.n	8001646 <main+0x46a>
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <main+0x49c>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	2bbd      	cmp	r3, #189	; 0xbd
 800163a:	d904      	bls.n	8001646 <main+0x46a>
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <main+0x4a4>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001644:	d907      	bls.n	8001656 <main+0x47a>
					&& mute_counter == 0) {
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <main+0x4a8>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <main+0x47a>
				TIM8->CCR2 = 20;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <main+0x4ac>)
 8001650:	2214      	movs	r2, #20
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
 8001654:	e002      	b.n	800165c <main+0x480>
			} else
				TIM8->CCR2 = 0;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <main+0x4ac>)
 8001658:	2200      	movs	r2, #0
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
		}

		BUTTON_ResetActions();
 800165c:	f008 ffec 	bl	800a638 <BUTTON_ResetActions>
		BUTTON_Process();
 8001660:	e61e      	b.n	80012a0 <main+0xc4>
 8001662:	bf00      	nop
 8001664:	48000400 	.word	0x48000400
 8001668:	2000062c 	.word	0x2000062c
 800166c:	20000614 	.word	0x20000614
 8001670:	20000002 	.word	0x20000002
 8001674:	20000624 	.word	0x20000624
 8001678:	2000062a 	.word	0x2000062a
 800167c:	20000632 	.word	0x20000632
 8001680:	2000062e 	.word	0x2000062e
 8001684:	20000626 	.word	0x20000626
 8001688:	40013400 	.word	0x40013400

0800168c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b09e      	sub	sp, #120	; 0x78
 8001690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001692:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001696:	2228      	movs	r2, #40	; 0x28
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00a fd7c 	bl	800c198 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80016b0:	463b      	mov	r3, r7
 80016b2:	223c      	movs	r2, #60	; 0x3c
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00a fd6e 	bl	800c198 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c4:	2310      	movs	r3, #16
 80016c6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016cc:	2300      	movs	r3, #0
 80016ce:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016d0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80016d4:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fd40 	bl	8006160 <HAL_RCC_OscConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0x5e>
		Error_Handler();
 80016e6:	f000 fcab 	bl	8002040 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016ea:	230f      	movs	r3, #15
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2302      	movs	r3, #2
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001700:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f005 fd68 	bl	80071dc <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x8a>
		Error_Handler();
 8001712:	f000 fc95 	bl	8002040 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8001716:	f242 03a2 	movw	r3, #8354	; 0x20a2
 800171a:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
 8001720:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001726:	2310      	movs	r3, #16
 8001728:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800172e:	463b      	mov	r3, r7
 8001730:	4618      	mov	r0, r3
 8001732:	f005 ff89 	bl	8007648 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xb4>
		Error_Handler();
 800173c:	f000 fc80 	bl	8002040 <Error_Handler>
	}
}
 8001740:	bf00      	nop
 8001742:	3778      	adds	r7, #120	; 0x78
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	; 0x38
 800174c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800174e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2228      	movs	r2, #40	; 0x28
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f00a fd19 	bl	800c198 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001766:	4b40      	ldr	r3, [pc, #256]	; (8001868 <MX_ADC1_Init+0x120>)
 8001768:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800176c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800176e:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <MX_ADC1_Init+0x120>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <MX_ADC1_Init+0x120>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <MX_ADC1_Init+0x120>)
 800177c:	2201      	movs	r2, #1
 800177e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <MX_ADC1_Init+0x120>)
 8001782:	2201      	movs	r2, #1
 8001784:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <MX_ADC1_Init+0x120>)
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <MX_ADC1_Init+0x120>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <MX_ADC1_Init+0x120>)
 8001796:	2201      	movs	r2, #1
 8001798:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <MX_ADC1_Init+0x120>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017a2:	4b31      	ldr	r3, [pc, #196]	; (8001868 <MX_ADC1_Init+0x120>)
 80017a4:	2204      	movs	r2, #4
 80017a6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <MX_ADC1_Init+0x120>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <MX_ADC1_Init+0x120>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80017b4:	482c      	ldr	r0, [pc, #176]	; (8001868 <MX_ADC1_Init+0x120>)
 80017b6:	f001 fdb1 	bl	800331c <HAL_ADC_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0x7c>
		Error_Handler();
 80017c0:	f000 fc3e 	bl	8002040 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80017c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4826      	ldr	r0, [pc, #152]	; (8001868 <MX_ADC1_Init+0x120>)
 80017d0:	f002 fc94 	bl	80040fc <HAL_ADCEx_MultiModeConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0x96>
		Error_Handler();
 80017da:	f000 fc31 	bl	8002040 <Error_Handler>
	}

	/** Configure Injected Channel
	 */
	sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80017de:	2301      	movs	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
	sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
	sConfigInjected.InjectedNbrOfConversion = 3;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61fb      	str	r3, [r7, #28]
	sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80017ee:	2304      	movs	r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
	sConfigInjected.ExternalTrigInjecConvEdge =
 80017f2:	2340      	movs	r3, #64	; 0x40
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
	sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigInjected.AutoInjectedConv = ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3020 	strb.w	r3, [r7, #32]
	sConfigInjected.QueueInjectedContext = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	sConfigInjected.InjectedOffset = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
	sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <MX_ADC1_Init+0x120>)
 800181a:	f002 f8e7 	bl	80039ec <HAL_ADCEx_InjectedConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC1_Init+0xe0>
		Error_Handler();
 8001824:	f000 fc0c 	bl	8002040 <Error_Handler>
	}

	/** Configure Injected Channel
	 */
	sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001828:	2302      	movs	r3, #2
 800182a:	607b      	str	r3, [r7, #4]
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800182c:	2302      	movs	r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4619      	mov	r1, r3
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <MX_ADC1_Init+0x120>)
 8001836:	f002 f8d9 	bl	80039ec <HAL_ADCEx_InjectedConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0xfc>
		Error_Handler();
 8001840:	f000 fbfe 	bl	8002040 <Error_Handler>
	}

	/** Configure Injected Channel
	 */
	sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001844:	2305      	movs	r3, #5
 8001846:	607b      	str	r3, [r7, #4]
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001848:	2303      	movs	r3, #3
 800184a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_ADC1_Init+0x120>)
 8001852:	f002 f8cb 	bl	80039ec <HAL_ADCEx_InjectedConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_ADC1_Init+0x118>
		Error_Handler();
 800185c:	f000 fbf0 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200002a4 	.word	0x200002a4

0800186c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <MX_I2C1_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00602173;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <MX_I2C1_Init+0x7c>)
 800187a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_I2C1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001884:	2201      	movs	r2, #1
 8001886:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018a8:	f003 f924 	bl	8004af4 <HAL_I2C_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80018b2:	f000 fbc5 	bl	8002040 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018ba:	f004 fbb9 	bl	8006030 <HAL_I2CEx_ConfigAnalogFilter>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80018c4:	f000 fbbc 	bl	8002040 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80018c8:	2100      	movs	r1, #0
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018cc:	f004 fbfb 	bl	80060c6 <HAL_I2CEx_ConfigDigitalFilter>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C1_Init+0x6e>
		Error_Handler();
 80018d6:	f000 fbb3 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002f4 	.word	0x200002f4
 80018e4:	40005400 	.word	0x40005400
 80018e8:	00602173 	.word	0x00602173

080018ec <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_SPI1_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <MX_SPI1_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_SPI1_Init+0x74>)
 80018f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018fc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_SPI1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_SPI1_Init+0x74>)
 8001906:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800190a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_SPI1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_SPI1_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_SPI1_Init+0x74>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_SPI1_Init+0x74>)
 8001922:	2208      	movs	r2, #8
 8001924:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_SPI1_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_SPI1_Init+0x74>)
 800193a:	2207      	movs	r2, #7
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_SPI1_Init+0x74>)
 8001946:	2208      	movs	r2, #8
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_SPI1_Init+0x74>)
 800194c:	f006 f82c 	bl	80079a8 <HAL_SPI_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001956:	f000 fb73 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000348 	.word	0x20000348
 8001964:	40013000 	.word	0x40013000

08001968 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_SPI2_Init+0x74>)
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <MX_SPI2_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_SPI2_Init+0x74>)
 8001974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001978:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_SPI2_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_SPI2_Init+0x74>)
 8001982:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001986:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_SPI2_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_SPI2_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_SPI2_Init+0x74>)
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_SPI2_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_SPI2_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_SPI2_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_SPI2_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_SPI2_Init+0x74>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_SPI2_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_SPI2_Init+0x74>)
 80019c2:	2208      	movs	r2, #8
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_SPI2_Init+0x74>)
 80019c8:	f005 ffee 	bl	80079a8 <HAL_SPI_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_SPI2_Init+0x6e>
		Error_Handler();
 80019d2:	f000 fb35 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200003ac 	.word	0x200003ac
 80019e0:	40003800 	.word	0x40003800

080019e4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <MX_TIM3_Init+0xb0>)
 8001a0c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 34;
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a10:	2222      	movs	r2, #34	; 0x22
 8001a12:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 255;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a1c:	22ff      	movs	r2, #255	; 0xff
 8001a1e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a2e:	f006 fa47 	bl	8007ec0 <HAL_TIM_PWM_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0x58>
		Error_Handler();
 8001a38:	f000 fb02 	bl	8002040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4811      	ldr	r0, [pc, #68]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a4c:	f007 fadc 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001a56:	f000 faf3 	bl	8002040 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5a:	2360      	movs	r3, #96	; 0x60
 8001a5c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 50;
 8001a5e:	2332      	movs	r3, #50	; 0x32
 8001a60:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a72:	f006 fc9d 	bl	80083b0 <HAL_TIM_PWM_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001a7c:	f000 fae0 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <MX_TIM3_Init+0xac>)
 8001a82:	f000 fde3 	bl	800264c <HAL_TIM_MspPostInit>

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000410 	.word	0x20000410
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001aaa:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <MX_TIM6_Init+0x6c>)
 8001aac:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 639;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001ab0:	f240 227f 	movw	r2, #639	; 0x27f
 8001ab4:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 49999;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001abe:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ac2:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001acc:	f006 f937 	bl	8007d3e <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM6_Init+0x42>
		Error_Handler();
 8001ad6:	f000 fab3 	bl	8002040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <MX_TIM6_Init+0x68>)
 8001ae8:	f007 fa8e 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM6_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8001af2:	f000 faa5 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000045c 	.word	0x2000045c
 8001b04:	40001000 	.word	0x40001000

08001b08 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b1a:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <MX_TIM7_Init+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 63;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b20:	223f      	movs	r2, #63	; 0x3f
 8001b22:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 50;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b2c:	2232      	movs	r2, #50	; 0x32
 8001b2e:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b38:	f006 f901 	bl	8007d3e <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM7_Init+0x3e>
		Error_Handler();
 8001b42:	f000 fa7d 	bl	8002040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b54:	f007 fa58 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM7_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001b5e:	f000 fa6f 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200004a8 	.word	0x200004a8
 8001b70:	40001400 	.word	0x40001400

08001b74 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	; 0x58
 8001b78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	222c      	movs	r2, #44	; 0x2c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00a faf9 	bl	800c198 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001ba8:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <MX_TIM8_Init+0x11c>)
 8001baa:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 639;
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bae:	f240 227f 	movw	r2, #639	; 0x27f
 8001bb2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 39;
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bbc:	2227      	movs	r2, #39	; 0x27
 8001bbe:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001bd2:	482e      	ldr	r0, [pc, #184]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bd4:	f006 f974 	bl	8007ec0 <HAL_TIM_PWM_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM8_Init+0x6e>
		Error_Handler();
 8001bde:	f000 fa2f 	bl	8002040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001bee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4825      	ldr	r0, [pc, #148]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001bf6:	f007 fa07 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM8_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001c00:	f000 fa1e 	bl	8002040 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c04:	2360      	movs	r3, #96	; 0x60
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 10;
 8001c08:	230a      	movs	r3, #10
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001c20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c24:	2204      	movs	r2, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001c2a:	f006 fbc1 	bl	80083b0 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001c34:	f000 fa04 	bl	8002040 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001c6e:	f007 fa4b 	bl	8009108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM8_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8001c78:	f000 f9e2 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM8_Init+0x118>)
 8001c7e:	f000 fce5 	bl	800264c <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3758      	adds	r7, #88	; 0x58
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200004f4 	.word	0x200004f4
 8001c90:	40013400 	.word	0x40013400

08001c94 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <MX_TIM15_Init+0xa0>)
 8001cb6:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 63;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cba:	223f      	movs	r2, #63	; 0x3f
 8001cbc:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 999;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cca:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8001cde:	4814      	ldr	r0, [pc, #80]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001ce0:	f006 f82d 	bl	8007d3e <HAL_TIM_Base_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM15_Init+0x5a>
		Error_Handler();
 8001cea:	f000 f9a9 	bl	8002040 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001cfc:	f006 fc6c 	bl	80085d8 <HAL_TIM_ConfigClockSource>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM15_Init+0x76>
		Error_Handler();
 8001d06:	f000 f99b 	bl	8002040 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_TIM15_Init+0x9c>)
 8001d18:	f007 f976 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM15_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 8001d22:	f000 f98d 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000540 	.word	0x20000540
 8001d34:	40014000 	.word	0x40014000

08001d38 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <MX_USART2_UART_Init+0x5c>)
 8001d40:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d48:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART2_UART_Init+0x58>)
 8001d7c:	f007 fa60 	bl	8009240 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001d86:	f000 f95b 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000058c 	.word	0x2000058c
 8001d94:	40004400 	.word	0x40004400

08001d98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b53      	ldr	r3, [pc, #332]	; (8001efc <MX_GPIO_Init+0x164>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4a52      	ldr	r2, [pc, #328]	; (8001efc <MX_GPIO_Init+0x164>)
 8001db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db8:	6153      	str	r3, [r2, #20]
 8001dba:	4b50      	ldr	r3, [pc, #320]	; (8001efc <MX_GPIO_Init+0x164>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001dc6:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <MX_GPIO_Init+0x164>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	4a4c      	ldr	r2, [pc, #304]	; (8001efc <MX_GPIO_Init+0x164>)
 8001dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd0:	6153      	str	r3, [r2, #20]
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <MX_GPIO_Init+0x164>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <MX_GPIO_Init+0x164>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4a46      	ldr	r2, [pc, #280]	; (8001efc <MX_GPIO_Init+0x164>)
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	6153      	str	r3, [r2, #20]
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <MX_GPIO_Init+0x164>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <MX_GPIO_Init+0x164>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4a40      	ldr	r2, [pc, #256]	; (8001efc <MX_GPIO_Init+0x164>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e00:	6153      	str	r3, [r2, #20]
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <MX_GPIO_Init+0x164>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001e0e:	2200      	movs	r2, #0
 8001e10:	210f      	movs	r1, #15
 8001e12:	483b      	ldr	r0, [pc, #236]	; (8001f00 <MX_GPIO_Init+0x168>)
 8001e14:	f002 fe56 	bl	8004ac4 <HAL_GPIO_WritePin>
	ON_OFF_LED_Pin | O2_LED_Pin | MIX_LED_Pin | HEAT_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, KEY_EN_Pin | LCD_DC_Pin | LCD_RST_Pin | LCD_CS_Pin,
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f641 0150 	movw	r1, #6224	; 0x1850
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f002 fe4f 	bl	8004ac4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001e26:	2200      	movs	r2, #0
 8001e28:	f241 6116 	movw	r1, #5654	; 0x1616
 8001e2c:	4835      	ldr	r0, [pc, #212]	; (8001f04 <MX_GPIO_Init+0x16c>)
 8001e2e:	f002 fe49 	bl	8004ac4 <HAL_GPIO_WritePin>
			MIX_VALVE_Pin | RX_TX_RS_Pin | MUTE_VALVE_Pin | LCD_BL_Pin
					| HEAT_VALVE_Pin | O2_VALVE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LOCK_SIGNAL_Pin ON_OFF_BUTTON_Pin O2_BUTTON_Pin MIX_BUTTON_Pin */
	GPIO_InitStruct.Pin = LOCK_SIGNAL_Pin | ON_OFF_BUTTON_Pin | O2_BUTTON_Pin
 8001e32:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001e36:	617b      	str	r3, [r7, #20]
			| MIX_BUTTON_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	482e      	ldr	r0, [pc, #184]	; (8001f00 <MX_GPIO_Init+0x168>)
 8001e48:	f002 fcaa 	bl	80047a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MUTE_BUTTON_Pin */
	GPIO_InitStruct.Pin = MUTE_BUTTON_Pin;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MUTE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	482a      	ldr	r0, [pc, #168]	; (8001f08 <MX_GPIO_Init+0x170>)
 8001e60:	f002 fc9e 	bl	80047a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ON_OFF_LED_Pin O2_LED_Pin MIX_LED_Pin HEAT_LED_Pin */
	GPIO_InitStruct.Pin = ON_OFF_LED_Pin | O2_LED_Pin | MIX_LED_Pin
 8001e64:	230f      	movs	r3, #15
 8001e66:	617b      	str	r3, [r7, #20]
			| HEAT_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4821      	ldr	r0, [pc, #132]	; (8001f00 <MX_GPIO_Init+0x168>)
 8001e7c:	f002 fc90 	bl	80047a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY_EN_Pin LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
	GPIO_InitStruct.Pin = KEY_EN_Pin | LCD_DC_Pin | LCD_RST_Pin | LCD_CS_Pin;
 8001e80:	f641 0350 	movw	r3, #6224	; 0x1850
 8001e84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f002 fc80 	bl	80047a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : FAN_BUTTON_Pin HEAT_BUTTON_Pin */
	GPIO_InitStruct.Pin = FAN_BUTTON_Pin | HEAT_BUTTON_Pin;
 8001ea0:	f640 0301 	movw	r3, #2049	; 0x801
 8001ea4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4813      	ldr	r0, [pc, #76]	; (8001f04 <MX_GPIO_Init+0x16c>)
 8001eb6:	f002 fc73 	bl	80047a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MIX_VALVE_Pin RX_TX_RS_Pin MUTE_VALVE_Pin LCD_BL_Pin
	 HEAT_VALVE_Pin O2_VALVE_Pin */
	GPIO_InitStruct.Pin = MIX_VALVE_Pin | RX_TX_RS_Pin | MUTE_VALVE_Pin
 8001eba:	f241 6316 	movw	r3, #5654	; 0x1616
 8001ebe:	617b      	str	r3, [r7, #20]
			| LCD_BL_Pin | HEAT_VALVE_Pin | O2_VALVE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_GPIO_Init+0x16c>)
 8001ed4:	f002 fc64 	bl	80047a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : UP_BUTTON_Pin OK_BUTTON_Pin DOWN_BUTTON_Pin */
	GPIO_InitStruct.Pin = UP_BUTTON_Pin | OK_BUTTON_Pin | DOWN_BUTTON_Pin;
 8001ed8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001edc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f002 fc56 	bl	80047a0 <HAL_GPIO_Init>

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000800 	.word	0x48000800
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48001400 	.word	0x48001400

08001f0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim15.Instance) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d101      	bne.n	8001f24 <HAL_TIM_PeriodElapsedCallback+0x18>
		BUTTON_TimerProcess();
 8001f20:	f008 fb3e 	bl	800a5a0 <BUTTON_TimerProcess>
	}

	if (htim->Instance == htim6.Instance) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d16c      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0xfe>
		adc_co2_sum += co2_adc(ADC1->JDR1, VREF, 1.875) * 100;
 8001f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f38:	eeb7 0a0e 	vmov.f32	s0, #126	; 0x3ff00000  1.875
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f886 	bl	8002050 <co2_adc>
 8001f44:	eef0 7a40 	vmov.f32	s15, s0
 8001f48:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800201c <HAL_TIM_PeriodElapsedCallback+0x110>
 8001f4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
		i2c_o2_sum += i2c_answer[0];
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001f6e:	801a      	strh	r2, [r3, #0]
		i2c_ar_sum += i2c_answer[1];
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001f72:	885a      	ldrh	r2, [r3, #2]
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001f7e:	801a      	strh	r2, [r3, #0]
		if (adc_co2_sum < 0) {
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	d503      	bpl.n	8001f98 <HAL_TIM_PeriodElapsedCallback+0x8c>
			adc_co2_sum = 0;
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
		}

		counter_choice++;
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001fa2:	701a      	strb	r2, [r3, #0]
		porsion_counter++;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001fae:	701a      	strb	r2, [r3, #0]

		if (counter_choice == 10) {
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b0a      	cmp	r3, #10
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0xc6>
			counter_choice = 0;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
			adc_co2_sum = 0;
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
			i2c_o2_sum = 0;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	801a      	strh	r2, [r3, #0]
			i2c_ar_sum = 0;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
		}
		if (mute_counter > 0)
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0xda>
			mute_counter--;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001fe4:	701a      	strb	r2, [r3, #0]

		if (porsion_counter == 40)
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b28      	cmp	r3, #40	; 0x28
 8001fec:	d102      	bne.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0xe8>
			porsion_counter = 0;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
		if (porsion_counter >= 30)
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b1d      	cmp	r3, #29
 8001ffa:	d903      	bls.n	8002004 <HAL_TIM_PeriodElapsedCallback+0xf8>
			porsion = true;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
		else
			porsion = false;

	}
}
 8002002:	e002      	b.n	800200a <HAL_TIM_PeriodElapsedCallback+0xfe>
			porsion = false;
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000540 	.word	0x20000540
 8002018:	2000045c 	.word	0x2000045c
 800201c:	42c80000 	.word	0x42c80000
 8002020:	2000061c 	.word	0x2000061c
 8002024:	20000634 	.word	0x20000634
 8002028:	20000620 	.word	0x20000620
 800202c:	20000622 	.word	0x20000622
 8002030:	20000628 	.word	0x20000628
 8002034:	20000627 	.word	0x20000627
 8002038:	20000626 	.word	0x20000626
 800203c:	20000624 	.word	0x20000624

08002040 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002048:	e7fe      	b.n	8002048 <Error_Handler+0x8>
 800204a:	0000      	movs	r0, r0
 800204c:	0000      	movs	r0, r0
	...

08002050 <co2_adc>:
 *      Author: User
 */

#include <sensors_in.h>

float co2_adc(int a, int vref, float c) {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	ed87 0a01 	vstr	s0, [r7, #4]
	return (((float) a * vref / 4096.) - 0.40) * c;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002076:	ee17 0a90 	vmov	r0, s15
 800207a:	f7fe fa65 	bl	8000548 <__aeabi_f2d>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <co2_adc+0x88>)
 8002084:	f7fe fbe2 	bl	800084c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	a30f      	add	r3, pc, #60	; (adr r3, 80020d0 <co2_adc+0x80>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe f8f7 	bl	8000288 <__aeabi_dsub>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fa50 	bl	8000548 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4620      	mov	r0, r4
 80020ae:	4629      	mov	r1, r5
 80020b0:	f7fe faa2 	bl	80005f8 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fd74 	bl	8000ba8 <__aeabi_d2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	ee07 3a90 	vmov	s15, r3
}
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bdb0      	pop	{r4, r5, r7, pc}
 80020d0:	9999999a 	.word	0x9999999a
 80020d4:	3fd99999 	.word	0x3fd99999
 80020d8:	40b00000 	.word	0x40b00000

080020dc <crc16>:

uint16_t crc16(const unsigned char *buf, unsigned int len) {
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	static const uint16_t table[2] = { 0x0000, 0xA001 };
	uint16_t crc = 0xFFFF;
 80020e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ea:	82fb      	strh	r3, [r7, #22]
	unsigned int i = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
	char bit = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
	unsigned int xor = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < len; i++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e021      	b.n	8002142 <crc16+0x66>
		crc ^= buf[i];
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b29a      	uxth	r2, r3
 8002108:	8afb      	ldrh	r3, [r7, #22]
 800210a:	4053      	eors	r3, r2
 800210c:	82fb      	strh	r3, [r7, #22]

		for (bit = 0; bit < 8; bit++) {
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e010      	b.n	8002136 <crc16+0x5a>
			xor = crc & 0x01;
 8002114:	8afb      	ldrh	r3, [r7, #22]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
			crc >>= 1;
 800211c:	8afb      	ldrh	r3, [r7, #22]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	82fb      	strh	r3, [r7, #22]
			crc ^= table[xor];
 8002122:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <crc16+0x7c>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800212a:	8afb      	ldrh	r3, [r7, #22]
 800212c:	4053      	eors	r3, r2
 800212e:	82fb      	strh	r3, [r7, #22]
		for (bit = 0; bit < 8; bit++) {
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	3301      	adds	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b07      	cmp	r3, #7
 800213a:	d9eb      	bls.n	8002114 <crc16+0x38>
	for (i = 0; i < len; i++) {
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	3301      	adds	r3, #1
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3d9      	bcc.n	80020fe <crc16+0x22>
		}
	}
	return crc;
 800214a:	8afb      	ldrh	r3, [r7, #22]
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	0800f0c4 	.word	0x0800f0c4

0800215c <modbus_get_temp_hum>:

void modbus_get_temp_hum(UART_HandleTypeDef huart2, uint16_t *temp,
		uint16_t *hum) {
 800215c:	b084      	sub	sp, #16
 800215e:	b580      	push	{r7, lr}
 8002160:	b08a      	sub	sp, #40	; 0x28
 8002162:	af00      	add	r7, sp, #0
 8002164:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8002168:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t TxData[16] = { 0x00 };
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
	uint8_t RxData[16] = { 0x00 };
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
	uint16_t crc1;

	TxData[0] = 0x01;
 800218c:	2301      	movs	r3, #1
 800218e:	753b      	strb	r3, [r7, #20]
	TxData[1] = 0x03;
 8002190:	2303      	movs	r3, #3
 8002192:	757b      	strb	r3, [r7, #21]
	TxData[2] = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	75bb      	strb	r3, [r7, #22]
	TxData[3] = 0x00;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
	TxData[4] = 0x00;
 800219c:	2300      	movs	r3, #0
 800219e:	763b      	strb	r3, [r7, #24]
	TxData[5] = 0x02;
 80021a0:	2302      	movs	r3, #2
 80021a2:	767b      	strb	r3, [r7, #25]
	TxData[6] = 0xC4;
 80021a4:	23c4      	movs	r3, #196	; 0xc4
 80021a6:	76bb      	strb	r3, [r7, #26]
	TxData[7] = 0x0B;
 80021a8:	230b      	movs	r3, #11
 80021aa:	76fb      	strb	r3, [r7, #27]

	HAL_GPIO_WritePin(RX_TX_RS_GPIO_Port, RX_TX_RS_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2104      	movs	r1, #4
 80021b0:	4824      	ldr	r0, [pc, #144]	; (8002244 <modbus_get_temp_hum+0xe8>)
 80021b2:	f002 fc87 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, TxData, 16, 25);
 80021b6:	f107 0114 	add.w	r1, r7, #20
 80021ba:	2319      	movs	r3, #25
 80021bc:	2210      	movs	r2, #16
 80021be:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80021c2:	f007 f88b 	bl	80092dc <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RX_TX_RS_GPIO_Port, RX_TX_RS_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2104      	movs	r1, #4
 80021ca:	481e      	ldr	r0, [pc, #120]	; (8002244 <modbus_get_temp_hum+0xe8>)
 80021cc:	f002 fc7a 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_UART_Receive(&huart2, RxData, 16, 25);
 80021d0:	1d39      	adds	r1, r7, #4
 80021d2:	2319      	movs	r3, #25
 80021d4:	2210      	movs	r2, #16
 80021d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80021da:	f007 f909 	bl	80093f0 <HAL_UART_Receive>

	crc1 = crc16(RxData + 1, 7);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	3301      	adds	r3, #1
 80021e2:	2107      	movs	r1, #7
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff79 	bl	80020dc <crc16>
 80021ea:	4603      	mov	r3, r0
 80021ec:	84fb      	strh	r3, [r7, #38]	; 0x26

	if (crc1 % 256 == RxData[8] && crc1 / 256 == RxData[9]) {
 80021ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	7b3b      	ldrb	r3, [r7, #12]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d11c      	bne.n	8002236 <modbus_get_temp_hum+0xda>
 80021fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29a      	uxth	r2, r3
 8002202:	7b7b      	ldrb	r3, [r7, #13]
 8002204:	b29b      	uxth	r3, r3
 8002206:	429a      	cmp	r2, r3
 8002208:	d115      	bne.n	8002236 <modbus_get_temp_hum+0xda>
		*temp = ((RxData[4] << 8) + RxData[5]);
 800220a:	7a3b      	ldrb	r3, [r7, #8]
 800220c:	b29b      	uxth	r3, r3
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	b29a      	uxth	r2, r3
 8002212:	7a7b      	ldrb	r3, [r7, #9]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800221e:	801a      	strh	r2, [r3, #0]
		*hum = ((RxData[6] << 8) + RxData[7]);
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29b      	uxth	r3, r3
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b29a      	uxth	r2, r3
 8002228:	7afb      	ldrb	r3, [r7, #11]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002234:	801a      	strh	r2, [r3, #0]
	}
}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002240:	b004      	add	sp, #16
 8002242:	4770      	bx	lr
 8002244:	48000400 	.word	0x48000400

08002248 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_MspInit+0x44>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_MspInit+0x44>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6193      	str	r3, [r2, #24]
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_MspInit+0x44>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_MspInit+0x44>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_MspInit+0x44>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_MspInit+0x44>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b0:	d13c      	bne.n	800232c <HAL_ADC_MspInit+0x9c>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC12_CLK_ENABLE();
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6153      	str	r3, [r2, #20]
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6153      	str	r3, [r2, #20]
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ec:	6153      	str	r3, [r2, #20]
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_ADC_MspInit+0xa4>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
		/**ADC1 GPIO Configuration
		 PA0     ------> ADC1_IN1
		 PA1     ------> ADC1_IN2
		 PF4     ------> ADC1_IN5
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | HUM_ANALOG_Pin;
 80022fa:	2303      	movs	r3, #3
 80022fc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fe:	2303      	movs	r3, #3
 8002300:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002310:	f002 fa46 	bl	80047a0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = TEMP_ANALOG_Pin;
 8002314:	2310      	movs	r3, #16
 8002316:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002318:	2303      	movs	r3, #3
 800231a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(TEMP_ANALOG_GPIO_Port, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <HAL_ADC_MspInit+0xa8>)
 8002328:	f002 fa3a 	bl	80047a0 <HAL_GPIO_Init>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	48001400 	.word	0x48001400

0800233c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
	if (hi2c->Instance == I2C1) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <HAL_I2C_MspInit+0xd8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d155      	bne.n	800240a <HAL_I2C_MspInit+0xce>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	6153      	str	r3, [r2, #20]
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6153      	str	r3, [r2, #20]
 8002382:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PA15     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = I2C_SCL_INSOFT_Pin;
 800238e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002392:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002394:	2312      	movs	r3, #18
 8002396:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a0:	2304      	movs	r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(I2C_SCL_INSOFT_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ae:	f002 f9f7 	bl	80047a0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = I2C_SDA_INSOFT_Pin;
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b6:	2312      	movs	r3, #18
 80023b8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c2:	2304      	movs	r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(I2C_SDA_INSOFT_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <HAL_I2C_MspInit+0xe0>)
 80023ce:	f002 f9e7 	bl	80047a0 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 80023d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_I2C_MspInit+0xdc>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	201f      	movs	r0, #31
 80023f0:	f002 f91b 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023f4:	201f      	movs	r0, #31
 80023f6:	f002 f934 	bl	8004662 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	2020      	movs	r0, #32
 8002400:	f002 f913 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002404:	2020      	movs	r0, #32
 8002406:	f002 f92c 	bl	8004662 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40005400 	.word	0x40005400
 8002418:	40021000 	.word	0x40021000
 800241c:	48000400 	.word	0x48000400

08002420 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a33      	ldr	r2, [pc, #204]	; (800250c <HAL_SPI_MspInit+0xec>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d131      	bne.n	80024a6 <HAL_SPI_MspInit+0x86>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8002442:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4a32      	ldr	r2, [pc, #200]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 8002448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800244c:	6193      	str	r3, [r2, #24]
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 8002460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002464:	6153      	str	r3, [r2, #20]
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8002472:	23a0      	movs	r3, #160	; 0xa0
 8002474:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002482:	2305      	movs	r3, #5
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002490:	f002 f986 	bl	80047a0 <HAL_GPIO_Init>

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	2023      	movs	r0, #35	; 0x23
 800249a:	f002 f8c6 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800249e:	2023      	movs	r0, #35	; 0x23
 80024a0:	f002 f8df 	bl	8004662 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}

}
 80024a4:	e02d      	b.n	8002502 <HAL_SPI_MspInit+0xe2>
	} else if (hspi->Instance == SPI2) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_SPI_MspInit+0xf4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d128      	bne.n	8002502 <HAL_SPI_MspInit+0xe2>
		__HAL_RCC_SPI2_CLK_ENABLE();
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 80024b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ba:	61d3      	str	r3, [r2, #28]
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 80024ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d2:	6153      	str	r3, [r2, #20]
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_SPI_MspInit+0xf0>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80024e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80024e4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f2:	2305      	movs	r3, #5
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	4619      	mov	r1, r3
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <HAL_SPI_MspInit+0xf8>)
 80024fe:	f002 f94f 	bl	80047a0 <HAL_GPIO_Init>
}
 8002502:	bf00      	nop
 8002504:	3730      	adds	r7, #48	; 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40013000 	.word	0x40013000
 8002510:	40021000 	.word	0x40021000
 8002514:	40003800 	.word	0x40003800
 8002518:	48000400 	.word	0x48000400

0800251c <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim_pwm) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if (htim_pwm->Instance == TIM3) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_TIM_PWM_MspInit+0x68>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d114      	bne.n	8002558 <HAL_TIM_PWM_MspInit+0x3c>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_TIM_PWM_MspInit+0x6c>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_TIM_PWM_MspInit+0x6c>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_TIM_PWM_MspInit+0x6c>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	201d      	movs	r0, #29
 800254c:	f002 f86d 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002550:	201d      	movs	r0, #29
 8002552:	f002 f886 	bl	8004662 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM8_MspInit 1 */

		/* USER CODE END TIM8_MspInit 1 */
	}

}
 8002556:	e010      	b.n	800257a <HAL_TIM_PWM_MspInit+0x5e>
	} else if (htim_pwm->Instance == TIM8) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_TIM_PWM_MspInit+0x70>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10b      	bne.n	800257a <HAL_TIM_PWM_MspInit+0x5e>
		__HAL_RCC_TIM8_CLK_ENABLE();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_TIM_PWM_MspInit+0x6c>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_TIM_PWM_MspInit+0x6c>)
 8002568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256c:	6193      	str	r3, [r2, #24]
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_TIM_PWM_MspInit+0x6c>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40000400 	.word	0x40000400
 8002588:	40021000 	.word	0x40021000
 800258c:	40013400 	.word	0x40013400

08002590 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM6) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <HAL_TIM_Base_MspInit+0xac>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d114      	bne.n	80025cc <HAL_TIM_Base_MspInit+0x3c>
		/* USER CODE BEGIN TIM6_MspInit 0 */

		/* USER CODE END TIM6_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM6_CLK_ENABLE();
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a26      	ldr	r2, [pc, #152]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 80025a8:	f043 0310 	orr.w	r3, r3, #16
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
		/* TIM6 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2036      	movs	r0, #54	; 0x36
 80025c0:	f002 f833 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025c4:	2036      	movs	r0, #54	; 0x36
 80025c6:	f002 f84c 	bl	8004662 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM15_MspInit 1 */

		/* USER CODE END TIM15_MspInit 1 */
	}

}
 80025ca:	e032      	b.n	8002632 <HAL_TIM_Base_MspInit+0xa2>
	} else if (htim_base->Instance == TIM7) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_TIM_Base_MspInit+0xb4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d114      	bne.n	8002600 <HAL_TIM_Base_MspInit+0x70>
		__HAL_RCC_TIM7_CLK_ENABLE();
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	61d3      	str	r3, [r2, #28]
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2037      	movs	r0, #55	; 0x37
 80025f4:	f002 f819 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025f8:	2037      	movs	r0, #55	; 0x37
 80025fa:	f002 f832 	bl	8004662 <HAL_NVIC_EnableIRQ>
}
 80025fe:	e018      	b.n	8002632 <HAL_TIM_Base_MspInit+0xa2>
	} else if (htim_base->Instance == TIM15) {
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_TIM_Base_MspInit+0xb8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d113      	bne.n	8002632 <HAL_TIM_Base_MspInit+0xa2>
		__HAL_RCC_TIM15_CLK_ENABLE();
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6193      	str	r3, [r2, #24]
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_TIM_Base_MspInit+0xb0>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2018      	movs	r0, #24
 8002628:	f001 ffff 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800262c:	2018      	movs	r0, #24
 800262e:	f002 f818 	bl	8004662 <HAL_NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40001000 	.word	0x40001000
 8002640:	40021000 	.word	0x40021000
 8002644:	40001400 	.word	0x40001400
 8002648:	40014000 	.word	0x40014000

0800264c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
	if (htim->Instance == TIM3) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d11c      	bne.n	80026a8 <HAL_TIM_MspPostInit+0x5c>
		/* USER CODE BEGIN TIM3_MspPostInit 0 */

		/* USER CODE END TIM3_MspPostInit 0 */
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6153      	str	r3, [r2, #20]
 800267a:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
		/**TIM3 GPIO Configuration
		 PB5     ------> TIM3_CH2
		 */
		GPIO_InitStruct.Pin = PWM_VENT_Pin;
 8002686:	2320      	movs	r3, #32
 8002688:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002696:	2302      	movs	r3, #2
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(PWM_VENT_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4816      	ldr	r0, [pc, #88]	; (80026fc <HAL_TIM_MspPostInit+0xb0>)
 80026a2:	f002 f87d 	bl	80047a0 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM8_MspPostInit 1 */

		/* USER CODE END TIM8_MspPostInit 1 */
	}

}
 80026a6:	e021      	b.n	80026ec <HAL_TIM_MspPostInit+0xa0>
	} else if (htim->Instance == TIM8) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_TIM_MspPostInit+0xb4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11c      	bne.n	80026ec <HAL_TIM_MspPostInit+0xa0>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026bc:	6153      	str	r3, [r2, #20]
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ce:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80026dc:	230a      	movs	r3, #10
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4619      	mov	r1, r3
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_TIM_MspPostInit+0xb0>)
 80026e8:	f002 f85a 	bl	80047a0 <HAL_GPIO_Init>
}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40021000 	.word	0x40021000
 80026fc:	48000400 	.word	0x48000400
 8002700:	40013400 	.word	0x40013400

08002704 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART2) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_UART_MspInit+0x8c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d130      	bne.n	8002788 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_UART_MspInit+0x90>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_UART_MspInit+0x90>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_UART_MspInit+0x90>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_UART_MspInit+0x90>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_UART_MspInit+0x90>)
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	6153      	str	r3, [r2, #20]
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_UART_MspInit+0x90>)
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002756:	230c      	movs	r3, #12
 8002758:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002766:	2307      	movs	r3, #7
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002774:	f002 f814 	bl	80047a0 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2026      	movs	r0, #38	; 0x26
 800277e:	f001 ff54 	bl	800462a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002782:	2026      	movs	r0, #38	; 0x26
 8002784:	f001 ff6d 	bl	8004662 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40004400 	.word	0x40004400
 8002794:	40021000 	.word	0x40021000

08002798 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800279c:	e7fe      	b.n	800279c <NMI_Handler+0x4>

0800279e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80027a2:	e7fe      	b.n	80027a2 <HardFault_Handler+0x4>

080027a4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80027a8:	e7fe      	b.n	80027a8 <MemManage_Handler+0x4>

080027aa <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80027ae:	e7fe      	b.n	80027ae <BusFault_Handler+0x4>

080027b0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80027b4:	e7fe      	b.n	80027b4 <UsageFault_Handler+0x4>

080027b6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80027e4:	f000 fd56 	bl	8003294 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <TIM1_BRK_TIM15_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM1 break and TIM15 interrupts.
 */
void TIM1_BRK_TIM15_IRQHandler(void) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
	HAL_TIM_IRQHandler(&htim15);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80027f2:	f005 fcbd 	bl	8008170 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000540 	.word	0x20000540

08002800 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <TIM3_IRQHandler+0x10>)
 8002806:	f005 fcb3 	bl	8008170 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000410 	.word	0x20000410

08002814 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
 */
void I2C1_EV_IRQHandler(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <I2C1_EV_IRQHandler+0x10>)
 800281a:	f002 fbe5 	bl	8004fe8 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200002f4 	.word	0x200002f4

08002828 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void) {
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <I2C1_ER_IRQHandler+0x10>)
 800282e:	f002 fbf5 	bl	800501c <HAL_I2C_ER_IRQHandler>
	/* USER CODE BEGIN I2C1_ER_IRQn 1 */

	/* USER CODE END I2C1_ER_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200002f4 	.word	0x200002f4

0800283c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <SPI1_IRQHandler+0x10>)
 8002842:	f005 f95d 	bl	8007b00 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000348 	.word	0x20000348

08002850 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <USART2_IRQHandler+0x10>)
 8002856:	f006 fe81 	bl	800955c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000058c 	.word	0x2000058c

08002864 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <TIM6_DAC_IRQHandler+0x10>)
 800286a:	f005 fc81 	bl	8008170 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000045c 	.word	0x2000045c

08002878 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM7_IRQHandler+0x10>)
 800287e:	f005 fc77 	bl	8008170 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200004a8 	.word	0x200004a8

0800288c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
	return 1;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_kill>:

int _kill(int pid, int sig) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80028a6:	f009 fc3f 	bl	800c128 <__errno>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2216      	movs	r2, #22
 80028ae:	601a      	str	r2, [r3, #0]
	return -1;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_exit>:

void _exit(int status) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ffe7 	bl	800289c <_kill>
	while (1) {
 80028ce:	e7fe      	b.n	80028ce <_exit+0x12>

080028d0 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e00a      	b.n	80028f8 <_read+0x28>
		*ptr++ = __io_getchar();
 80028e2:	f3af 8000 	nop.w
 80028e6:	4601      	mov	r1, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	b2ca      	uxtb	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	dbf0      	blt.n	80028e2 <_read+0x12>
	}

	return len;
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e009      	b.n	8002930 <_write+0x26>
		__io_putchar(*ptr++);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	60ba      	str	r2, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf1      	blt.n	800291c <_write+0x12>
	}
	return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_close>:

int _close(int file) {
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_fstat>:

int _fstat(int file, struct stat *st) {
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296a:	605a      	str	r2, [r3, #4]
	return 0;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_isatty>:

int _isatty(int file) {
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_sbrk+0x64>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <_sbrk+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d207      	bcs.n	80029ec <_sbrk+0x40>
		errno = ENOMEM;
 80029dc:	f009 fba4 	bl	800c128 <__errno>
 80029e0:	4603      	mov	r3, r0
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e009      	b.n	8002a00 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <_sbrk+0x64>)
 80029fc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20008000 	.word	0x20008000
 8002a0c:	00000400 	.word	0x00000400
 8002a10:	2000063c 	.word	0x2000063c
 8002a14:	20000a28 	.word	0x20000a28

08002a18 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <SystemInit+0x20>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <SystemInit+0x20>)
 8002a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <main_page>:

#include <window_drawer.h>
#include "../../Modules/Button/button.h"
#include "../../Modules/LCD/stm32_adafruit_lcd.h"

void main_page() {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 8002a40:	4859      	ldr	r0, [pc, #356]	; (8002ba8 <main_page+0x16c>)
 8002a42:	f008 fe25 	bl	800b690 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(66, 80, (uint8_t*) "O2", LEFT_MODE);
 8002a46:	2303      	movs	r3, #3
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <main_page+0x170>)
 8002a4a:	2150      	movs	r1, #80	; 0x50
 8002a4c:	2042      	movs	r0, #66	; 0x42
 8002a4e:	f008 fe7d 	bl	800b74c <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(220, 80, (uint8_t*) "CO2", LEFT_MODE);
 8002a52:	2303      	movs	r3, #3
 8002a54:	4a56      	ldr	r2, [pc, #344]	; (8002bb0 <main_page+0x174>)
 8002a56:	2150      	movs	r1, #80	; 0x50
 8002a58:	20dc      	movs	r0, #220	; 0xdc
 8002a5a:	f008 fe77 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(360, 80, (uint8_t*) "Ar+Xe", LEFT_MODE);
 8002a5e:	2303      	movs	r3, #3
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <main_page+0x178>)
 8002a62:	2150      	movs	r1, #80	; 0x50
 8002a64:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8002a68:	f008 fe70 	bl	800b74c <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(66, 220, (uint8_t*) "T", LEFT_MODE);
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <main_page+0x17c>)
 8002a70:	21dc      	movs	r1, #220	; 0xdc
 8002a72:	2042      	movs	r0, #66	; 0x42
 8002a74:	f008 fe6a 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(55, 280, (uint8_t*) "`C", LEFT_MODE);
 8002a78:	2303      	movs	r3, #3
 8002a7a:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <main_page+0x180>)
 8002a7c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002a80:	2037      	movs	r0, #55	; 0x37
 8002a82:	f008 fe63 	bl	800b74c <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(210, 220, (uint8_t*) "Vent", LEFT_MODE);
 8002a86:	2303      	movs	r3, #3
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <main_page+0x184>)
 8002a8a:	21dc      	movs	r1, #220	; 0xdc
 8002a8c:	20d2      	movs	r0, #210	; 0xd2
 8002a8e:	f008 fe5d 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(370, 220, (uint8_t*) "Hum.", LEFT_MODE);
 8002a92:	2303      	movs	r3, #3
 8002a94:	4a4b      	ldr	r2, [pc, #300]	; (8002bc4 <main_page+0x188>)
 8002a96:	21dc      	movs	r1, #220	; 0xdc
 8002a98:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8002a9c:	f008 fe56 	bl	800b74c <BSP_LCD_DisplayStringAt>

	// Вентилятор индикатор
	BSP_LCD_DrawRect(200, 280, 15, 30);
 8002aa0:	231e      	movs	r3, #30
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002aa8:	20c8      	movs	r0, #200	; 0xc8
 8002aaa:	f009 f831 	bl	800bb10 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(230, 260, 15, 50);
 8002aae:	2332      	movs	r3, #50	; 0x32
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ab6:	20e6      	movs	r0, #230	; 0xe6
 8002ab8:	f009 f82a 	bl	800bb10 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(260, 240, 15, 70);
 8002abc:	2346      	movs	r3, #70	; 0x46
 8002abe:	220f      	movs	r2, #15
 8002ac0:	21f0      	movs	r1, #240	; 0xf0
 8002ac2:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002ac6:	f009 f823 	bl	800bb10 <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font20_rus);
 8002aca:	483f      	ldr	r0, [pc, #252]	; (8002bc8 <main_page+0x18c>)
 8002acc:	f008 fde0 	bl	800b690 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(25, 10, (uint8_t*) "KGXL-1", LEFT_MODE);
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <main_page+0x190>)
 8002ad4:	210a      	movs	r1, #10
 8002ad6:	2019      	movs	r0, #25
 8002ad8:	f008 fe38 	bl	800b74c <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(380, 280, (uint8_t*) "%", LEFT_MODE);
 8002adc:	2303      	movs	r3, #3
 8002ade:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <main_page+0x194>)
 8002ae0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002ae4:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8002ae8:	f008 fe30 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(50, 140, (uint8_t*) "ob.%", LEFT_MODE);
 8002aec:	2303      	movs	r3, #3
 8002aee:	4a39      	ldr	r2, [pc, #228]	; (8002bd4 <main_page+0x198>)
 8002af0:	218c      	movs	r1, #140	; 0x8c
 8002af2:	2032      	movs	r0, #50	; 0x32
 8002af4:	f008 fe2a 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(220, 140, (uint8_t*) "ob.%", LEFT_MODE);
 8002af8:	2303      	movs	r3, #3
 8002afa:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <main_page+0x198>)
 8002afc:	218c      	movs	r1, #140	; 0x8c
 8002afe:	20dc      	movs	r0, #220	; 0xdc
 8002b00:	f008 fe24 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(370, 140, (uint8_t*) "ob.%", LEFT_MODE);
 8002b04:	2303      	movs	r3, #3
 8002b06:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <main_page+0x198>)
 8002b08:	218c      	movs	r1, #140	; 0x8c
 8002b0a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8002b0e:	f008 fe1d 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(208, 10, (uint8_t*) "Re#im      ", LEFT_MODE);
 8002b12:	2303      	movs	r3, #3
 8002b14:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <main_page+0x19c>)
 8002b16:	210a      	movs	r1, #10
 8002b18:	20d0      	movs	r0, #208	; 0xd0
 8002b1a:	f008 fe17 	bl	800b74c <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b22:	f008 fda5 	bl	800b670 <BSP_LCD_SetTextColor>

	// Вывод сетки на экран
	BSP_LCD_DrawLine(0, 0, 480, 0);
 8002b26:	2300      	movs	r3, #0
 8002b28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f008 ff2c 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(0, 0, 0, 320);
 8002b34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f008 ff25 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(0, 320, 480, 320);
 8002b42:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f008 ff1c 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(480, 0, 480, 320);
 8002b54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002b62:	f008 ff13 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(160, 0, 160, 320);
 8002b66:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b6a:	22a0      	movs	r2, #160	; 0xa0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	20a0      	movs	r0, #160	; 0xa0
 8002b70:	f008 ff0c 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(0, 40, 480, 40);
 8002b74:	2328      	movs	r3, #40	; 0x28
 8002b76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b7a:	2128      	movs	r1, #40	; 0x28
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f008 ff05 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(0, 180, 480, 180);
 8002b82:	23b4      	movs	r3, #180	; 0xb4
 8002b84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b88:	21b4      	movs	r1, #180	; 0xb4
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f008 fefe 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(320, 40, 320, 320);
 8002b90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b98:	2128      	movs	r1, #40	; 0x28
 8002b9a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002b9e:	f008 fef5 	bl	800b98c <BSP_LCD_DrawLine>
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000060 	.word	0x20000060
 8002bac:	0800ef98 	.word	0x0800ef98
 8002bb0:	0800ef9c 	.word	0x0800ef9c
 8002bb4:	0800efa0 	.word	0x0800efa0
 8002bb8:	0800efa8 	.word	0x0800efa8
 8002bbc:	0800efac 	.word	0x0800efac
 8002bc0:	0800efb0 	.word	0x0800efb0
 8002bc4:	0800efb8 	.word	0x0800efb8
 8002bc8:	20000058 	.word	0x20000058
 8002bcc:	0800efc0 	.word	0x0800efc0
 8002bd0:	0800efc8 	.word	0x0800efc8
 8002bd4:	0800efcc 	.word	0x0800efcc
 8002bd8:	0800efd4 	.word	0x0800efd4

08002bdc <sensors_draw>:
	BSP_LCD_FillRect(0, 0, 160, 180);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
}

void sensors_draw(uint16_t o2_value, uint16_t adc_t, uint16_t adc_h,
		uint16_t adc_co, uint16_t ar_value, DUPLO_MODE *cur_mode) {
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	4604      	mov	r4, r0
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80bb      	strh	r3, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	803b      	strh	r3, [r7, #0]
	char string[8];
	// O2
	BSP_LCD_SetFont(&Font20_rus);
 8002bfa:	4876      	ldr	r0, [pc, #472]	; (8002dd4 <sensors_draw+0x1f8>)
 8002bfc:	f008 fd48 	bl	800b690 <BSP_LCD_SetFont>
	if (HAL_GPIO_ReadPin(O2_VALVE_GPIO_Port, O2_VALVE_Pin))
 8002c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c04:	4874      	ldr	r0, [pc, #464]	; (8002dd8 <sensors_draw+0x1fc>)
 8002c06:	f001 ff45 	bl	8004a94 <HAL_GPIO_ReadPin>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <sensors_draw+0x3a>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002c10:	201f      	movs	r0, #31
 8002c12:	f008 fd2d 	bl	800b670 <BSP_LCD_SetTextColor>
	if (o2_value < 190) {
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2bbd      	cmp	r3, #189	; 0xbd
 8002c1a:	d803      	bhi.n	8002c24 <sensors_draw+0x48>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002c1c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002c20:	f008 fd26 	bl	800b670 <BSP_LCD_SetTextColor>
	}
	if (o2_value <= 1000) {
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2a:	d822      	bhi.n	8002c72 <sensors_draw+0x96>
		sprintf(string, "%.1f(%d) ", (float) o2_value / 10,
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c3e:	ee16 0a90 	vmov	r0, s13
 8002c42:	f7fd fc81 	bl	8000548 <__aeabi_f2d>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
				cur_mode->o2_setting / 10);
 8002c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4c:	8889      	ldrh	r1, [r1, #4]
		sprintf(string, "%.1f(%d) ", (float) o2_value / 10,
 8002c4e:	4863      	ldr	r0, [pc, #396]	; (8002ddc <sensors_draw+0x200>)
 8002c50:	fba0 0101 	umull	r0, r1, r0, r1
 8002c54:	08c9      	lsrs	r1, r1, #3
 8002c56:	b289      	uxth	r1, r1
 8002c58:	f107 0008 	add.w	r0, r7, #8
 8002c5c:	9100      	str	r1, [sp, #0]
 8002c5e:	4960      	ldr	r1, [pc, #384]	; (8002de0 <sensors_draw+0x204>)
 8002c60:	f009 ff0c 	bl	800ca7c <siprintf>
		BSP_LCD_DisplayStringAt(30, 120, (uint8_t*) string, LEFT_MODE);
 8002c64:	f107 0208 	add.w	r2, r7, #8
 8002c68:	2303      	movs	r3, #3
 8002c6a:	2178      	movs	r1, #120	; 0x78
 8002c6c:	201e      	movs	r0, #30
 8002c6e:	f008 fd6d 	bl	800b74c <BSP_LCD_DisplayStringAt>
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c76:	f008 fcfb 	bl	800b670 <BSP_LCD_SetTextColor>

	// ar set
	if (HAL_GPIO_ReadPin(MIX_VALVE_GPIO_Port, MIX_VALVE_Pin))
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4856      	ldr	r0, [pc, #344]	; (8002dd8 <sensors_draw+0x1fc>)
 8002c7e:	f001 ff09 	bl	8004a94 <HAL_GPIO_ReadPin>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <sensors_draw+0xb4>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002c88:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002c8c:	f008 fcf0 	bl	800b670 <BSP_LCD_SetTextColor>
	if (ar_value < 100) { //10
 8002c90:	8c3b      	ldrh	r3, [r7, #32]
 8002c92:	2b63      	cmp	r3, #99	; 0x63
 8002c94:	d801      	bhi.n	8002c9a <sensors_draw+0xbe>
		ar_value = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	843b      	strh	r3, [r7, #32]
	}
	if (ar_value <= 1000) {
 8002c9a:	8c3b      	ldrh	r3, [r7, #32]
 8002c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca0:	d823      	bhi.n	8002cea <sensors_draw+0x10e>
		sprintf(string, "%.1f(%d) ", (float) ar_value / 10,
 8002ca2:	8c3b      	ldrh	r3, [r7, #32]
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cb4:	ee16 0a90 	vmov	r0, s13
 8002cb8:	f7fd fc46 	bl	8000548 <__aeabi_f2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
				cur_mode->ar_setting / 10);
 8002cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc2:	8849      	ldrh	r1, [r1, #2]
		sprintf(string, "%.1f(%d) ", (float) ar_value / 10,
 8002cc4:	4845      	ldr	r0, [pc, #276]	; (8002ddc <sensors_draw+0x200>)
 8002cc6:	fba0 0101 	umull	r0, r1, r0, r1
 8002cca:	08c9      	lsrs	r1, r1, #3
 8002ccc:	b289      	uxth	r1, r1
 8002cce:	f107 0008 	add.w	r0, r7, #8
 8002cd2:	9100      	str	r1, [sp, #0]
 8002cd4:	4942      	ldr	r1, [pc, #264]	; (8002de0 <sensors_draw+0x204>)
 8002cd6:	f009 fed1 	bl	800ca7c <siprintf>
		BSP_LCD_DisplayStringAt(350, 120, (uint8_t*) string, LEFT_MODE);
 8002cda:	f107 0208 	add.w	r2, r7, #8
 8002cde:	2303      	movs	r3, #3
 8002ce0:	2178      	movs	r1, #120	; 0x78
 8002ce2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002ce6:	f008 fd31 	bl	800b74c <BSP_LCD_DisplayStringAt>
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cee:	f008 fcbf 	bl	800b670 <BSP_LCD_SetTextColor>

	// CO2
	if (adc_co > 100) { //1
 8002cf2:	883b      	ldrh	r3, [r7, #0]
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d903      	bls.n	8002d00 <sensors_draw+0x124>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002cf8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002cfc:	f008 fcb8 	bl	800b670 <BSP_LCD_SetTextColor>
	}
	sprintf(string, "%.2f ", ((float) adc_co / 100.));
 8002d00:	883b      	ldrh	r3, [r7, #0]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0a:	ee17 0a90 	vmov	r0, s15
 8002d0e:	f7fd fc1b 	bl	8000548 <__aeabi_f2d>
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <sensors_draw+0x208>)
 8002d18:	f7fd fd98 	bl	800084c <__aeabi_ddiv>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	f107 0008 	add.w	r0, r7, #8
 8002d24:	4930      	ldr	r1, [pc, #192]	; (8002de8 <sensors_draw+0x20c>)
 8002d26:	f009 fea9 	bl	800ca7c <siprintf>
	BSP_LCD_DisplayStringAt(220, 120, (uint8_t*) string, LEFT_MODE);
 8002d2a:	f107 0208 	add.w	r2, r7, #8
 8002d2e:	2303      	movs	r3, #3
 8002d30:	2178      	movs	r1, #120	; 0x78
 8002d32:	20dc      	movs	r0, #220	; 0xdc
 8002d34:	f008 fd0a 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d3c:	f008 fc98 	bl	800b670 <BSP_LCD_SetTextColor>

	// Temperature
	if (adc_t > 4000)
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002d46:	d903      	bls.n	8002d50 <sensors_draw+0x174>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002d48:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002d4c:	f008 fc90 	bl	800b670 <BSP_LCD_SetTextColor>
	sprintf(string, "%.1f ", ((float) adc_t / 100.));
 8002d50:	88bb      	ldrh	r3, [r7, #4]
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	ee17 0a90 	vmov	r0, s15
 8002d5e:	f7fd fbf3 	bl	8000548 <__aeabi_f2d>
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <sensors_draw+0x208>)
 8002d68:	f7fd fd70 	bl	800084c <__aeabi_ddiv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	f107 0008 	add.w	r0, r7, #8
 8002d74:	491d      	ldr	r1, [pc, #116]	; (8002dec <sensors_draw+0x210>)
 8002d76:	f009 fe81 	bl	800ca7c <siprintf>
	BSP_LCD_DisplayStringAt(50, 250, (uint8_t*) string, LEFT_MODE);
 8002d7a:	f107 0208 	add.w	r2, r7, #8
 8002d7e:	2303      	movs	r3, #3
 8002d80:	21fa      	movs	r1, #250	; 0xfa
 8002d82:	2032      	movs	r0, #50	; 0x32
 8002d84:	f008 fce2 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d8c:	f008 fc70 	bl	800b670 <BSP_LCD_SetTextColor>

	// Humidity
	sprintf(string, "%.0f ", ((float) adc_h / 100.));
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fbd3 	bl	8000548 <__aeabi_f2d>
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <sensors_draw+0x208>)
 8002da8:	f7fd fd50 	bl	800084c <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	f107 0008 	add.w	r0, r7, #8
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <sensors_draw+0x214>)
 8002db6:	f009 fe61 	bl	800ca7c <siprintf>
	BSP_LCD_DisplayStringAt(370, 250, (uint8_t*) string, LEFT_MODE);
 8002dba:	f107 0208 	add.w	r2, r7, #8
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	21fa      	movs	r1, #250	; 0xfa
 8002dc2:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8002dc6:	f008 fcc1 	bl	800b74c <BSP_LCD_DisplayStringAt>
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000058 	.word	0x20000058
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	cccccccd 	.word	0xcccccccd
 8002de0:	0800eff8 	.word	0x0800eff8
 8002de4:	40590000 	.word	0x40590000
 8002de8:	0800f004 	.word	0x0800f004
 8002dec:	0800f00c 	.word	0x0800f00c
 8002df0:	0800f014 	.word	0x0800f014

08002df4 <work_mode>:

void work_mode(uint8_t mode) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_SetFont(&Font20_rus);
 8002dfe:	4837      	ldr	r0, [pc, #220]	; (8002edc <work_mode+0xe8>)
 8002e00:	f008 fc46 	bl	800b690 <BSP_LCD_SetFont>
	switch (mode) {
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b0b      	cmp	r3, #11
 8002e08:	d85d      	bhi.n	8002ec6 <work_mode+0xd2>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <work_mode+0x1c>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e41 	.word	0x08002e41
 8002e14:	08002e4f 	.word	0x08002e4f
 8002e18:	08002ec7 	.word	0x08002ec7
 8002e1c:	08002ec7 	.word	0x08002ec7
 8002e20:	08002ec7 	.word	0x08002ec7
 8002e24:	08002ec7 	.word	0x08002ec7
 8002e28:	08002ec7 	.word	0x08002ec7
 8002e2c:	08002ec7 	.word	0x08002ec7
 8002e30:	08002ec7 	.word	0x08002ec7
 8002e34:	08002ec7 	.word	0x08002ec7
 8002e38:	08002e77 	.word	0x08002e77
 8002e3c:	08002e9f 	.word	0x08002e9f
	case 0:
		BSP_LCD_DisplayStringAt(208, 10, (uint8_t*) "Re#im      ", LEFT_MODE);
 8002e40:	2303      	movs	r3, #3
 8002e42:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <work_mode+0xec>)
 8002e44:	210a      	movs	r1, #10
 8002e46:	20d0      	movs	r0, #208	; 0xd0
 8002e48:	f008 fc80 	bl	800b74c <BSP_LCD_DisplayStringAt>
		break;
 8002e4c:	e042      	b.n	8002ed4 <work_mode+0xe0>
	case 1:
		BSP_LCD_DisplayStringAt(208, 10, (uint8_t*) "Re#im", LEFT_MODE);
 8002e4e:	2303      	movs	r3, #3
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <work_mode+0xf0>)
 8002e52:	210a      	movs	r1, #10
 8002e54:	20d0      	movs	r0, #208	; 0xd0
 8002e56:	f008 fc79 	bl	800b74c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 8002e5a:	4823      	ldr	r0, [pc, #140]	; (8002ee8 <work_mode+0xf4>)
 8002e5c:	f008 fc18 	bl	800b690 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(292, 10, (uint8_t*) "AR    ", LEFT_MODE);
 8002e60:	2303      	movs	r3, #3
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <work_mode+0xf8>)
 8002e64:	210a      	movs	r1, #10
 8002e66:	f44f 7092 	mov.w	r0, #292	; 0x124
 8002e6a:	f008 fc6f 	bl	800b74c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20_rus);
 8002e6e:	481b      	ldr	r0, [pc, #108]	; (8002edc <work_mode+0xe8>)
 8002e70:	f008 fc0e 	bl	800b690 <BSP_LCD_SetFont>
		break;
 8002e74:	e02e      	b.n	8002ed4 <work_mode+0xe0>
	case 10:
		BSP_LCD_DisplayStringAt(208, 10, (uint8_t*) "Re#im", LEFT_MODE);
 8002e76:	2303      	movs	r3, #3
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <work_mode+0xf0>)
 8002e7a:	210a      	movs	r1, #10
 8002e7c:	20d0      	movs	r0, #208	; 0xd0
 8002e7e:	f008 fc65 	bl	800b74c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 8002e82:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <work_mode+0xf4>)
 8002e84:	f008 fc04 	bl	800b690 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(292, 10, (uint8_t*) "O2    ", LEFT_MODE);
 8002e88:	2303      	movs	r3, #3
 8002e8a:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <work_mode+0xfc>)
 8002e8c:	210a      	movs	r1, #10
 8002e8e:	f44f 7092 	mov.w	r0, #292	; 0x124
 8002e92:	f008 fc5b 	bl	800b74c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20_rus);
 8002e96:	4811      	ldr	r0, [pc, #68]	; (8002edc <work_mode+0xe8>)
 8002e98:	f008 fbfa 	bl	800b690 <BSP_LCD_SetFont>
		break;
 8002e9c:	e01a      	b.n	8002ed4 <work_mode+0xe0>
	case 11:
		BSP_LCD_DisplayStringAt(208, 10, (uint8_t*) "Re#im", LEFT_MODE);
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <work_mode+0xf0>)
 8002ea2:	210a      	movs	r1, #10
 8002ea4:	20d0      	movs	r0, #208	; 0xd0
 8002ea6:	f008 fc51 	bl	800b74c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 8002eaa:	480f      	ldr	r0, [pc, #60]	; (8002ee8 <work_mode+0xf4>)
 8002eac:	f008 fbf0 	bl	800b690 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(292, 10, (uint8_t*) "AR+O2 ", LEFT_MODE);
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <work_mode+0x100>)
 8002eb4:	210a      	movs	r1, #10
 8002eb6:	f44f 7092 	mov.w	r0, #292	; 0x124
 8002eba:	f008 fc47 	bl	800b74c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20_rus);
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <work_mode+0xe8>)
 8002ec0:	f008 fbe6 	bl	800b690 <BSP_LCD_SetFont>
		break;
 8002ec4:	e006      	b.n	8002ed4 <work_mode+0xe0>
	default:
		BSP_LCD_DisplayStringAt(208, 10, (uint8_t*) "Re#im      ", LEFT_MODE);
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <work_mode+0xec>)
 8002eca:	210a      	movs	r1, #10
 8002ecc:	20d0      	movs	r0, #208	; 0xd0
 8002ece:	f008 fc3d 	bl	800b74c <BSP_LCD_DisplayStringAt>
		break;
 8002ed2:	bf00      	nop
	}
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000058 	.word	0x20000058
 8002ee0:	0800efd4 	.word	0x0800efd4
 8002ee4:	0800f01c 	.word	0x0800f01c
 8002ee8:	20000060 	.word	0x20000060
 8002eec:	0800f024 	.word	0x0800f024
 8002ef0:	0800f02c 	.word	0x0800f02c
 8002ef4:	0800f034 	.word	0x0800f034

08002ef8 <change_vent_mode>:

uint8_t change_vent_mode(uint8_t ven_mode) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
	switch (ven_mode) {
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d85d      	bhi.n	8002fc4 <change_vent_mode+0xcc>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <change_vent_mode+0x18>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f3f 	.word	0x08002f3f
 8002f18:	08002f61 	.word	0x08002f61
 8002f1c:	08002f83 	.word	0x08002f83
	case 0:
		BSP_LCD_FillRect(200, 280, 15, 30);
 8002f20:	231e      	movs	r3, #30
 8002f22:	220f      	movs	r2, #15
 8002f24:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002f28:	20c8      	movs	r0, #200	; 0xc8
 8002f2a:	f008 ff39 	bl	800bda0 <BSP_LCD_FillRect>
		TIM3->CCR2 = 75;
 8002f2e:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <change_vent_mode+0xd8>)
 8002f30:	224b      	movs	r2, #75	; 0x4b
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
		return ++ven_mode;
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	3301      	adds	r3, #1
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	e043      	b.n	8002fc6 <change_vent_mode+0xce>
		break;
	case 1:
		BSP_LCD_FillRect(230, 260, 15, 50);
 8002f3e:	2332      	movs	r3, #50	; 0x32
 8002f40:	220f      	movs	r2, #15
 8002f42:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002f46:	20e6      	movs	r0, #230	; 0xe6
 8002f48:	f008 ff2a 	bl	800bda0 <BSP_LCD_FillRect>
		TIM3->CCR2 += 25;
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <change_vent_mode+0xd8>)
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <change_vent_mode+0xd8>)
 8002f52:	3319      	adds	r3, #25
 8002f54:	6393      	str	r3, [r2, #56]	; 0x38
		return ++ven_mode;
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	71fb      	strb	r3, [r7, #7]
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	e032      	b.n	8002fc6 <change_vent_mode+0xce>
		break;
	case 2:
		BSP_LCD_FillRect(260, 240, 15, 70);
 8002f60:	2346      	movs	r3, #70	; 0x46
 8002f62:	220f      	movs	r2, #15
 8002f64:	21f0      	movs	r1, #240	; 0xf0
 8002f66:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002f6a:	f008 ff19 	bl	800bda0 <BSP_LCD_FillRect>
		TIM3->CCR2 += 25;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <change_vent_mode+0xd8>)
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <change_vent_mode+0xd8>)
 8002f74:	3319      	adds	r3, #25
 8002f76:	6393      	str	r3, [r2, #56]	; 0x38
		return ++ven_mode;
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	e021      	b.n	8002fc6 <change_vent_mode+0xce>
		break;
	case 3:
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f008 fb74 	bl	800b670 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(261, 241, 13, 68);
 8002f88:	2344      	movs	r3, #68	; 0x44
 8002f8a:	220d      	movs	r2, #13
 8002f8c:	21f1      	movs	r1, #241	; 0xf1
 8002f8e:	f240 1005 	movw	r0, #261	; 0x105
 8002f92:	f008 ff05 	bl	800bda0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(231, 261, 13, 48);
 8002f96:	2330      	movs	r3, #48	; 0x30
 8002f98:	220d      	movs	r2, #13
 8002f9a:	f240 1105 	movw	r1, #261	; 0x105
 8002f9e:	20e7      	movs	r0, #231	; 0xe7
 8002fa0:	f008 fefe 	bl	800bda0 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(201, 281, 13, 28);
 8002fa4:	231c      	movs	r3, #28
 8002fa6:	220d      	movs	r2, #13
 8002fa8:	f240 1119 	movw	r1, #281	; 0x119
 8002fac:	20c9      	movs	r0, #201	; 0xc9
 8002fae:	f008 fef7 	bl	800bda0 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002fb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fb6:	f008 fb5b 	bl	800b670 <BSP_LCD_SetTextColor>
		TIM3->CCR2 = 0;
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <change_vent_mode+0xd8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
		return 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <change_vent_mode+0xce>
		break;
	}
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <delete_main_frame>:

void delete_main_frame() {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f008 fb69 	bl	800b6b0 <BSP_LCD_Clear>
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <settings_draw>:

void settings_draw(DUPLO_MODE *cur_mode) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	char string[16];
	BSP_LCD_SetFont(&Font24);
 8002fec:	4811      	ldr	r0, [pc, #68]	; (8003034 <settings_draw+0x50>)
 8002fee:	f008 fb4f 	bl	800b690 <BSP_LCD_SetFont>
	sprintf(string, "Ar:%d O2:%d ", cur_mode->ar_setting / 10,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	885b      	ldrh	r3, [r3, #2]
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <settings_draw+0x54>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4619      	mov	r1, r3
			cur_mode->o2_setting / 10);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	889b      	ldrh	r3, [r3, #4]
	sprintf(string, "Ar:%d O2:%d ", cur_mode->ar_setting / 10,
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <settings_draw+0x54>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	b29b      	uxth	r3, r3
 8003010:	f107 0008 	add.w	r0, r7, #8
 8003014:	460a      	mov	r2, r1
 8003016:	4909      	ldr	r1, [pc, #36]	; (800303c <settings_draw+0x58>)
 8003018:	f009 fd30 	bl	800ca7c <siprintf>
	BSP_LCD_DisplayStringAt(190, 15, (uint8_t*) string, LEFT_MODE);
 800301c:	f107 0208 	add.w	r2, r7, #8
 8003020:	2303      	movs	r3, #3
 8003022:	210f      	movs	r1, #15
 8003024:	20be      	movs	r0, #190	; 0xbe
 8003026:	f008 fb91 	bl	800b74c <BSP_LCD_DisplayStringAt>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000060 	.word	0x20000060
 8003038:	cccccccd 	.word	0xcccccccd
 800303c:	0800f03c 	.word	0x0800f03c

08003040 <settings_frame>:

void settings_frame() {
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font20_rus);
 8003046:	4838      	ldr	r0, [pc, #224]	; (8003128 <settings_frame+0xe8>)
 8003048:	f008 fb22 	bl	800b690 <BSP_LCD_SetFont>

	for (int i = 0; i < 320; i += 40) {
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	e00b      	b.n	800306a <settings_frame+0x2a>
		BSP_LCD_DrawLine(0, i, 480, i);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	b299      	uxth	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	b29b      	uxth	r3, r3
 800305a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800305e:	2000      	movs	r0, #0
 8003060:	f008 fc94 	bl	800b98c <BSP_LCD_DrawLine>
	for (int i = 0; i < 320; i += 40) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3328      	adds	r3, #40	; 0x28
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003070:	dbef      	blt.n	8003052 <settings_frame+0x12>
	}
	BSP_LCD_DrawLine(0, 0, 0, 320);
 8003072:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2000      	movs	r0, #0
 800307c:	f008 fc86 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(0, 320, 480, 320);
 8003080:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003088:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800308c:	2000      	movs	r0, #0
 800308e:	f008 fc7d 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(480, 0, 480, 320);
 8003092:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003096:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800309a:	2100      	movs	r1, #0
 800309c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80030a0:	f008 fc74 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(160, 0, 160, 40);
 80030a4:	2328      	movs	r3, #40	; 0x28
 80030a6:	22a0      	movs	r2, #160	; 0xa0
 80030a8:	2100      	movs	r1, #0
 80030aa:	20a0      	movs	r0, #160	; 0xa0
 80030ac:	f008 fc6e 	bl	800b98c <BSP_LCD_DrawLine>
	BSP_LCD_DisplayStringAt(20, 15, (uint8_t*) "Nastro*ka", LEFT_MODE);
 80030b0:	2303      	movs	r3, #3
 80030b2:	4a1e      	ldr	r2, [pc, #120]	; (800312c <settings_frame+0xec>)
 80030b4:	210f      	movs	r1, #15
 80030b6:	2014      	movs	r0, #20
 80030b8:	f008 fb48 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 80030bc:	481c      	ldr	r0, [pc, #112]	; (8003130 <settings_frame+0xf0>)
 80030be:	f008 fae7 	bl	800b690 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(40, 55, (uint8_t*) "Ar 30", LEFT_MODE);
 80030c2:	2303      	movs	r3, #3
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <settings_frame+0xf4>)
 80030c6:	2137      	movs	r1, #55	; 0x37
 80030c8:	2028      	movs	r0, #40	; 0x28
 80030ca:	f008 fb3f 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(40, 95, (uint8_t*) "Ar 35", LEFT_MODE);
 80030ce:	2303      	movs	r3, #3
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <settings_frame+0xf8>)
 80030d2:	215f      	movs	r1, #95	; 0x5f
 80030d4:	2028      	movs	r0, #40	; 0x28
 80030d6:	f008 fb39 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(40, 135, (uint8_t*) "Ar 40", LEFT_MODE);
 80030da:	2303      	movs	r3, #3
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <settings_frame+0xfc>)
 80030de:	2187      	movs	r1, #135	; 0x87
 80030e0:	2028      	movs	r0, #40	; 0x28
 80030e2:	f008 fb33 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(40, 175, (uint8_t*) "O2 30", LEFT_MODE);
 80030e6:	2303      	movs	r3, #3
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <settings_frame+0x100>)
 80030ea:	21af      	movs	r1, #175	; 0xaf
 80030ec:	2028      	movs	r0, #40	; 0x28
 80030ee:	f008 fb2d 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(40, 215, (uint8_t*) "O2 35", LEFT_MODE);
 80030f2:	2303      	movs	r3, #3
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <settings_frame+0x104>)
 80030f6:	21d7      	movs	r1, #215	; 0xd7
 80030f8:	2028      	movs	r0, #40	; 0x28
 80030fa:	f008 fb27 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(40, 255, (uint8_t*) "O2 40", LEFT_MODE);
 80030fe:	2303      	movs	r3, #3
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <settings_frame+0x108>)
 8003102:	21ff      	movs	r1, #255	; 0xff
 8003104:	2028      	movs	r0, #40	; 0x28
 8003106:	f008 fb21 	bl	800b74c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20_rus);
 800310a:	4807      	ldr	r0, [pc, #28]	; (8003128 <settings_frame+0xe8>)
 800310c:	f008 fac0 	bl	800b690 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(40, 295, (uint8_t*) "V$hod", LEFT_MODE);
 8003110:	2303      	movs	r3, #3
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <settings_frame+0x10c>)
 8003114:	f240 1127 	movw	r1, #295	; 0x127
 8003118:	2028      	movs	r0, #40	; 0x28
 800311a:	f008 fb17 	bl	800b74c <BSP_LCD_DisplayStringAt>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000058 	.word	0x20000058
 800312c:	0800f04c 	.word	0x0800f04c
 8003130:	20000060 	.word	0x20000060
 8003134:	0800f058 	.word	0x0800f058
 8003138:	0800f060 	.word	0x0800f060
 800313c:	0800f068 	.word	0x0800f068
 8003140:	0800f070 	.word	0x0800f070
 8003144:	0800f078 	.word	0x0800f078
 8003148:	0800f080 	.word	0x0800f080
 800314c:	0800f088 	.word	0x0800f088

08003150 <circle_draw>:

void circle_draw(uint8_t *cur_mode, uint8_t prev_mode) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
	if (prev_mode != 0) {
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d014      	beq.n	800318c <circle_draw+0x3c>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003162:	2000      	movs	r0, #0
 8003164:	f008 fa84 	bl	800b670 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(20, 25 + 40 * prev_mode, 7);
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	b29b      	uxth	r3, r3
 8003176:	3319      	adds	r3, #25
 8003178:	b29b      	uxth	r3, r3
 800317a:	2207      	movs	r2, #7
 800317c:	4619      	mov	r1, r3
 800317e:	2014      	movs	r0, #20
 8003180:	f008 fe32 	bl	800bde8 <BSP_LCD_FillCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003184:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003188:	f008 fa72 	bl	800b670 <BSP_LCD_SetTextColor>
	}
	BSP_LCD_FillCircle(20, 25 + 40 * *cur_mode, 7);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	b29b      	uxth	r3, r3
 800319c:	3319      	adds	r3, #25
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2207      	movs	r2, #7
 80031a2:	4619      	mov	r1, r3
 80031a4:	2014      	movs	r0, #20
 80031a6:	f008 fe1f 	bl	800bde8 <BSP_LCD_FillCircle>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b8:	f7ff fc2e 	bl	8002a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80031be:	490d      	ldr	r1, [pc, #52]	; (80031f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031c0:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <LoopForever+0xe>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c4:	e002      	b.n	80031cc <LoopCopyDataInit>

080031c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ca:	3304      	adds	r3, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d0:	d3f9      	bcc.n	80031c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d4:	4c0a      	ldr	r4, [pc, #40]	; (8003200 <LoopForever+0x16>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d8:	e001      	b.n	80031de <LoopFillZerobss>

080031da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031dc:	3204      	adds	r2, #4

080031de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e0:	d3fb      	bcc.n	80031da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031e2:	f008 ffa7 	bl	800c134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031e6:	f7fd fff9 	bl	80011dc <main>

080031ea <LoopForever>:

LoopForever:
    b LoopForever
 80031ea:	e7fe      	b.n	80031ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80031f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f4:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 80031f8:	0801216c 	.word	0x0801216c
  ldr r2, =_sbss
 80031fc:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003200:	20000a28 	.word	0x20000a28

08003204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003204:	e7fe      	b.n	8003204 <ADC1_2_IRQHandler>
	...

08003208 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_Init+0x28>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <HAL_Init+0x28>)
 8003212:	f043 0310 	orr.w	r3, r3, #16
 8003216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003218:	2003      	movs	r0, #3
 800321a:	f001 f9fb 	bl	8004614 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321e:	200f      	movs	r0, #15
 8003220:	f000 f808 	bl	8003234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003224:	f7ff f810 	bl	8002248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40022000 	.word	0x40022000

08003234 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_InitTick+0x54>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_InitTick+0x58>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4619      	mov	r1, r3
 8003246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324a:	fbb3 f3f1 	udiv	r3, r3, r1
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	4618      	mov	r0, r3
 8003254:	f001 fa13 	bl	800467e <HAL_SYSTICK_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00e      	b.n	8003280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d80a      	bhi.n	800327e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003268:	2200      	movs	r2, #0
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	f001 f9db 	bl	800462a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003274:	4a06      	ldr	r2, [pc, #24]	; (8003290 <HAL_InitTick+0x5c>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000004 	.word	0x20000004
 800328c:	2000000c 	.word	0x2000000c
 8003290:	20000008 	.word	0x20000008

08003294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x20>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_IncTick+0x24>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_IncTick+0x24>)
 80032a6:	6013      	str	r3, [r2, #0]
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	20000640 	.word	0x20000640

080032bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return uwTick;  
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_GetTick+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000640 	.word	0x20000640

080032d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff ffee 	bl	80032bc <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d005      	beq.n	80032fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_Delay+0x44>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80032fa:	bf00      	nop
 80032fc:	f7ff ffde 	bl	80032bc <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d8f7      	bhi.n	80032fc <HAL_Delay+0x28>
  {
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000000c 	.word	0x2000000c

0800331c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b09a      	sub	sp, #104	; 0x68
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e1c9      	b.n	80036d0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d176      	bne.n	800343c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d152      	bne.n	80033fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fe ff8d 	bl	8002290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d13b      	bne.n	80033fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f001 f80f 	bl	80043a8 <ADC_Disable>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12f      	bne.n	80033fc <HAL_ADC_Init+0xe0>
 800339c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d12b      	bne.n	80033fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033ac:	f023 0302 	bic.w	r3, r3, #2
 80033b0:	f043 0202 	orr.w	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033d8:	4b86      	ldr	r3, [pc, #536]	; (80035f4 <HAL_ADC_Init+0x2d8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a86      	ldr	r2, [pc, #536]	; (80035f8 <HAL_ADC_Init+0x2dc>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9a      	lsrs	r2, r3, #18
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033ee:	e002      	b.n	80033f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f9      	bne.n	80033f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003418:	d110      	bne.n	800343c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f023 0312 	bic.w	r3, r3, #18
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 8136 	bne.w	80036b6 <HAL_ADC_Init+0x39a>
 800344a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8131 	bne.w	80036b6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 8129 	bne.w	80036b6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800346c:	f043 0202 	orr.w	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800347c:	d004      	beq.n	8003488 <HAL_ADC_Init+0x16c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <HAL_ADC_Init+0x2e0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_ADC_Init+0x170>
 8003488:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <HAL_ADC_Init+0x2e4>)
 800348a:	e000      	b.n	800348e <HAL_ADC_Init+0x172>
 800348c:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_ADC_Init+0x2e8>)
 800348e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d102      	bne.n	80034a0 <HAL_ADC_Init+0x184>
 800349a:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_ADC_Init+0x2e0>)
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	e01a      	b.n	80034d6 <HAL_ADC_Init+0x1ba>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a55      	ldr	r2, [pc, #340]	; (80035fc <HAL_ADC_Init+0x2e0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d103      	bne.n	80034b2 <HAL_ADC_Init+0x196>
 80034aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e011      	b.n	80034d6 <HAL_ADC_Init+0x1ba>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a54      	ldr	r2, [pc, #336]	; (8003608 <HAL_ADC_Init+0x2ec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <HAL_ADC_Init+0x1a6>
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_ADC_Init+0x2f0>)
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e009      	b.n	80034d6 <HAL_ADC_Init+0x1ba>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a51      	ldr	r2, [pc, #324]	; (800360c <HAL_ADC_Init+0x2f0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d102      	bne.n	80034d2 <HAL_ADC_Init+0x1b6>
 80034cc:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_ADC_Init+0x2ec>)
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e001      	b.n	80034d6 <HAL_ADC_Init+0x1ba>
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d108      	bne.n	80034f6 <HAL_ADC_Init+0x1da>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_Init+0x1da>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_ADC_Init+0x1dc>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11c      	bne.n	8003536 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d107      	bne.n	800351e <HAL_ADC_Init+0x202>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_ADC_Init+0x202>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_ADC_Init+0x204>
 800351e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003534:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7e5b      	ldrb	r3, [r3, #25]
 800353a:	035b      	lsls	r3, r3, #13
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003540:	2a01      	cmp	r2, #1
 8003542:	d002      	beq.n	800354a <HAL_ADC_Init+0x22e>
 8003544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003548:	e000      	b.n	800354c <HAL_ADC_Init+0x230>
 800354a:	2200      	movs	r2, #0
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800355c:	4313      	orrs	r3, r2
 800355e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d11b      	bne.n	80035a2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7e5b      	ldrb	r3, [r3, #25]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	3b01      	subs	r3, #1
 8003578:	045a      	lsls	r2, r3, #17
 800357a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357c:	4313      	orrs	r3, r2
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	663b      	str	r3, [r7, #96]	; 0x60
 8003584:	e00d      	b.n	80035a2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d03a      	beq.n	8003620 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_ADC_Init+0x2ec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_ADC_Init+0x2a2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_ADC_Init+0x2f0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d128      	bne.n	8003610 <HAL_ADC_Init+0x2f4>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80035c6:	d012      	beq.n	80035ee <HAL_ADC_Init+0x2d2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d0:	d00a      	beq.n	80035e8 <HAL_ADC_Init+0x2cc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80035da:	d002      	beq.n	80035e2 <HAL_ADC_Init+0x2c6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	e018      	b.n	8003614 <HAL_ADC_Init+0x2f8>
 80035e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e6:	e015      	b.n	8003614 <HAL_ADC_Init+0x2f8>
 80035e8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80035ec:	e012      	b.n	8003614 <HAL_ADC_Init+0x2f8>
 80035ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80035f2:	e00f      	b.n	8003614 <HAL_ADC_Init+0x2f8>
 80035f4:	20000004 	.word	0x20000004
 80035f8:	431bde83 	.word	0x431bde83
 80035fc:	50000100 	.word	0x50000100
 8003600:	50000300 	.word	0x50000300
 8003604:	50000700 	.word	0x50000700
 8003608:	50000400 	.word	0x50000400
 800360c:	50000500 	.word	0x50000500
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003618:	4313      	orrs	r3, r2
 800361a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800361c:	4313      	orrs	r3, r2
 800361e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d114      	bne.n	8003658 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363c:	f023 0302 	bic.w	r3, r3, #2
 8003640:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7e1b      	ldrb	r3, [r3, #24]
 8003646:	039a      	lsls	r2, r3, #14
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4313      	orrs	r3, r2
 8003652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003654:	4313      	orrs	r3, r2
 8003656:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <HAL_ADC_Init+0x3bc>)
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003668:	430b      	orrs	r3, r1
 800366a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10c      	bne.n	800368e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f023 010f 	bic.w	r1, r3, #15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	1e5a      	subs	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
 800368c:	e007      	b.n	800369e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 020f 	bic.w	r2, r2, #15
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
 80036b4:	e00a      	b.n	80036cc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f023 0312 	bic.w	r3, r3, #18
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80036cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3768      	adds	r7, #104	; 0x68
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	fff0c007 	.word	0xfff0c007

080036dc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 80f9 	bne.w	80038ea <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_ADC_Start+0x2a>
 8003702:	2302      	movs	r3, #2
 8003704:	e0f4      	b.n	80038f0 <HAL_ADC_Start+0x214>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fde6 	bl	80042e0 <ADC_Enable>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 80e0 	bne.w	80038e0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800373c:	d004      	beq.n	8003748 <HAL_ADC_Start+0x6c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6d      	ldr	r2, [pc, #436]	; (80038f8 <HAL_ADC_Start+0x21c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d106      	bne.n	8003756 <HAL_ADC_Start+0x7a>
 8003748:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_ADC_Start+0x220>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2b00      	cmp	r3, #0
 8003752:	d010      	beq.n	8003776 <HAL_ADC_Start+0x9a>
 8003754:	e005      	b.n	8003762 <HAL_ADC_Start+0x86>
 8003756:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <HAL_ADC_Start+0x224>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_ADC_Start+0x9a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800376a:	d004      	beq.n	8003776 <HAL_ADC_Start+0x9a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a64      	ldr	r2, [pc, #400]	; (8003904 <HAL_ADC_Start+0x228>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d115      	bne.n	80037a2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d036      	beq.n	80037fe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003798:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037a0:	e02d      	b.n	80037fe <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b6:	d004      	beq.n	80037c2 <HAL_ADC_Start+0xe6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4e      	ldr	r2, [pc, #312]	; (80038f8 <HAL_ADC_Start+0x21c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10a      	bne.n	80037d8 <HAL_ADC_Start+0xfc>
 80037c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e008      	b.n	80037ea <HAL_ADC_Start+0x10e>
 80037d8:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_ADC_Start+0x228>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	d106      	bne.n	800381a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f023 0206 	bic.w	r2, r3, #6
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
 8003818:	e002      	b.n	8003820 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	221c      	movs	r2, #28
 800382e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003838:	d004      	beq.n	8003844 <HAL_ADC_Start+0x168>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <HAL_ADC_Start+0x21c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d106      	bne.n	8003852 <HAL_ADC_Start+0x176>
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_ADC_Start+0x220>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2b00      	cmp	r3, #0
 800384e:	d03e      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 8003850:	e005      	b.n	800385e <HAL_ADC_Start+0x182>
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_ADC_Start+0x224>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2b00      	cmp	r3, #0
 800385c:	d037      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003866:	d004      	beq.n	8003872 <HAL_ADC_Start+0x196>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_ADC_Start+0x21c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d106      	bne.n	8003880 <HAL_ADC_Start+0x1a4>
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_ADC_Start+0x220>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2b05      	cmp	r3, #5
 800387c:	d027      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 800387e:	e005      	b.n	800388c <HAL_ADC_Start+0x1b0>
 8003880:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_ADC_Start+0x224>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2b05      	cmp	r3, #5
 800388a:	d020      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_Start+0x1c4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_ADC_Start+0x21c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d106      	bne.n	80038ae <HAL_ADC_Start+0x1d2>
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_ADC_Start+0x220>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2b09      	cmp	r3, #9
 80038aa:	d010      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 80038ac:	e005      	b.n	80038ba <HAL_ADC_Start+0x1de>
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_ADC_Start+0x224>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2b09      	cmp	r3, #9
 80038b8:	d009      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_Start+0x1f2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_ADC_Start+0x228>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10f      	bne.n	80038ee <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0204 	orr.w	r2, r2, #4
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	e006      	b.n	80038ee <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038e8:	e001      	b.n	80038ee <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	50000100 	.word	0x50000100
 80038fc:	50000300 	.word	0x50000300
 8003900:	50000700 	.word	0x50000700
 8003904:	50000400 	.word	0x50000400

08003908 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_ADCEx_Calibration_Start+0x1c>
 8003920:	2302      	movs	r3, #2
 8003922:	e05f      	b.n	80039e4 <HAL_ADCEx_Calibration_Start+0xdc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fd3b 	bl	80043a8 <ADC_Disable>
 8003932:	4603      	mov	r3, r0
 8003934:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d14e      	bne.n	80039da <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003950:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003966:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003976:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003978:	f7ff fca0 	bl	80032bc <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800397e:	e01c      	b.n	80039ba <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003980:	f7ff fc9c 	bl	80032bc <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b0a      	cmp	r3, #10
 800398c:	d915      	bls.n	80039ba <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800399c:	d10d      	bne.n	80039ba <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f023 0312 	bic.w	r3, r3, #18
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e014      	b.n	80039e4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c8:	d0da      	beq.n	8003980 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b09d      	sub	sp, #116	; 0x74
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e364      	b.n	80040dc <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d151      	bne.n	8003ace <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d143      	bne.n	8003aba <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d02b      	beq.n	8003a92 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4984      	ldr	r1, [pc, #528]	; (8003c58 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8003a46:	428b      	cmp	r3, r1
 8003a48:	d004      	beq.n	8003a54 <HAL_ADCEx_InjectedConfigChannel+0x68>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4983      	ldr	r1, [pc, #524]	; (8003c5c <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8003a50:	428b      	cmp	r3, r1
 8003a52:	d114      	bne.n	8003a7e <HAL_ADCEx_InjectedConfigChannel+0x92>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d00e      	beq.n	8003a7a <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	2b14      	cmp	r3, #20
 8003a62:	d008      	beq.n	8003a76 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	2b1c      	cmp	r3, #28
 8003a6a:	d002      	beq.n	8003a72 <HAL_ADCEx_InjectedConfigChannel+0x86>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	e007      	b.n	8003a82 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8003a72:	2310      	movs	r3, #16
 8003a74:	e005      	b.n	8003a82 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8003a76:	231c      	movs	r3, #28
 8003a78:	e003      	b.n	8003a82 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8003a7a:	2334      	movs	r3, #52	; 0x34
 8003a7c:	e001      	b.n	8003a82 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a90:	e005      	b.n	8003a9e <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aa4:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ab6:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003ab8:	e07f      	b.n	8003bba <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003acc:	e075      	b.n	8003bba <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d140      	bne.n	8003b58 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d02d      	beq.n	8003b48 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	1e59      	subs	r1, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4857      	ldr	r0, [pc, #348]	; (8003c58 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8003afc:	4283      	cmp	r3, r0
 8003afe:	d004      	beq.n	8003b0a <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4855      	ldr	r0, [pc, #340]	; (8003c5c <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8003b06:	4283      	cmp	r3, r0
 8003b08:	d114      	bne.n	8003b34 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d00e      	beq.n	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	2b14      	cmp	r3, #20
 8003b18:	d008      	beq.n	8003b2c <HAL_ADCEx_InjectedConfigChannel+0x140>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2b1c      	cmp	r3, #28
 8003b20:	d002      	beq.n	8003b28 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	e007      	b.n	8003b38 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	e005      	b.n	8003b38 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003b2c:	231c      	movs	r3, #28
 8003b2e:	e003      	b.n	8003b38 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003b30:	2334      	movs	r3, #52	; 0x34
 8003b32:	e001      	b.n	8003b38 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4319      	orrs	r1, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	649a      	str	r2, [r3, #72]	; 0x48
 8003b46:	e007      	b.n	8003b58 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4413      	add	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	3302      	adds	r3, #2
 8003b6a:	221f      	movs	r2, #31
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	4019      	ands	r1, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	3302      	adds	r3, #2
 8003b86:	fa00 f303 	lsl.w	r3, r0, r3
 8003b8a:	ea41 0203 	orr.w	r2, r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	1e5a      	subs	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d12d      	bne.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	7f5b      	ldrb	r3, [r3, #29]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d110      	bne.n	8003bf2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	7f9b      	ldrb	r3, [r3, #30]
 8003bde:	055a      	lsls	r2, r3, #21
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	7f1b      	ldrb	r3, [r3, #28]
 8003be4:	051b      	lsls	r3, r3, #20
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	e018      	b.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	7f9b      	ldrb	r3, [r3, #30]
 8003c00:	055a      	lsls	r2, r3, #21
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	7f1b      	ldrb	r3, [r3, #28]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d108      	bne.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 8111 	bne.w	8003e56 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d113      	bne.n	8003c64 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	7f5b      	ldrb	r3, [r3, #29]
 8003c4a:	065a      	lsls	r2, r3, #25
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e01b      	b.n	8003c8e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8003c56:	bf00      	nop
 8003c58:	50000400 	.word	0x50000400
 8003c5c:	50000500 	.word	0x50000500
 8003c60:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c72:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7f5b      	ldrb	r3, [r3, #29]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d108      	bne.n	8003c8e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d91c      	bls.n	8003cd0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6999      	ldr	r1, [r3, #24]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3b1e      	subs	r3, #30
 8003ca8:	2207      	movs	r2, #7
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	4019      	ands	r1, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6898      	ldr	r0, [r3, #8]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3b1e      	subs	r3, #30
 8003cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	619a      	str	r2, [r3, #24]
 8003cce:	e019      	b.n	8003d04 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6959      	ldr	r1, [r3, #20]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	4019      	ands	r1, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6898      	ldr	r0, [r3, #8]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	08db      	lsrs	r3, r3, #3
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d84e      	bhi.n	8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d5f 	.word	0x08003d5f
 8003d34:	08003d81 	.word	0x08003d81
 8003d38:	08003da3 	.word	0x08003da3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d42:	4b9a      	ldr	r3, [pc, #616]	; (8003fac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	0691      	lsls	r1, r2, #26
 8003d4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003d5c:	e07e      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d64:	4b91      	ldr	r3, [pc, #580]	; (8003fac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	0691      	lsls	r1, r2, #26
 8003d6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d70:	430a      	orrs	r2, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003d7e:	e06d      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d86:	4b89      	ldr	r3, [pc, #548]	; (8003fac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	0691      	lsls	r1, r2, #26
 8003d90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d92:	430a      	orrs	r2, r1
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003da0:	e05c      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003da8:	4b80      	ldr	r3, [pc, #512]	; (8003fac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	0691      	lsls	r1, r2, #26
 8003db2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003db4:	430a      	orrs	r2, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dc0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003dc2:	e04b      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	069b      	lsls	r3, r3, #26
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	069b      	lsls	r3, r3, #26
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	069b      	lsls	r3, r3, #26
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10a      	bne.n	8003e5a <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003e54:	e001      	b.n	8003e5a <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8003e5a:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <HAL_ADCEx_InjectedConfigChannel+0x490>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_ADCEx_InjectedConfigChannel+0x490>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x492>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f040 8126 	bne.w	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d00f      	beq.n	8003eac <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003eaa:	e049      	b.n	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b09      	cmp	r3, #9
 8003ecc:	d91c      	bls.n	8003f08 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6999      	ldr	r1, [r3, #24]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	3b1b      	subs	r3, #27
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	4019      	ands	r1, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6898      	ldr	r0, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3b1b      	subs	r3, #27
 8003efa:	fa00 f203 	lsl.w	r2, r0, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	619a      	str	r2, [r3, #24]
 8003f06:	e01b      	b.n	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6959      	ldr	r1, [r3, #20]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	2207      	movs	r2, #7
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	4019      	ands	r1, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6898      	ldr	r0, [r3, #8]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	fa00 f203 	lsl.w	r2, r0, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f48:	d004      	beq.n	8003f54 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8003f54:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 8003f56:	e000      	b.n	8003f5a <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d105      	bne.n	8003f70 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d015      	beq.n	8003f9c <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003f74:	2b11      	cmp	r3, #17
 8003f76:	d105      	bne.n	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00b      	beq.n	8003f9c <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003f88:	2b12      	cmp	r3, #18
 8003f8a:	f040 80a1 	bne.w	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 809a 	bne.w	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa4:	d10a      	bne.n	8003fbc <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 8003fa6:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	e022      	b.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003fac:	83fff000 	.word	0x83fff000
 8003fb0:	50000100 	.word	0x50000100
 8003fb4:	50000300 	.word	0x50000300
 8003fb8:	50000700 	.word	0x50000700
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a49      	ldr	r2, [pc, #292]	; (80040e8 <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d103      	bne.n	8003fce <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8003fc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e011      	b.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a46      	ldr	r2, [pc, #280]	; (80040ec <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d102      	bne.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 8003fd8:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	e009      	b.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a43      	ldr	r2, [pc, #268]	; (80040f0 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d102      	bne.n	8003fee <HAL_ADCEx_InjectedConfigChannel+0x602>
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e001      	b.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d108      	bne.n	8004012 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_ADCEx_InjectedConfigChannel+0x626>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d150      	bne.n	80040ba <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004018:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800401a:	2b00      	cmp	r3, #0
 800401c:	d010      	beq.n	8004040 <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_ADCEx_InjectedConfigChannel+0x650>
 800403a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800403c:	2b00      	cmp	r3, #0
 800403e:	d13c      	bne.n	80040ba <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b10      	cmp	r3, #16
 8004046:	d11d      	bne.n	8004084 <HAL_ADCEx_InjectedConfigChannel+0x698>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004050:	d118      	bne.n	8004084 <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800405a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	0c9a      	lsrs	r2, r3, #18
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8004074:	e002      	b.n	800407c <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b01      	subs	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f9      	bne.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004082:	e024      	b.n	80040ce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b11      	cmp	r3, #17
 800408a:	d10b      	bne.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004094:	d106      	bne.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800409e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a0:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040a2:	e014      	b.n	80040ce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b12      	cmp	r3, #18
 80040aa:	d110      	bne.n	80040ce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80040ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b6:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040b8:	e009      	b.n	80040ce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80040cc:	e000      	b.n	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040ce:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80040d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3774      	adds	r7, #116	; 0x74
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	50000100 	.word	0x50000100
 80040ec:	50000400 	.word	0x50000400
 80040f0:	50000500 	.word	0x50000500
 80040f4:	20000004 	.word	0x20000004
 80040f8:	431bde83 	.word	0x431bde83

080040fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b099      	sub	sp, #100	; 0x64
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004114:	d102      	bne.n	800411c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	e01a      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d103      	bne.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	e011      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e009      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	e001      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b0      	b.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004166:	2302      	movs	r3, #2
 8004168:	e0a9      	b.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 808d 	bne.w	800429c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 8086 	bne.w	800429c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004198:	d004      	beq.n	80041a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4b      	ldr	r2, [pc, #300]	; (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80041a4:	4b4c      	ldr	r3, [pc, #304]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80041a6:	e000      	b.n	80041aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80041a8:	4b4c      	ldr	r3, [pc, #304]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80041aa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d040      	beq.n	8004236 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80041b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041c6:	035b      	lsls	r3, r3, #13
 80041c8:	430b      	orrs	r3, r1
 80041ca:	431a      	orrs	r2, r3
 80041cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d108      	bne.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80041f0:	2300      	movs	r3, #0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d15c      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004212:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004214:	2b00      	cmp	r3, #0
 8004216:	d14b      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004220:	f023 030f 	bic.w	r3, r3, #15
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	6811      	ldr	r1, [r2, #0]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	430a      	orrs	r2, r1
 800422e:	431a      	orrs	r2, r3
 8004230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004232:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004234:	e03c      	b.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004240:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d108      	bne.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d123      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004284:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004286:	2b00      	cmp	r3, #0
 8004288:	d112      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800428a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004292:	f023 030f 	bic.w	r3, r3, #15
 8004296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004298:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800429a:	e009      	b.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80042ae:	e000      	b.n	80042b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80042be:	4618      	mov	r0, r3
 80042c0:	3764      	adds	r7, #100	; 0x64
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	50000100 	.word	0x50000100
 80042d0:	50000400 	.word	0x50000400
 80042d4:	50000500 	.word	0x50000500
 80042d8:	50000300 	.word	0x50000300
 80042dc:	50000700 	.word	0x50000700

080042e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <ADC_Enable+0x2c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <ADC_Enable+0x2c>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <ADC_Enable+0x2e>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d143      	bne.n	800439a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <ADC_Enable+0xc4>)
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0210 	orr.w	r2, r3, #16
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e02f      	b.n	800439c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800434c:	f7fe ffb6 	bl	80032bc <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004352:	e01b      	b.n	800438c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004354:	f7fe ffb2 	bl	80032bc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d914      	bls.n	800438c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d00d      	beq.n	800438c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0210 	orr.w	r2, r3, #16
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d1dc      	bne.n	8004354 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	8000003f 	.word	0x8000003f

080043a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d108      	bne.n	80043d4 <ADC_Disable+0x2c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <ADC_Disable+0x2c>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <ADC_Disable+0x2e>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d047      	beq.n	800446a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030d 	and.w	r3, r3, #13
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10f      	bne.n	8004408 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0202 	orr.w	r2, r2, #2
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2203      	movs	r2, #3
 80043fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004400:	f7fe ff5c 	bl	80032bc <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004406:	e029      	b.n	800445c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0210 	orr.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e023      	b.n	800446c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004424:	f7fe ff4a 	bl	80032bc <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d914      	bls.n	800445c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10d      	bne.n	800445c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e007      	b.n	800446c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d0dc      	beq.n	8004424 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800449c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	60d3      	str	r3, [r2, #12]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__NVIC_GetPriorityGrouping+0x18>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	f003 0307 	and.w	r3, r3, #7
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	db0b      	blt.n	8004502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4907      	ldr	r1, [pc, #28]	; (8004510 <__NVIC_EnableIRQ+0x38>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2001      	movs	r0, #1
 80044fa:	fa00 f202 	lsl.w	r2, r0, r2
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000e100 	.word	0xe000e100

08004514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db0a      	blt.n	800453e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	490c      	ldr	r1, [pc, #48]	; (8004560 <__NVIC_SetPriority+0x4c>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	440b      	add	r3, r1
 8004538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800453c:	e00a      	b.n	8004554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	4908      	ldr	r1, [pc, #32]	; (8004564 <__NVIC_SetPriority+0x50>)
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	3b04      	subs	r3, #4
 800454c:	0112      	lsls	r2, r2, #4
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	440b      	add	r3, r1
 8004552:	761a      	strb	r2, [r3, #24]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000e100 	.word	0xe000e100
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f1c3 0307 	rsb	r3, r3, #7
 8004582:	2b04      	cmp	r3, #4
 8004584:	bf28      	it	cs
 8004586:	2304      	movcs	r3, #4
 8004588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3304      	adds	r3, #4
 800458e:	2b06      	cmp	r3, #6
 8004590:	d902      	bls.n	8004598 <NVIC_EncodePriority+0x30>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3b03      	subs	r3, #3
 8004596:	e000      	b.n	800459a <NVIC_EncodePriority+0x32>
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	f04f 32ff 	mov.w	r2, #4294967295
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	401a      	ands	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b0:	f04f 31ff 	mov.w	r1, #4294967295
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	43d9      	mvns	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	4313      	orrs	r3, r2
         );
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3724      	adds	r7, #36	; 0x24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3b01      	subs	r3, #1
 80045dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e0:	d301      	bcc.n	80045e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00f      	b.n	8004606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e6:	4a0a      	ldr	r2, [pc, #40]	; (8004610 <SysTick_Config+0x40>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ee:	210f      	movs	r1, #15
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	f7ff ff8e 	bl	8004514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <SysTick_Config+0x40>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <SysTick_Config+0x40>)
 8004600:	2207      	movs	r2, #7
 8004602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	e000e010 	.word	0xe000e010

08004614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff29 	bl	8004474 <__NVIC_SetPriorityGrouping>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	4603      	mov	r3, r0
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800463c:	f7ff ff3e 	bl	80044bc <__NVIC_GetPriorityGrouping>
 8004640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f7ff ff8e 	bl	8004568 <NVIC_EncodePriority>
 800464c:	4602      	mov	r2, r0
 800464e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff5d 	bl	8004514 <__NVIC_SetPriority>
}
 800465a:	bf00      	nop
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff31 	bl	80044d8 <__NVIC_EnableIRQ>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffa2 	bl	80045d0 <SysTick_Config>
 800468c:	4603      	mov	r3, r0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d008      	beq.n	80046ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2204      	movs	r2, #4
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e020      	b.n	80046fc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 020e 	bic.w	r2, r2, #14
 80046c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f202 	lsl.w	r2, r1, r2
 80046e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800471a:	2b02      	cmp	r3, #2
 800471c:	d005      	beq.n	800472a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e027      	b.n	800477a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 020e 	bic.w	r2, r2, #14
 8004738:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f202 	lsl.w	r2, r1, r2
 8004758:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
    } 
  }
  return status;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ae:	e154      	b.n	8004a5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	2101      	movs	r1, #1
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8146 	beq.w	8004a54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d005      	beq.n	80047e0 <HAL_GPIO_Init+0x40>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d130      	bne.n	8004842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	2203      	movs	r2, #3
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004816:	2201      	movs	r2, #1
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0201 	and.w	r2, r3, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b03      	cmp	r3, #3
 800484c:	d017      	beq.n	800487e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d123      	bne.n	80048d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	08da      	lsrs	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3208      	adds	r2, #8
 8004892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	220f      	movs	r2, #15
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	08da      	lsrs	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3208      	adds	r2, #8
 80048cc:	6939      	ldr	r1, [r7, #16]
 80048ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2203      	movs	r2, #3
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a0 	beq.w	8004a54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004914:	4b58      	ldr	r3, [pc, #352]	; (8004a78 <HAL_GPIO_Init+0x2d8>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	4a57      	ldr	r2, [pc, #348]	; (8004a78 <HAL_GPIO_Init+0x2d8>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6193      	str	r3, [r2, #24]
 8004920:	4b55      	ldr	r3, [pc, #340]	; (8004a78 <HAL_GPIO_Init+0x2d8>)
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800492c:	4a53      	ldr	r2, [pc, #332]	; (8004a7c <HAL_GPIO_Init+0x2dc>)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3302      	adds	r3, #2
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	220f      	movs	r2, #15
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004956:	d019      	beq.n	800498c <HAL_GPIO_Init+0x1ec>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a49      	ldr	r2, [pc, #292]	; (8004a80 <HAL_GPIO_Init+0x2e0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_GPIO_Init+0x1e8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a48      	ldr	r2, [pc, #288]	; (8004a84 <HAL_GPIO_Init+0x2e4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00d      	beq.n	8004984 <HAL_GPIO_Init+0x1e4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a47      	ldr	r2, [pc, #284]	; (8004a88 <HAL_GPIO_Init+0x2e8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <HAL_GPIO_Init+0x1e0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a46      	ldr	r2, [pc, #280]	; (8004a8c <HAL_GPIO_Init+0x2ec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_GPIO_Init+0x1dc>
 8004978:	2304      	movs	r3, #4
 800497a:	e008      	b.n	800498e <HAL_GPIO_Init+0x1ee>
 800497c:	2305      	movs	r3, #5
 800497e:	e006      	b.n	800498e <HAL_GPIO_Init+0x1ee>
 8004980:	2303      	movs	r3, #3
 8004982:	e004      	b.n	800498e <HAL_GPIO_Init+0x1ee>
 8004984:	2302      	movs	r3, #2
 8004986:	e002      	b.n	800498e <HAL_GPIO_Init+0x1ee>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_GPIO_Init+0x1ee>
 800498c:	2300      	movs	r3, #0
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	f002 0203 	and.w	r2, r2, #3
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	4093      	lsls	r3, r2
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800499e:	4937      	ldr	r1, [pc, #220]	; (8004a7c <HAL_GPIO_Init+0x2dc>)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ac:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80049d0:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049d6:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43db      	mvns	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80049fa:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a00:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a24:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a2a:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a4e:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <HAL_GPIO_Init+0x2f0>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f aea3 	bne.w	80047b0 <HAL_GPIO_Init+0x10>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	48000400 	.word	0x48000400
 8004a84:	48000800 	.word	0x48000800
 8004a88:	48000c00 	.word	0x48000c00
 8004a8c:	48001000 	.word	0x48001000
 8004a90:	40010400 	.word	0x40010400

08004a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e001      	b.n	8004ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ad4:	787b      	ldrb	r3, [r7, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ae0:	e002      	b.n	8004ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e081      	b.n	8004c0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fc0e 	bl	800233c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	e006      	b.n	8004b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d104      	bne.n	8004b8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	460b      	mov	r3, r1
 8004c22:	817b      	strh	r3, [r7, #10]
 8004c24:	4613      	mov	r3, r2
 8004c26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	f040 80da 	bne.w	8004dea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_I2C_Master_Transmit+0x30>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0d3      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1d8>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fe fb36 	bl	80032bc <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2319      	movs	r3, #25
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 ff1b 	bl	8005a9a <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0be      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2221      	movs	r2, #33	; 0x21
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	893a      	ldrh	r2, [r7, #8]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2bff      	cmp	r3, #255	; 0xff
 8004c9e:	d90e      	bls.n	8004cbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	22ff      	movs	r2, #255	; 0xff
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	8979      	ldrh	r1, [r7, #10]
 8004cae:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f001 f92a 	bl	8005f10 <I2C_TransferConfig>
 8004cbc:	e06c      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	8979      	ldrh	r1, [r7, #10]
 8004cd0:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f001 f919 	bl	8005f10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004cde:	e05b      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6a39      	ldr	r1, [r7, #32]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 ff27 	bl	8005b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e07b      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d034      	beq.n	8004d98 <HAL_I2C_Master_Transmit+0x184>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d130      	bne.n	8004d98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 feaa 	bl	8005a9a <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04d      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2bff      	cmp	r3, #255	; 0xff
 8004d58:	d90e      	bls.n	8004d78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	22ff      	movs	r2, #255	; 0xff
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f001 f8cd 	bl	8005f10 <I2C_TransferConfig>
 8004d76:	e00f      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	8979      	ldrh	r1, [r7, #10]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f001 f8bc 	bl	8005f10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d19e      	bne.n	8004ce0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	6a39      	ldr	r1, [r7, #32]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 ff0d 	bl	8005bc6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e01a      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004dca:	400b      	ands	r3, r1
 8004dcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	80002000 	.word	0x80002000
 8004df8:	fe00e800 	.word	0xfe00e800

08004dfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	461a      	mov	r2, r3
 8004e08:	460b      	mov	r3, r1
 8004e0a:	817b      	strh	r3, [r7, #10]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	f040 80db 	bne.w	8004fd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_I2C_Master_Receive+0x30>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e0d4      	b.n	8004fd6 <HAL_I2C_Master_Receive+0x1da>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e34:	f7fe fa42 	bl	80032bc <HAL_GetTick>
 8004e38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2319      	movs	r3, #25
 8004e40:	2201      	movs	r2, #1
 8004e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fe27 	bl	8005a9a <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0bf      	b.n	8004fd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2222      	movs	r2, #34	; 0x22
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	893a      	ldrh	r2, [r7, #8]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2bff      	cmp	r3, #255	; 0xff
 8004e86:	d90e      	bls.n	8004ea6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	22ff      	movs	r2, #255	; 0xff
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	8979      	ldrh	r1, [r7, #10]
 8004e96:	4b52      	ldr	r3, [pc, #328]	; (8004fe0 <HAL_I2C_Master_Receive+0x1e4>)
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f001 f836 	bl	8005f10 <I2C_TransferConfig>
 8004ea4:	e06d      	b.n	8004f82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	8979      	ldrh	r1, [r7, #10]
 8004eb8:	4b49      	ldr	r3, [pc, #292]	; (8004fe0 <HAL_I2C_Master_Receive+0x1e4>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f001 f825 	bl	8005f10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ec6:	e05c      	b.n	8004f82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	6a39      	ldr	r1, [r7, #32]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 febd 	bl	8005c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e07c      	b.n	8004fd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d034      	beq.n	8004f82 <HAL_I2C_Master_Receive+0x186>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d130      	bne.n	8004f82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	2200      	movs	r2, #0
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fdb5 	bl	8005a9a <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e04d      	b.n	8004fd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2bff      	cmp	r3, #255	; 0xff
 8004f42:	d90e      	bls.n	8004f62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	8979      	ldrh	r1, [r7, #10]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 ffd8 	bl	8005f10 <I2C_TransferConfig>
 8004f60:	e00f      	b.n	8004f82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 ffc7 	bl	8005f10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d19d      	bne.n	8004ec8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	6a39      	ldr	r1, [r7, #32]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fe18 	bl	8005bc6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01a      	b.n	8004fd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <HAL_I2C_Master_Receive+0x1e8>)
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	80002400 	.word	0x80002400
 8004fe4:	fe00e800 	.word	0xfe00e800

08004fe8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
  }
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	09db      	lsrs	r3, r3, #7
 8005044:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005060:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	0a9b      	lsrs	r3, r3, #10
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	09db      	lsrs	r3, r3, #7
 8005072:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f043 0208 	orr.w	r2, r3, #8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800508e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0a5b      	lsrs	r3, r3, #9
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	f043 0202 	orr.w	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 030b 	and.w	r3, r3, #11
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fb89 	bl	80057e8 <I2C_ITError>
  }
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
 8005112:	4613      	mov	r3, r2
 8005114:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <I2C_Slave_ISR_IT+0x24>
 800517e:	2302      	movs	r3, #2
 8005180:	e0ec      	b.n	800535c <I2C_Slave_ISR_IT+0x1fe>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80051a2:	6939      	ldr	r1, [r7, #16]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f9bf 	bl	8005528 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d04d      	beq.n	8005252 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d047      	beq.n	8005252 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d128      	bne.n	800521e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b28      	cmp	r3, #40	; 0x28
 80051d6:	d108      	bne.n	80051ea <I2C_Slave_ISR_IT+0x8c>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051de:	d104      	bne.n	80051ea <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051e0:	6939      	ldr	r1, [r7, #16]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 faaa 	bl	800573c <I2C_ITListenCplt>
 80051e8:	e032      	b.n	8005250 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b29      	cmp	r3, #41	; 0x29
 80051f4:	d10e      	bne.n	8005214 <I2C_Slave_ISR_IT+0xb6>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051fc:	d00a      	beq.n	8005214 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2210      	movs	r2, #16
 8005204:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fc05 	bl	8005a16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f92d 	bl	800546c <I2C_ITSlaveSeqCplt>
 8005212:	e01d      	b.n	8005250 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2210      	movs	r2, #16
 800521a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800521c:	e096      	b.n	800534c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2210      	movs	r2, #16
 8005224:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <I2C_Slave_ISR_IT+0xe4>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800523e:	f040 8085 	bne.w	800534c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	4619      	mov	r1, r3
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 facd 	bl	80057e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800524e:	e07d      	b.n	800534c <I2C_Slave_ISR_IT+0x1ee>
 8005250:	e07c      	b.n	800534c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d030      	beq.n	80052c0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02a      	beq.n	80052c0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d018      	beq.n	80052a6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d14f      	bne.n	8005350 <I2C_Slave_ISR_IT+0x1f2>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052b6:	d04b      	beq.n	8005350 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f8d7 	bl	800546c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80052be:	e047      	b.n	8005350 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80052d8:	6939      	ldr	r1, [r7, #16]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f842 	bl	8005364 <I2C_ITAddrCplt>
 80052e0:	e037      	b.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d031      	beq.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02b      	beq.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d018      	beq.n	8005336 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
 8005334:	e00d      	b.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800533c:	d002      	beq.n	8005344 <I2C_Slave_ISR_IT+0x1e6>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f891 	bl	800546c <I2C_ITSlaveSeqCplt>
 800534a:	e002      	b.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005350:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800537a:	2b28      	cmp	r3, #40	; 0x28
 800537c:	d16a      	bne.n	8005454 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	b29b      	uxth	r3, r3
 8005398:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800539c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053aa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80053b8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d138      	bne.n	8005434 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	09db      	lsrs	r3, r3, #7
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	89bb      	ldrh	r3, [r7, #12]
 80053ca:	4053      	eors	r3, r2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f003 0306 	and.w	r3, r3, #6
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11c      	bne.n	8005410 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80053d6:	897b      	ldrh	r3, [r7, #10]
 80053d8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d13b      	bne.n	8005464 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2208      	movs	r2, #8
 80053f8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005402:	89ba      	ldrh	r2, [r7, #12]
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fe7c 	bl	8005106 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800540e:	e029      	b.n	8005464 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005410:	893b      	ldrh	r3, [r7, #8]
 8005412:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fdab 	bl	8005f74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005426:	89ba      	ldrh	r2, [r7, #12]
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fe6a 	bl	8005106 <HAL_I2C_AddrCallback>
}
 8005432:	e017      	b.n	8005464 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fd9b 	bl	8005f74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005446:	89ba      	ldrh	r2, [r7, #12]
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fe5a 	bl	8005106 <HAL_I2C_AddrCallback>
}
 8005452:	e007      	b.n	8005464 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2208      	movs	r2, #8
 800545a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0b9b      	lsrs	r3, r3, #14
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e00d      	b.n	80054be <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0bdb      	lsrs	r3, r3, #15
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054bc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b29      	cmp	r3, #41	; 0x29
 80054c8:	d112      	bne.n	80054f0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2228      	movs	r2, #40	; 0x28
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2221      	movs	r2, #33	; 0x21
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054d8:	2101      	movs	r1, #1
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fd4a 	bl	8005f74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff fdf8 	bl	80050de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80054ee:	e017      	b.n	8005520 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b2a      	cmp	r3, #42	; 0x2a
 80054fa:	d111      	bne.n	8005520 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2228      	movs	r2, #40	; 0x28
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2222      	movs	r2, #34	; 0x22
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800550a:	2102      	movs	r1, #2
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fd31 	bl	8005f74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff fde9 	bl	80050f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2220      	movs	r2, #32
 800554c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b21      	cmp	r3, #33	; 0x21
 8005552:	d002      	beq.n	800555a <I2C_ITSlaveCplt+0x32>
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b29      	cmp	r3, #41	; 0x29
 8005558:	d108      	bne.n	800556c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800555a:	f248 0101 	movw	r1, #32769	; 0x8001
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fd08 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2221      	movs	r2, #33	; 0x21
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
 800556a:	e00d      	b.n	8005588 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b22      	cmp	r3, #34	; 0x22
 8005570:	d002      	beq.n	8005578 <I2C_ITSlaveCplt+0x50>
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b2a      	cmp	r3, #42	; 0x2a
 8005576:	d107      	bne.n	8005588 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005578:	f248 0102 	movw	r1, #32770	; 0x8002
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fcf9 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2222      	movs	r2, #34	; 0x22
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005596:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b64      	ldr	r3, [pc, #400]	; (8005734 <I2C_ITSlaveCplt+0x20c>)
 80055a4:	400b      	ands	r3, r1
 80055a6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa34 	bl	8005a16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	0b9b      	lsrs	r3, r3, #14
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d013      	beq.n	80055e2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e0:	e018      	b.n	8005614 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	0bdb      	lsrs	r3, r3, #15
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d012      	beq.n	8005614 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0304 	bic.w	r3, r3, #4
 8005626:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f043 0204 	orr.w	r2, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f8a7 	bl	80057e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b28      	cmp	r3, #40	; 0x28
 80056a4:	d141      	bne.n	800572a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f847 	bl	800573c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056ae:	e03c      	b.n	800572a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b8:	d014      	beq.n	80056e4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fed6 	bl	800546c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <I2C_ITSlaveCplt+0x210>)
 80056c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fd20 	bl	8005122 <HAL_I2C_ListenCpltCallback>
}
 80056e2:	e022      	b.n	800572a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b22      	cmp	r3, #34	; 0x22
 80056ee:	d10e      	bne.n	800570e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fcf3 	bl	80050f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800570c:	e00d      	b.n	800572a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fcda 	bl	80050de <HAL_I2C_SlaveTxCpltCallback>
}
 800572a:	bf00      	nop
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	fe00e800 	.word	0xfe00e800
 8005738:	ffff0000 	.word	0xffff0000

0800573c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <I2C_ITListenCplt+0xa8>)
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d022      	beq.n	80057ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d012      	beq.n	80057ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057ba:	f248 0103 	movw	r1, #32771	; 0x8003
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fbd8 	bl	8005f74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2210      	movs	r2, #16
 80057ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fca4 	bl	8005122 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	ffff0000 	.word	0xffff0000

080057e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a6d      	ldr	r2, [pc, #436]	; (80059bc <I2C_ITError+0x1d4>)
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b28      	cmp	r3, #40	; 0x28
 800581e:	d005      	beq.n	800582c <I2C_ITError+0x44>
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b29      	cmp	r3, #41	; 0x29
 8005824:	d002      	beq.n	800582c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b2a      	cmp	r3, #42	; 0x2a
 800582a:	d10b      	bne.n	8005844 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800582c:	2103      	movs	r1, #3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fba0 	bl	8005f74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2228      	movs	r2, #40	; 0x28
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a60      	ldr	r2, [pc, #384]	; (80059c0 <I2C_ITError+0x1d8>)
 8005840:	635a      	str	r2, [r3, #52]	; 0x34
 8005842:	e030      	b.n	80058a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005844:	f248 0103 	movw	r1, #32771	; 0x8003
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb93 	bl	8005f74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8e1 	bl	8005a16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d01f      	beq.n	80058a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b20      	cmp	r3, #32
 8005874:	d114      	bne.n	80058a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d109      	bne.n	8005898 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2210      	movs	r2, #16
 800588a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005890:	f043 0204 	orr.w	r2, r3, #4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2220      	movs	r2, #32
 800589e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d039      	beq.n	8005928 <I2C_ITError+0x140>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b11      	cmp	r3, #17
 80058b8:	d002      	beq.n	80058c0 <I2C_ITError+0xd8>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b21      	cmp	r3, #33	; 0x21
 80058be:	d133      	bne.n	8005928 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ce:	d107      	bne.n	80058e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe ff4d 	bl	8004784 <HAL_DMA_GetState>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d017      	beq.n	8005920 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	4a33      	ldr	r2, [pc, #204]	; (80059c4 <I2C_ITError+0x1dc>)
 80058f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe feff 	bl	8004708 <HAL_DMA_Abort_IT>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d04d      	beq.n	80059ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800591a:	4610      	mov	r0, r2
 800591c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800591e:	e045      	b.n	80059ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f851 	bl	80059c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005926:	e041      	b.n	80059ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d039      	beq.n	80059a4 <I2C_ITError+0x1bc>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b12      	cmp	r3, #18
 8005934:	d002      	beq.n	800593c <I2C_ITError+0x154>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b22      	cmp	r3, #34	; 0x22
 800593a:	d133      	bne.n	80059a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594a:	d107      	bne.n	800595c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800595a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe ff0f 	bl	8004784 <HAL_DMA_GetState>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d017      	beq.n	800599c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	4a14      	ldr	r2, [pc, #80]	; (80059c4 <I2C_ITError+0x1dc>)
 8005972:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fec1 	bl	8004708 <HAL_DMA_Abort_IT>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005996:	4610      	mov	r0, r2
 8005998:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800599a:	e009      	b.n	80059b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f813 	bl	80059c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059a2:	e005      	b.n	80059b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f80f 	bl	80059c8 <I2C_TreatErrorCallback>
  }
}
 80059aa:	e002      	b.n	80059b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059b0:	bf00      	nop
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	ffff0000 	.word	0xffff0000
 80059c0:	0800515f 	.word	0x0800515f
 80059c4:	08005a5f 	.word	0x08005a5f

080059c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b60      	cmp	r3, #96	; 0x60
 80059da:	d10e      	bne.n	80059fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fba9 	bl	800514a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059f8:	e009      	b.n	8005a0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fb94 	bl	8005136 <HAL_I2C_ErrorCallback>
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d103      	bne.n	8005a34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2200      	movs	r2, #0
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d007      	beq.n	8005a52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0201 	orr.w	r2, r2, #1
 8005a50:	619a      	str	r2, [r3, #24]
  }
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	2200      	movs	r2, #0
 8005a7a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	2200      	movs	r2, #0
 8005a8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff ff9b 	bl	80059c8 <I2C_TreatErrorCallback>
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	603b      	str	r3, [r7, #0]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aaa:	e031      	b.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d02d      	beq.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab4:	f7fd fc02 	bl	80032bc <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d302      	bcc.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d122      	bne.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699a      	ldr	r2, [r3, #24]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	79fb      	ldrb	r3, [r7, #7]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d113      	bne.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e00f      	b.n	8005b30 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d0be      	beq.n	8005aac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b44:	e033      	b.n	8005bae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f900 	bl	8005d50 <I2C_IsErrorOccurred>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e031      	b.n	8005bbe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d025      	beq.n	8005bae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fd fbab 	bl	80032bc <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11a      	bne.n	8005bae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d013      	beq.n	8005bae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e007      	b.n	8005bbe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d1c4      	bne.n	8005b46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd2:	e02f      	b.n	8005c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f8b9 	bl	8005d50 <I2C_IsErrorOccurred>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e02d      	b.n	8005c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be8:	f7fd fb68 	bl	80032bc <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d302      	bcc.n	8005bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d11a      	bne.n	8005c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d013      	beq.n	8005c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e007      	b.n	8005c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d1c8      	bne.n	8005bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c58:	e06b      	b.n	8005d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f876 	bl	8005d50 <I2C_IsErrorOccurred>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e069      	b.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d138      	bne.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d105      	bne.n	8005c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e055      	b.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d107      	bne.n	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8005cb2:	e002      	b.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6859      	ldr	r1, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005cce:	400b      	ands	r3, r1
 8005cd0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e029      	b.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fd fae5 	bl	80032bc <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d116      	bne.n	8005d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d00f      	beq.n	8005d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	f043 0220 	orr.w	r2, r3, #32
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e007      	b.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d18c      	bne.n	8005c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	fe00e800 	.word	0xfe00e800

08005d50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d068      	beq.n	8005e4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2210      	movs	r2, #16
 8005d82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d84:	e049      	b.n	8005e1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d045      	beq.n	8005e1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7fd fa95 	bl	80032bc <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <I2C_IsErrorOccurred+0x54>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d13a      	bne.n	8005e1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005db6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc6:	d121      	bne.n	8005e0c <I2C_IsErrorOccurred+0xbc>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dce:	d01d      	beq.n	8005e0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d01a      	beq.n	8005e0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005de4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005de6:	f7fd fa69 	bl	80032bc <HAL_GetTick>
 8005dea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dec:	e00e      	b.n	8005e0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005dee:	f7fd fa65 	bl	80032bc <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b19      	cmp	r3, #25
 8005dfa:	d907      	bls.n	8005e0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f043 0320 	orr.w	r3, r3, #32
 8005e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005e0a:	e006      	b.n	8005e1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d1e9      	bne.n	8005dee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d003      	beq.n	8005e30 <I2C_IsErrorOccurred+0xe0>
 8005e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0aa      	beq.n	8005d86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	f043 0308 	orr.w	r3, r3, #8
 8005e88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	f043 0302 	orr.w	r3, r3, #2
 8005eaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01c      	beq.n	8005efe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fda6 	bl	8005a16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6859      	ldr	r1, [r3, #4]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <I2C_IsErrorOccurred+0x1bc>)
 8005ed6:	400b      	ands	r3, r1
 8005ed8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	; 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	fe00e800 	.word	0xfe00e800

08005f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	817b      	strh	r3, [r7, #10]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f22:	897b      	ldrh	r3, [r7, #10]
 8005f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f28:	7a7b      	ldrb	r3, [r7, #9]
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	0d5b      	lsrs	r3, r3, #21
 8005f4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <I2C_TransferConfig+0x60>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	43db      	mvns	r3, r3
 8005f54:	ea02 0103 	and.w	r1, r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	03ff63ff 	.word	0x03ff63ff

08005f74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f84:	887b      	ldrh	r3, [r7, #2]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00f      	beq.n	8005fae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005f94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fa2:	2b28      	cmp	r3, #40	; 0x28
 8005fa4:	d003      	beq.n	8005fae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005fac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fae:	887b      	ldrh	r3, [r7, #2]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005fbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fcc:	2b28      	cmp	r3, #40	; 0x28
 8005fce:	d003      	beq.n	8005fd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da03      	bge.n	8005fe8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005fe6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fe8:	887b      	ldrh	r3, [r7, #2]
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d103      	bne.n	8005ff6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d103      	bne.n	8006004 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d103      	bne.n	8006012 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006010:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6819      	ldr	r1, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43da      	mvns	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	400a      	ands	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b20      	cmp	r3, #32
 8006044:	d138      	bne.n	80060b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006050:	2302      	movs	r3, #2
 8006052:	e032      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	; 0x24
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d139      	bne.n	8006150 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e033      	b.n	8006152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2224      	movs	r2, #36	; 0x24
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006118:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006166:	af00      	add	r7, sp, #0
 8006168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800616c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006170:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f001 b823 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 817d 	beq.w	8006496 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800619c:	4bbc      	ldr	r3, [pc, #752]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d00c      	beq.n	80061c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061a8:	4bb9      	ldr	r3, [pc, #740]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d15c      	bne.n	800626e <HAL_RCC_OscConfig+0x10e>
 80061b4:	4bb6      	ldr	r3, [pc, #728]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d155      	bne.n	800626e <HAL_RCC_OscConfig+0x10e>
 80061c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80061ce:	fa93 f3a3 	rbit	r3, r3
 80061d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061da:	fab3 f383 	clz	r3, r3
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <HAL_RCC_OscConfig+0x94>
 80061ee:	4ba8      	ldr	r3, [pc, #672]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	e015      	b.n	8006220 <HAL_RCC_OscConfig+0xc0>
 80061f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006200:	fa93 f3a3 	rbit	r3, r3
 8006204:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800620c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006210:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006214:	fa93 f3a3 	rbit	r3, r3
 8006218:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800621c:	4b9c      	ldr	r3, [pc, #624]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006224:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006228:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800622c:	fa92 f2a2 	rbit	r2, r2
 8006230:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006234:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006238:	fab2 f282 	clz	r2, r2
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	f042 0220 	orr.w	r2, r2, #32
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	f002 021f 	and.w	r2, r2, #31
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f202 	lsl.w	r2, r1, r2
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 811f 	beq.w	8006494 <HAL_RCC_OscConfig+0x334>
 8006256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800625a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 8116 	bne.w	8006494 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f000 bfaf 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800626e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627e:	d106      	bne.n	800628e <HAL_RCC_OscConfig+0x12e>
 8006280:	4b83      	ldr	r3, [pc, #524]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a82      	ldr	r2, [pc, #520]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 8006286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e036      	b.n	80062fc <HAL_RCC_OscConfig+0x19c>
 800628e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10c      	bne.n	80062b8 <HAL_RCC_OscConfig+0x158>
 800629e:	4b7c      	ldr	r3, [pc, #496]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a7b      	ldr	r2, [pc, #492]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	4b79      	ldr	r3, [pc, #484]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a78      	ldr	r2, [pc, #480]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e021      	b.n	80062fc <HAL_RCC_OscConfig+0x19c>
 80062b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c8:	d10c      	bne.n	80062e4 <HAL_RCC_OscConfig+0x184>
 80062ca:	4b71      	ldr	r3, [pc, #452]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a70      	ldr	r2, [pc, #448]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b6e      	ldr	r3, [pc, #440]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a6d      	ldr	r2, [pc, #436]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e00b      	b.n	80062fc <HAL_RCC_OscConfig+0x19c>
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a69      	ldr	r2, [pc, #420]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4b67      	ldr	r3, [pc, #412]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a66      	ldr	r2, [pc, #408]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062fc:	4b64      	ldr	r3, [pc, #400]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f023 020f 	bic.w	r2, r3, #15
 8006304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	495f      	ldr	r1, [pc, #380]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 8006312:	4313      	orrs	r3, r2
 8006314:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800631a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d059      	beq.n	80063da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006326:	f7fc ffc9 	bl	80032bc <HAL_GetTick>
 800632a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632e:	e00a      	b.n	8006346 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006330:	f7fc ffc4 	bl	80032bc <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b64      	cmp	r3, #100	; 0x64
 800633e:	d902      	bls.n	8006346 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	f000 bf43 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
 8006346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800634a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006352:	fa93 f3a3 	rbit	r3, r3
 8006356:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800635a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	fab3 f383 	clz	r3, r3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	d102      	bne.n	8006378 <HAL_RCC_OscConfig+0x218>
 8006372:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	e015      	b.n	80063a4 <HAL_RCC_OscConfig+0x244>
 8006378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800637c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006380:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006384:	fa93 f3a3 	rbit	r3, r3
 8006388:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800638c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006390:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006394:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80063a0:	4b3b      	ldr	r3, [pc, #236]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80063ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80063b0:	fa92 f2a2 	rbit	r2, r2
 80063b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80063b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80063bc:	fab2 f282 	clz	r2, r2
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	f042 0220 	orr.w	r2, r2, #32
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	f002 021f 	and.w	r2, r2, #31
 80063cc:	2101      	movs	r1, #1
 80063ce:	fa01 f202 	lsl.w	r2, r1, r2
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0ab      	beq.n	8006330 <HAL_RCC_OscConfig+0x1d0>
 80063d8:	e05d      	b.n	8006496 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7fc ff6f 	bl	80032bc <HAL_GetTick>
 80063de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063e4:	f7fc ff6a 	bl	80032bc <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b64      	cmp	r3, #100	; 0x64
 80063f2:	d902      	bls.n	80063fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	f000 bee9 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
 80063fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006402:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800640e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006412:	fab3 f383 	clz	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d102      	bne.n	800642c <HAL_RCC_OscConfig+0x2cc>
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	e015      	b.n	8006458 <HAL_RCC_OscConfig+0x2f8>
 800642c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006430:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006434:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006444:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006448:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800644c:	fa93 f3a3 	rbit	r3, r3
 8006450:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <HAL_RCC_OscConfig+0x330>)
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800645c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006460:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006464:	fa92 f2a2 	rbit	r2, r2
 8006468:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800646c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006470:	fab2 f282 	clz	r2, r2
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	f042 0220 	orr.w	r2, r2, #32
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	f002 021f 	and.w	r2, r2, #31
 8006480:	2101      	movs	r1, #1
 8006482:	fa01 f202 	lsl.w	r2, r1, r2
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ab      	bne.n	80063e4 <HAL_RCC_OscConfig+0x284>
 800648c:	e003      	b.n	8006496 <HAL_RCC_OscConfig+0x336>
 800648e:	bf00      	nop
 8006490:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800649a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 817d 	beq.w	80067a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80064ac:	4ba6      	ldr	r3, [pc, #664]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80064b8:	4ba3      	ldr	r3, [pc, #652]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d172      	bne.n	80065aa <HAL_RCC_OscConfig+0x44a>
 80064c4:	4ba0      	ldr	r3, [pc, #640]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d16c      	bne.n	80065aa <HAL_RCC_OscConfig+0x44a>
 80064d0:	2302      	movs	r3, #2
 80064d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80064da:	fa93 f3a3 	rbit	r3, r3
 80064de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80064e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064e6:	fab3 f383 	clz	r3, r3
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d102      	bne.n	8006500 <HAL_RCC_OscConfig+0x3a0>
 80064fa:	4b93      	ldr	r3, [pc, #588]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	e013      	b.n	8006528 <HAL_RCC_OscConfig+0x3c8>
 8006500:	2302      	movs	r3, #2
 8006502:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006506:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800650a:	fa93 f3a3 	rbit	r3, r3
 800650e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006512:	2302      	movs	r3, #2
 8006514:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006518:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800651c:	fa93 f3a3 	rbit	r3, r3
 8006520:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006524:	4b88      	ldr	r3, [pc, #544]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	2202      	movs	r2, #2
 800652a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800652e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006532:	fa92 f2a2 	rbit	r2, r2
 8006536:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800653a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800653e:	fab2 f282 	clz	r2, r2
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	f042 0220 	orr.w	r2, r2, #32
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	f002 021f 	and.w	r2, r2, #31
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f202 	lsl.w	r2, r1, r2
 8006554:	4013      	ands	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCC_OscConfig+0x410>
 800655a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d002      	beq.n	8006570 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f000 be2e 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	4b75      	ldr	r3, [pc, #468]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800657c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	21f8      	movs	r1, #248	; 0xf8
 8006586:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800658e:	fa91 f1a1 	rbit	r1, r1
 8006592:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006596:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800659a:	fab1 f181 	clz	r1, r1
 800659e:	b2c9      	uxtb	r1, r1
 80065a0:	408b      	lsls	r3, r1
 80065a2:	4969      	ldr	r1, [pc, #420]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a8:	e0fd      	b.n	80067a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8088 	beq.w	80066cc <HAL_RCC_OscConfig+0x56c>
 80065bc:	2301      	movs	r3, #1
 80065be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80065c6:	fa93 f3a3 	rbit	r3, r3
 80065ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80065ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d2:	fab3 f383 	clz	r3, r3
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	461a      	mov	r2, r3
 80065e4:	2301      	movs	r3, #1
 80065e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e8:	f7fc fe68 	bl	80032bc <HAL_GetTick>
 80065ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f2:	f7fc fe63 	bl	80032bc <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d902      	bls.n	8006608 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	f000 bde2 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
 8006608:	2302      	movs	r3, #2
 800660a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006612:	fa93 f3a3 	rbit	r3, r3
 8006616:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800661a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661e:	fab3 f383 	clz	r3, r3
 8006622:	b2db      	uxtb	r3, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d102      	bne.n	8006638 <HAL_RCC_OscConfig+0x4d8>
 8006632:	4b45      	ldr	r3, [pc, #276]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	e013      	b.n	8006660 <HAL_RCC_OscConfig+0x500>
 8006638:	2302      	movs	r3, #2
 800663a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006642:	fa93 f3a3 	rbit	r3, r3
 8006646:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800664a:	2302      	movs	r3, #2
 800664c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006650:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006654:	fa93 f3a3 	rbit	r3, r3
 8006658:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800665c:	4b3a      	ldr	r3, [pc, #232]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2202      	movs	r2, #2
 8006662:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006666:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800666a:	fa92 f2a2 	rbit	r2, r2
 800666e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006672:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006676:	fab2 f282 	clz	r2, r2
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	f042 0220 	orr.w	r2, r2, #32
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	f002 021f 	and.w	r2, r2, #31
 8006686:	2101      	movs	r1, #1
 8006688:	fa01 f202 	lsl.w	r2, r1, r2
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0af      	beq.n	80065f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006692:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800669a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800669e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	21f8      	movs	r1, #248	; 0xf8
 80066a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80066b0:	fa91 f1a1 	rbit	r1, r1
 80066b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80066b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80066bc:	fab1 f181 	clz	r1, r1
 80066c0:	b2c9      	uxtb	r1, r1
 80066c2:	408b      	lsls	r3, r1
 80066c4:	4920      	ldr	r1, [pc, #128]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]
 80066ca:	e06c      	b.n	80067a6 <HAL_RCC_OscConfig+0x646>
 80066cc:	2301      	movs	r3, #1
 80066ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066d6:	fa93 f3a3 	rbit	r3, r3
 80066da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80066de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80066ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fc fde0 	bl	80032bc <HAL_GetTick>
 80066fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006700:	e00a      	b.n	8006718 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006702:	f7fc fddb 	bl	80032bc <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d902      	bls.n	8006718 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	f000 bd5a 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
 8006718:	2302      	movs	r3, #2
 800671a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006722:	fa93 f3a3 	rbit	r3, r3
 8006726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800672a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800672e:	fab3 f383 	clz	r3, r3
 8006732:	b2db      	uxtb	r3, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d104      	bne.n	800674c <HAL_RCC_OscConfig+0x5ec>
 8006742:	4b01      	ldr	r3, [pc, #4]	; (8006748 <HAL_RCC_OscConfig+0x5e8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	e015      	b.n	8006774 <HAL_RCC_OscConfig+0x614>
 8006748:	40021000 	.word	0x40021000
 800674c:	2302      	movs	r3, #2
 800674e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800675e:	2302      	movs	r3, #2
 8006760:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006764:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006768:	fa93 f3a3 	rbit	r3, r3
 800676c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006770:	4bc8      	ldr	r3, [pc, #800]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	2202      	movs	r2, #2
 8006776:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800677a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800677e:	fa92 f2a2 	rbit	r2, r2
 8006782:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006786:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800678a:	fab2 f282 	clz	r2, r2
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	f042 0220 	orr.w	r2, r2, #32
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	f002 021f 	and.w	r2, r2, #31
 800679a:	2101      	movs	r1, #1
 800679c:	fa01 f202 	lsl.w	r2, r1, r2
 80067a0:	4013      	ands	r3, r2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1ad      	bne.n	8006702 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8110 	beq.w	80069dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d079      	beq.n	80068c0 <HAL_RCC_OscConfig+0x760>
 80067cc:	2301      	movs	r3, #1
 80067ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067d6:	fa93 f3a3 	rbit	r3, r3
 80067da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80067de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e2:	fab3 f383 	clz	r3, r3
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	4bab      	ldr	r3, [pc, #684]	; (8006a98 <HAL_RCC_OscConfig+0x938>)
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	461a      	mov	r2, r3
 80067f2:	2301      	movs	r3, #1
 80067f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f6:	f7fc fd61 	bl	80032bc <HAL_GetTick>
 80067fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fe:	e00a      	b.n	8006816 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006800:	f7fc fd5c 	bl	80032bc <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d902      	bls.n	8006816 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	f000 bcdb 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
 8006816:	2302      	movs	r3, #2
 8006818:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800681c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006820:	fa93 f3a3 	rbit	r3, r3
 8006824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800682c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006830:	2202      	movs	r2, #2
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006838:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	fa93 f2a3 	rbit	r2, r3
 8006842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	2202      	movs	r2, #2
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	fa93 f2a3 	rbit	r2, r3
 8006866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800686a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800686e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006870:	4b88      	ldr	r3, [pc, #544]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006878:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800687c:	2102      	movs	r1, #2
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006884:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	fa93 f1a3 	rbit	r1, r3
 800688e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006892:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006896:	6019      	str	r1, [r3, #0]
  return result;
 8006898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800689c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	fab3 f383 	clz	r3, r3
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 031f 	and.w	r3, r3, #31
 80068b2:	2101      	movs	r1, #1
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0a0      	beq.n	8006800 <HAL_RCC_OscConfig+0x6a0>
 80068be:	e08d      	b.n	80069dc <HAL_RCC_OscConfig+0x87c>
 80068c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	fa93 f2a3 	rbit	r2, r3
 80068da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068e2:	601a      	str	r2, [r3, #0]
  return result;
 80068e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ee:	fab3 f383 	clz	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <HAL_RCC_OscConfig+0x938>)
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	461a      	mov	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006902:	f7fc fcdb 	bl	80032bc <HAL_GetTick>
 8006906:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800690a:	e00a      	b.n	8006922 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690c:	f7fc fcd6 	bl	80032bc <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d902      	bls.n	8006922 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	f000 bc55 	b.w	80071cc <HAL_RCC_OscConfig+0x106c>
 8006922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006926:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800692a:	2202      	movs	r2, #2
 800692c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006932:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	fa93 f2a3 	rbit	r2, r3
 800693c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006940:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800694a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800694e:	2202      	movs	r2, #2
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006956:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	fa93 f2a3 	rbit	r2, r3
 8006960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800696e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006972:	2202      	movs	r2, #2
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800697a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	fa93 f2a3 	rbit	r2, r3
 8006984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006988:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800698c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800698e:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006996:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800699a:	2102      	movs	r1, #2
 800699c:	6019      	str	r1, [r3, #0]
 800699e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	fa93 f1a3 	rbit	r1, r3
 80069ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80069b4:	6019      	str	r1, [r3, #0]
  return result;
 80069b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fab3 f383 	clz	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 031f 	and.w	r3, r3, #31
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f303 	lsl.w	r3, r1, r3
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d197      	bne.n	800690c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 81a1 	beq.w	8006d34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f8:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d116      	bne.n	8006a32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a04:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	61d3      	str	r3, [r2, #28]
 8006a10:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006a2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_RCC_OscConfig+0x93c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11a      	bne.n	8006a74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a3e:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <HAL_RCC_OscConfig+0x93c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <HAL_RCC_OscConfig+0x93c>)
 8006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4a:	f7fc fc37 	bl	80032bc <HAL_GetTick>
 8006a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a52:	e009      	b.n	8006a68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a54:	f7fc fc32 	bl	80032bc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b64      	cmp	r3, #100	; 0x64
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e3b1      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <HAL_RCC_OscConfig+0x93c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0ef      	beq.n	8006a54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d10d      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x940>
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	4a02      	ldr	r2, [pc, #8]	; (8006a94 <HAL_RCC_OscConfig+0x934>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6213      	str	r3, [r2, #32]
 8006a90:	e03c      	b.n	8006b0c <HAL_RCC_OscConfig+0x9ac>
 8006a92:	bf00      	nop
 8006a94:	40021000 	.word	0x40021000
 8006a98:	10908120 	.word	0x10908120
 8006a9c:	40007000 	.word	0x40007000
 8006aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10c      	bne.n	8006aca <HAL_RCC_OscConfig+0x96a>
 8006ab0:	4bc1      	ldr	r3, [pc, #772]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	4ac0      	ldr	r2, [pc, #768]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	6213      	str	r3, [r2, #32]
 8006abc:	4bbe      	ldr	r3, [pc, #760]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	4abd      	ldr	r2, [pc, #756]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006ac2:	f023 0304 	bic.w	r3, r3, #4
 8006ac6:	6213      	str	r3, [r2, #32]
 8006ac8:	e020      	b.n	8006b0c <HAL_RCC_OscConfig+0x9ac>
 8006aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCC_OscConfig+0x994>
 8006ada:	4bb7      	ldr	r3, [pc, #732]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	4ab6      	ldr	r2, [pc, #728]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006ae0:	f043 0304 	orr.w	r3, r3, #4
 8006ae4:	6213      	str	r3, [r2, #32]
 8006ae6:	4bb4      	ldr	r3, [pc, #720]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	4ab3      	ldr	r2, [pc, #716]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6213      	str	r3, [r2, #32]
 8006af2:	e00b      	b.n	8006b0c <HAL_RCC_OscConfig+0x9ac>
 8006af4:	4bb0      	ldr	r3, [pc, #704]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	4aaf      	ldr	r2, [pc, #700]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	6213      	str	r3, [r2, #32]
 8006b00:	4bad      	ldr	r3, [pc, #692]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	4aac      	ldr	r2, [pc, #688]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006b06:	f023 0304 	bic.w	r3, r3, #4
 8006b0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8081 	beq.w	8006c20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1e:	f7fc fbcd 	bl	80032bc <HAL_GetTick>
 8006b22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b26:	e00b      	b.n	8006b40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b28:	f7fc fbc8 	bl	80032bc <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e345      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
 8006b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006b48:	2202      	movs	r2, #2
 8006b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	fa93 f2a3 	rbit	r2, r3
 8006b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	fa93 f2a3 	rbit	r2, r3
 8006b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006b86:	601a      	str	r2, [r3, #0]
  return result;
 8006b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006b90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b92:	fab3 f383 	clz	r3, r3
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d102      	bne.n	8006bac <HAL_RCC_OscConfig+0xa4c>
 8006ba6:	4b84      	ldr	r3, [pc, #528]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	e013      	b.n	8006bd4 <HAL_RCC_OscConfig+0xa74>
 8006bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	fa93 f2a3 	rbit	r2, r3
 8006bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	4b79      	ldr	r3, [pc, #484]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006bdc:	2102      	movs	r1, #2
 8006bde:	6011      	str	r1, [r2, #0]
 8006be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006be4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	fa92 f1a2 	rbit	r1, r2
 8006bee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bf2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006bf6:	6011      	str	r1, [r2, #0]
  return result;
 8006bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bfc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	fab2 f282 	clz	r2, r2
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	f002 021f 	and.w	r2, r2, #31
 8006c12:	2101      	movs	r1, #1
 8006c14:	fa01 f202 	lsl.w	r2, r1, r2
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d084      	beq.n	8006b28 <HAL_RCC_OscConfig+0x9c8>
 8006c1e:	e07f      	b.n	8006d20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c20:	f7fc fb4c 	bl	80032bc <HAL_GetTick>
 8006c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c28:	e00b      	b.n	8006c42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2a:	f7fc fb47 	bl	80032bc <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e2c4      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
 8006c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	fa93 f2a3 	rbit	r2, r3
 8006c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006c6e:	2202      	movs	r2, #2
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	fa93 f2a3 	rbit	r2, r3
 8006c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006c88:	601a      	str	r2, [r3, #0]
  return result;
 8006c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c8e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006c92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c94:	fab3 f383 	clz	r3, r3
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d102      	bne.n	8006cae <HAL_RCC_OscConfig+0xb4e>
 8006ca8:	4b43      	ldr	r3, [pc, #268]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	e013      	b.n	8006cd6 <HAL_RCC_OscConfig+0xb76>
 8006cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	fa93 f2a3 	rbit	r2, r3
 8006cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ccc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006cde:	2102      	movs	r1, #2
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ce6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	fa92 f1a2 	rbit	r1, r2
 8006cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cf4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006cf8:	6011      	str	r1, [r2, #0]
  return result;
 8006cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cfe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	fab2 f282 	clz	r2, r2
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	f002 021f 	and.w	r2, r2, #31
 8006d14:	2101      	movs	r1, #1
 8006d16:	fa01 f202 	lsl.w	r2, r1, r2
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d184      	bne.n	8006c2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d105      	bne.n	8006d34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d28:	4b23      	ldr	r3, [pc, #140]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	4a22      	ldr	r2, [pc, #136]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8242 	beq.w	80071ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d46:	4b1c      	ldr	r3, [pc, #112]	; (8006db8 <HAL_RCC_OscConfig+0xc58>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	f000 8213 	beq.w	800717a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	f040 8162 	bne.w	800702a <HAL_RCC_OscConfig+0xeca>
 8006d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d6a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	fa93 f2a3 	rbit	r2, r3
 8006d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006d8a:	601a      	str	r2, [r3, #0]
  return result;
 8006d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006d94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d96:	fab3 f383 	clz	r3, r3
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	461a      	mov	r2, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fc fa86 	bl	80032bc <HAL_GetTick>
 8006db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db4:	e00c      	b.n	8006dd0 <HAL_RCC_OscConfig+0xc70>
 8006db6:	bf00      	nop
 8006db8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fc fa7e 	bl	80032bc <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e1fd      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
 8006dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	fa93 f2a3 	rbit	r2, r3
 8006dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006df0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006df4:	601a      	str	r2, [r3, #0]
  return result;
 8006df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dfa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006dfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e00:	fab3 f383 	clz	r3, r3
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d102      	bne.n	8006e1a <HAL_RCC_OscConfig+0xcba>
 8006e14:	4bb0      	ldr	r3, [pc, #704]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	e027      	b.n	8006e6a <HAL_RCC_OscConfig+0xd0a>
 8006e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	fa93 f2a3 	rbit	r2, r3
 8006e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	fa93 f2a3 	rbit	r2, r3
 8006e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	4b9c      	ldr	r3, [pc, #624]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006e72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e76:	6011      	str	r1, [r2, #0]
 8006e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006e80:	6812      	ldr	r2, [r2, #0]
 8006e82:	fa92 f1a2 	rbit	r1, r2
 8006e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006e8e:	6011      	str	r1, [r2, #0]
  return result;
 8006e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	fab2 f282 	clz	r2, r2
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	f042 0220 	orr.w	r2, r2, #32
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	f002 021f 	and.w	r2, r2, #31
 8006eaa:	2101      	movs	r1, #1
 8006eac:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d182      	bne.n	8006dbc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb6:	4b88      	ldr	r3, [pc, #544]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	497f      	ldr	r1, [pc, #508]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	604b      	str	r3, [r1, #4]
 8006ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ef0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	fa93 f2a3 	rbit	r2, r3
 8006efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006f02:	601a      	str	r2, [r3, #0]
  return result;
 8006f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006f0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f0e:	fab3 f383 	clz	r3, r3
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2301      	movs	r3, #1
 8006f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f24:	f7fc f9ca 	bl	80032bc <HAL_GetTick>
 8006f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f2c:	e009      	b.n	8006f42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f2e:	f7fc f9c5 	bl	80032bc <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e144      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
 8006f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	fa93 f2a3 	rbit	r2, r3
 8006f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006f66:	601a      	str	r2, [r3, #0]
  return result;
 8006f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006f70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f72:	fab3 f383 	clz	r3, r3
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d102      	bne.n	8006f8c <HAL_RCC_OscConfig+0xe2c>
 8006f86:	4b54      	ldr	r3, [pc, #336]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	e027      	b.n	8006fdc <HAL_RCC_OscConfig+0xe7c>
 8006f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	fa93 f2a3 	rbit	r2, r3
 8006fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	fa93 f2a3 	rbit	r2, r3
 8006fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	4b3f      	ldr	r3, [pc, #252]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fe0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006fe8:	6011      	str	r1, [r2, #0]
 8006fea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	fa92 f1a2 	rbit	r1, r2
 8006ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ffc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007000:	6011      	str	r1, [r2, #0]
  return result;
 8007002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007006:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	fab2 f282 	clz	r2, r2
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	f042 0220 	orr.w	r2, r2, #32
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	f002 021f 	and.w	r2, r2, #31
 800701c:	2101      	movs	r1, #1
 800701e:	fa01 f202 	lsl.w	r2, r1, r2
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d082      	beq.n	8006f2e <HAL_RCC_OscConfig+0xdce>
 8007028:	e0cf      	b.n	80071ca <HAL_RCC_OscConfig+0x106a>
 800702a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800702e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007032:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800703c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	fa93 f2a3 	rbit	r2, r3
 8007046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800704a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800704e:	601a      	str	r2, [r3, #0]
  return result;
 8007050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007054:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007058:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800705a:	fab3 f383 	clz	r3, r3
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	461a      	mov	r2, r3
 800706c:	2300      	movs	r3, #0
 800706e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007070:	f7fc f924 	bl	80032bc <HAL_GetTick>
 8007074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007078:	e009      	b.n	800708e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707a:	f7fc f91f 	bl	80032bc <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e09e      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
 800708e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007092:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800709a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	fa93 f2a3 	rbit	r2, r3
 80070aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80070b2:	601a      	str	r2, [r3, #0]
  return result;
 80070b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80070bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070be:	fab3 f383 	clz	r3, r3
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d104      	bne.n	80070dc <HAL_RCC_OscConfig+0xf7c>
 80070d2:	4b01      	ldr	r3, [pc, #4]	; (80070d8 <HAL_RCC_OscConfig+0xf78>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	e029      	b.n	800712c <HAL_RCC_OscConfig+0xfcc>
 80070d8:	40021000 	.word	0x40021000
 80070dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80070e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	fa93 f2a3 	rbit	r2, r3
 80070f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007106:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800710a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007114:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	fa93 f2a3 	rbit	r2, r3
 800711e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007122:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <HAL_RCC_OscConfig+0x1078>)
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007130:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800713e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	fa92 f1a2 	rbit	r1, r2
 8007148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800714c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007150:	6011      	str	r1, [r2, #0]
  return result;
 8007152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007156:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	fab2 f282 	clz	r2, r2
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	f042 0220 	orr.w	r2, r2, #32
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	f002 021f 	and.w	r2, r2, #31
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f202 	lsl.w	r2, r1, r2
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d180      	bne.n	800707a <HAL_RCC_OscConfig+0xf1a>
 8007178:	e027      	b.n	80071ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800717a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800717e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e01e      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800718e:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <HAL_RCC_OscConfig+0x1078>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007196:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800719a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800719e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d10b      	bne.n	80071c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80071ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80071b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80071b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d001      	beq.n	80071ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40021000 	.word	0x40021000

080071dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b09e      	sub	sp, #120	; 0x78
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e162      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071f4:	4b90      	ldr	r3, [pc, #576]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d910      	bls.n	8007224 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007202:	4b8d      	ldr	r3, [pc, #564]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 0207 	bic.w	r2, r3, #7
 800720a:	498b      	ldr	r1, [pc, #556]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007212:	4b89      	ldr	r3, [pc, #548]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d001      	beq.n	8007224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e14a      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007230:	4b82      	ldr	r3, [pc, #520]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	497f      	ldr	r1, [pc, #508]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 800723e:	4313      	orrs	r3, r2
 8007240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80dc 	beq.w	8007408 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d13c      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xf6>
 8007258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800725c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007260:	fa93 f3a3 	rbit	r3, r3
 8007264:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007268:	fab3 f383 	clz	r3, r3
 800726c:	b2db      	uxtb	r3, r3
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	b2db      	uxtb	r3, r3
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d102      	bne.n	8007282 <HAL_RCC_ClockConfig+0xa6>
 800727c:	4b6f      	ldr	r3, [pc, #444]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	e00f      	b.n	80072a2 <HAL_RCC_ClockConfig+0xc6>
 8007282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007286:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800728a:	fa93 f3a3 	rbit	r3, r3
 800728e:	667b      	str	r3, [r7, #100]	; 0x64
 8007290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007294:	663b      	str	r3, [r7, #96]	; 0x60
 8007296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007298:	fa93 f3a3 	rbit	r3, r3
 800729c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800729e:	4b67      	ldr	r3, [pc, #412]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80072a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072aa:	fa92 f2a2 	rbit	r2, r2
 80072ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80072b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072b2:	fab2 f282 	clz	r2, r2
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	f042 0220 	orr.w	r2, r2, #32
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	f002 021f 	and.w	r2, r2, #31
 80072c2:	2101      	movs	r1, #1
 80072c4:	fa01 f202 	lsl.w	r2, r1, r2
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d17b      	bne.n	80073c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e0f3      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d13c      	bne.n	8007354 <HAL_RCC_ClockConfig+0x178>
 80072da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e2:	fa93 f3a3 	rbit	r3, r3
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80072e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d102      	bne.n	8007304 <HAL_RCC_ClockConfig+0x128>
 80072fe:	4b4f      	ldr	r3, [pc, #316]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	e00f      	b.n	8007324 <HAL_RCC_ClockConfig+0x148>
 8007304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007308:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800730c:	fa93 f3a3 	rbit	r3, r3
 8007310:	647b      	str	r3, [r7, #68]	; 0x44
 8007312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007316:	643b      	str	r3, [r7, #64]	; 0x40
 8007318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007320:	4b46      	ldr	r3, [pc, #280]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007328:	63ba      	str	r2, [r7, #56]	; 0x38
 800732a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800732c:	fa92 f2a2 	rbit	r2, r2
 8007330:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007334:	fab2 f282 	clz	r2, r2
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	f042 0220 	orr.w	r2, r2, #32
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	f002 021f 	and.w	r2, r2, #31
 8007344:	2101      	movs	r1, #1
 8007346:	fa01 f202 	lsl.w	r2, r1, r2
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d13a      	bne.n	80073c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0b2      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
 8007354:	2302      	movs	r3, #2
 8007356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	fa93 f3a3 	rbit	r3, r3
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007362:	fab3 f383 	clz	r3, r3
 8007366:	b2db      	uxtb	r3, r3
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d102      	bne.n	800737c <HAL_RCC_ClockConfig+0x1a0>
 8007376:	4b31      	ldr	r3, [pc, #196]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	e00d      	b.n	8007398 <HAL_RCC_ClockConfig+0x1bc>
 800737c:	2302      	movs	r3, #2
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	fa93 f3a3 	rbit	r3, r3
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	2302      	movs	r3, #2
 800738a:	623b      	str	r3, [r7, #32]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	fa93 f3a3 	rbit	r3, r3
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	4b29      	ldr	r3, [pc, #164]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2202      	movs	r2, #2
 800739a:	61ba      	str	r2, [r7, #24]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	fa92 f2a2 	rbit	r2, r2
 80073a2:	617a      	str	r2, [r7, #20]
  return result;
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	fab2 f282 	clz	r2, r2
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	f042 0220 	orr.w	r2, r2, #32
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	f002 021f 	and.w	r2, r2, #31
 80073b6:	2101      	movs	r1, #1
 80073b8:	fa01 f202 	lsl.w	r2, r1, r2
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e079      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f023 0203 	bic.w	r2, r3, #3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	491a      	ldr	r1, [pc, #104]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073d8:	f7fb ff70 	bl	80032bc <HAL_GetTick>
 80073dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e0:	f7fb ff6c 	bl	80032bc <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e061      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <HAL_RCC_ClockConfig+0x260>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f003 020c 	and.w	r2, r3, #12
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	429a      	cmp	r2, r3
 8007406:	d1eb      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d214      	bcs.n	8007440 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007416:	4b08      	ldr	r3, [pc, #32]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f023 0207 	bic.w	r2, r3, #7
 800741e:	4906      	ldr	r1, [pc, #24]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <HAL_RCC_ClockConfig+0x25c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d005      	beq.n	8007440 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e040      	b.n	80074ba <HAL_RCC_ClockConfig+0x2de>
 8007438:	40022000 	.word	0x40022000
 800743c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <HAL_RCC_ClockConfig+0x2e8>)
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	491a      	ldr	r1, [pc, #104]	; (80074c4 <HAL_RCC_ClockConfig+0x2e8>)
 800745a:	4313      	orrs	r3, r2
 800745c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <HAL_RCC_ClockConfig+0x2e8>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4912      	ldr	r1, [pc, #72]	; (80074c4 <HAL_RCC_ClockConfig+0x2e8>)
 800747a:	4313      	orrs	r3, r2
 800747c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800747e:	f000 f829 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 8007482:	4601      	mov	r1, r0
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <HAL_RCC_ClockConfig+0x2e8>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800748c:	22f0      	movs	r2, #240	; 0xf0
 800748e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	fa92 f2a2 	rbit	r2, r2
 8007496:	60fa      	str	r2, [r7, #12]
  return result;
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	fab2 f282 	clz	r2, r2
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	40d3      	lsrs	r3, r2
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <HAL_RCC_ClockConfig+0x2ec>)
 80074a4:	5cd3      	ldrb	r3, [r2, r3]
 80074a6:	fa21 f303 	lsr.w	r3, r1, r3
 80074aa:	4a08      	ldr	r2, [pc, #32]	; (80074cc <HAL_RCC_ClockConfig+0x2f0>)
 80074ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80074ae:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <HAL_RCC_ClockConfig+0x2f4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb febe 	bl	8003234 <HAL_InitTick>
  
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3778      	adds	r7, #120	; 0x78
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40021000 	.word	0x40021000
 80074c8:	0800f0c8 	.word	0x0800f0c8
 80074cc:	20000004 	.word	0x20000004
 80074d0:	20000008 	.word	0x20000008

080074d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b08b      	sub	sp, #44	; 0x2c
 80074d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	2300      	movs	r3, #0
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	2300      	movs	r3, #0
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 030c 	and.w	r3, r3, #12
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d002      	beq.n	8007504 <HAL_RCC_GetSysClockFreq+0x30>
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d003      	beq.n	800750a <HAL_RCC_GetSysClockFreq+0x36>
 8007502:	e03c      	b.n	800757e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007506:	623b      	str	r3, [r7, #32]
      break;
 8007508:	e03c      	b.n	8007584 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007510:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007514:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	fa92 f2a2 	rbit	r2, r2
 800751c:	607a      	str	r2, [r7, #4]
  return result;
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	fab2 f282 	clz	r2, r2
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	40d3      	lsrs	r3, r2
 8007528:	4a1c      	ldr	r2, [pc, #112]	; (800759c <HAL_RCC_GetSysClockFreq+0xc8>)
 800752a:	5cd3      	ldrb	r3, [r2, r3]
 800752c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	220f      	movs	r2, #15
 8007538:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	fa92 f2a2 	rbit	r2, r2
 8007540:	60fa      	str	r2, [r7, #12]
  return result;
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	fab2 f282 	clz	r2, r2
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	40d3      	lsrs	r3, r2
 800754c:	4a14      	ldr	r2, [pc, #80]	; (80075a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800754e:	5cd3      	ldrb	r3, [r2, r3]
 8007550:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800755c:	4a0e      	ldr	r2, [pc, #56]	; (8007598 <HAL_RCC_GetSysClockFreq+0xc4>)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	fbb2 f2f3 	udiv	r2, r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	e004      	b.n	8007578 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	623b      	str	r3, [r7, #32]
      break;
 800757c:	e002      	b.n	8007584 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007580:	623b      	str	r3, [r7, #32]
      break;
 8007582:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007584:	6a3b      	ldr	r3, [r7, #32]
}
 8007586:	4618      	mov	r0, r3
 8007588:	372c      	adds	r7, #44	; 0x2c
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40021000 	.word	0x40021000
 8007598:	007a1200 	.word	0x007a1200
 800759c:	0800f0e0 	.word	0x0800f0e0
 80075a0:	0800f0f0 	.word	0x0800f0f0
 80075a4:	003d0900 	.word	0x003d0900

080075a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075ac:	4b03      	ldr	r3, [pc, #12]	; (80075bc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20000004 	.word	0x20000004

080075c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80075c6:	f7ff ffef 	bl	80075a8 <HAL_RCC_GetHCLKFreq>
 80075ca:	4601      	mov	r1, r0
 80075cc:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80075d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	fa92 f2a2 	rbit	r2, r2
 80075e0:	603a      	str	r2, [r7, #0]
  return result;
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	fab2 f282 	clz	r2, r2
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	40d3      	lsrs	r3, r2
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <HAL_RCC_GetPCLK1Freq+0x40>)
 80075ee:	5cd3      	ldrb	r3, [r2, r3]
 80075f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40021000 	.word	0x40021000
 8007600:	0800f0d8 	.word	0x0800f0d8

08007604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800760a:	f7ff ffcd 	bl	80075a8 <HAL_RCC_GetHCLKFreq>
 800760e:	4601      	mov	r1, r0
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007618:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800761c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	fa92 f2a2 	rbit	r2, r2
 8007624:	603a      	str	r2, [r7, #0]
  return result;
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	fab2 f282 	clz	r2, r2
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	40d3      	lsrs	r3, r2
 8007630:	4a04      	ldr	r2, [pc, #16]	; (8007644 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007632:	5cd3      	ldrb	r3, [r2, r3]
 8007634:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40021000 	.word	0x40021000
 8007644:	0800f0d8 	.word	0x0800f0d8

08007648 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b092      	sub	sp, #72	; 0x48
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007658:	2300      	movs	r3, #0
 800765a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80d4 	beq.w	8007814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800766c:	4b4e      	ldr	r3, [pc, #312]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10e      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007678:	4b4b      	ldr	r3, [pc, #300]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	4a4a      	ldr	r2, [pc, #296]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007682:	61d3      	str	r3, [r2, #28]
 8007684:	4b48      	ldr	r3, [pc, #288]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007696:	4b45      	ldr	r3, [pc, #276]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d118      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076a2:	4b42      	ldr	r3, [pc, #264]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a41      	ldr	r2, [pc, #260]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076ae:	f7fb fe05 	bl	80032bc <HAL_GetTick>
 80076b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b6:	f7fb fe01 	bl	80032bc <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b64      	cmp	r3, #100	; 0x64
 80076c2:	d901      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e169      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c8:	4b38      	ldr	r3, [pc, #224]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076d4:	4b34      	ldr	r3, [pc, #208]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8084 	beq.w	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d07c      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076f4:	4b2c      	ldr	r3, [pc, #176]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007702:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	fa93 f3a3 	rbit	r3, r3
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800770e:	fab3 f383 	clz	r3, r3
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	4b26      	ldr	r3, [pc, #152]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	461a      	mov	r2, r3
 800771e:	2301      	movs	r3, #1
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	fa93 f3a3 	rbit	r3, r3
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007732:	fab3 f383 	clz	r3, r3
 8007736:	b2db      	uxtb	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	461a      	mov	r2, r3
 8007742:	2300      	movs	r3, #0
 8007744:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d04b      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007756:	f7fb fdb1 	bl	80032bc <HAL_GetTick>
 800775a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800775c:	e00a      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800775e:	f7fb fdad 	bl	80032bc <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f241 3288 	movw	r2, #5000	; 0x1388
 800776c:	4293      	cmp	r3, r2
 800776e:	d901      	bls.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e113      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007774:	2302      	movs	r3, #2
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	fa93 f3a3 	rbit	r3, r3
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
 8007780:	2302      	movs	r3, #2
 8007782:	623b      	str	r3, [r7, #32]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	fa93 f3a3 	rbit	r3, r3
 800778a:	61fb      	str	r3, [r7, #28]
  return result;
 800778c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800778e:	fab3 f383 	clz	r3, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f043 0302 	orr.w	r3, r3, #2
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d108      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80077a2:	4b01      	ldr	r3, [pc, #4]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	e00d      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80077a8:	40021000 	.word	0x40021000
 80077ac:	40007000 	.word	0x40007000
 80077b0:	10908100 	.word	0x10908100
 80077b4:	2302      	movs	r3, #2
 80077b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	fa93 f3a3 	rbit	r3, r3
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	4b78      	ldr	r3, [pc, #480]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2202      	movs	r2, #2
 80077c6:	613a      	str	r2, [r7, #16]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	fa92 f2a2 	rbit	r2, r2
 80077ce:	60fa      	str	r2, [r7, #12]
  return result;
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	fab2 f282 	clz	r2, r2
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	f002 021f 	and.w	r2, r2, #31
 80077e2:	2101      	movs	r1, #1
 80077e4:	fa01 f202 	lsl.w	r2, r1, r2
 80077e8:	4013      	ands	r3, r2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0b7      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80077ee:	4b6d      	ldr	r3, [pc, #436]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	496a      	ldr	r1, [pc, #424]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007808:	4b66      	ldr	r3, [pc, #408]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	4a65      	ldr	r2, [pc, #404]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800780e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007820:	4b60      	ldr	r3, [pc, #384]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	f023 0203 	bic.w	r2, r3, #3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	495d      	ldr	r1, [pc, #372]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800783e:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	4956      	ldr	r1, [pc, #344]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800785c:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	494e      	ldr	r1, [pc, #312]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800786a:	4313      	orrs	r3, r2
 800786c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800787a:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	f023 0210 	bic.w	r2, r3, #16
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	4947      	ldr	r1, [pc, #284]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007888:	4313      	orrs	r3, r2
 800788a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007898:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	493f      	ldr	r1, [pc, #252]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078b6:	4b3b      	ldr	r3, [pc, #236]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	f023 0220 	bic.w	r2, r3, #32
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	4938      	ldr	r1, [pc, #224]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078d4:	4b33      	ldr	r3, [pc, #204]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	4930      	ldr	r1, [pc, #192]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078f2:	4b2c      	ldr	r3, [pc, #176]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	4929      	ldr	r1, [pc, #164]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007900:	4313      	orrs	r3, r2
 8007902:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007910:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4921      	ldr	r1, [pc, #132]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800791e:	4313      	orrs	r3, r2
 8007920:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	491a      	ldr	r1, [pc, #104]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800794c:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	4912      	ldr	r1, [pc, #72]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800795a:	4313      	orrs	r3, r2
 800795c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800796a:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	490b      	ldr	r1, [pc, #44]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007978:	4313      	orrs	r3, r2
 800797a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007988:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007994:	4903      	ldr	r1, [pc, #12]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007996:	4313      	orrs	r3, r2
 8007998:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3748      	adds	r7, #72	; 0x48
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40021000 	.word	0x40021000

080079a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e09d      	b.n	8007af6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d108      	bne.n	80079d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ca:	d009      	beq.n	80079e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	61da      	str	r2, [r3, #28]
 80079d2:	e005      	b.n	80079e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fa fd10 	bl	8002420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a20:	d902      	bls.n	8007a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	e002      	b.n	8007a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007a36:	d007      	beq.n	8007a48 <HAL_SPI_Init+0xa0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a40:	d002      	beq.n	8007a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	ea42 0103 	orr.w	r1, r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	f003 0204 	and.w	r2, r3, #4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ac4:	ea42 0103 	orr.w	r1, r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	099b      	lsrs	r3, r3, #6
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10f      	bne.n	8007b44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	099b      	lsrs	r3, r3, #6
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
    return;
 8007b42:	e0d7      	b.n	8007cf4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <HAL_SPI_IRQHandler+0x66>
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	09db      	lsrs	r3, r3, #7
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
    return;
 8007b64:	e0c6      	b.n	8007cf4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10c      	bne.n	8007b8c <HAL_SPI_IRQHandler+0x8c>
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	099b      	lsrs	r3, r3, #6
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	0a1b      	lsrs	r3, r3, #8
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80b4 	beq.w	8007cf4 <HAL_SPI_IRQHandler+0x1f4>
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80ad 	beq.w	8007cf4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	099b      	lsrs	r3, r3, #6
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d023      	beq.n	8007bee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d011      	beq.n	8007bd6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	e00b      	b.n	8007bee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	693b      	ldr	r3, [r7, #16]
        return;
 8007bec:	e082      	b.n	8007cf4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	095b      	lsrs	r3, r3, #5
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d014      	beq.n	8007c24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfe:	f043 0201 	orr.w	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00c      	beq.n	8007c4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c34:	f043 0208 	orr.w	r2, r3, #8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	60bb      	str	r3, [r7, #8]
 8007c48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d04f      	beq.n	8007cf2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <HAL_SPI_IRQHandler+0x17e>
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d034      	beq.n	8007ce8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0203 	bic.w	r2, r2, #3
 8007c8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d011      	beq.n	8007cba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9a:	4a18      	ldr	r2, [pc, #96]	; (8007cfc <HAL_SPI_IRQHandler+0x1fc>)
 8007c9c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fc fd30 	bl	8004708 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d016      	beq.n	8007cf0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	4a0d      	ldr	r2, [pc, #52]	; (8007cfc <HAL_SPI_IRQHandler+0x1fc>)
 8007cc8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fc fd1a 	bl	8004708 <HAL_DMA_Abort_IT>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ce6:	e003      	b.n	8007cf0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f809 	bl	8007d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007cee:	e000      	b.n	8007cf2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007cf0:	bf00      	nop
    return;
 8007cf2:	bf00      	nop
  }
}
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	08007d15 	.word	0x08007d15

08007d00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff ffe5 	bl	8007d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e049      	b.n	8007de4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d106      	bne.n	8007d6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fa fc13 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f000 fd1d 	bl	80087bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d001      	beq.n	8007e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e04a      	b.n	8007e9a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a21      	ldr	r2, [pc, #132]	; (8007ea8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d018      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x6c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2e:	d013      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x6c>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <HAL_TIM_Base_Start_IT+0xc0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00e      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x6c>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d009      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x6c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x6c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d115      	bne.n	8007e84 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	d015      	beq.n	8007e96 <HAL_TIM_Base_Start_IT+0xaa>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e70:	d011      	beq.n	8007e96 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e82:	e008      	b.n	8007e96 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e000      	b.n	8007e98 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	40013400 	.word	0x40013400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	00010007 	.word	0x00010007

08007ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e049      	b.n	8007f66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fa fb18 	bl	800251c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f000 fc5c 	bl	80087bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <HAL_TIM_PWM_Start+0x24>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e03c      	b.n	800800e <HAL_TIM_PWM_Start+0x9e>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d109      	bne.n	8007fae <HAL_TIM_PWM_Start+0x3e>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	bf14      	ite	ne
 8007fa6:	2301      	movne	r3, #1
 8007fa8:	2300      	moveq	r3, #0
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	e02f      	b.n	800800e <HAL_TIM_PWM_Start+0x9e>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d109      	bne.n	8007fc8 <HAL_TIM_PWM_Start+0x58>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	bf14      	ite	ne
 8007fc0:	2301      	movne	r3, #1
 8007fc2:	2300      	moveq	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	e022      	b.n	800800e <HAL_TIM_PWM_Start+0x9e>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b0c      	cmp	r3, #12
 8007fcc:	d109      	bne.n	8007fe2 <HAL_TIM_PWM_Start+0x72>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	bf14      	ite	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	2300      	moveq	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	e015      	b.n	800800e <HAL_TIM_PWM_Start+0x9e>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d109      	bne.n	8007ffc <HAL_TIM_PWM_Start+0x8c>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	bf14      	ite	ne
 8007ff4:	2301      	movne	r3, #1
 8007ff6:	2300      	moveq	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	e008      	b.n	800800e <HAL_TIM_PWM_Start+0x9e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b01      	cmp	r3, #1
 8008006:	bf14      	ite	ne
 8008008:	2301      	movne	r3, #1
 800800a:	2300      	moveq	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e097      	b.n	8008146 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <HAL_TIM_PWM_Start+0xb6>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008024:	e023      	b.n	800806e <HAL_TIM_PWM_Start+0xfe>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b04      	cmp	r3, #4
 800802a:	d104      	bne.n	8008036 <HAL_TIM_PWM_Start+0xc6>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008034:	e01b      	b.n	800806e <HAL_TIM_PWM_Start+0xfe>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b08      	cmp	r3, #8
 800803a:	d104      	bne.n	8008046 <HAL_TIM_PWM_Start+0xd6>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008044:	e013      	b.n	800806e <HAL_TIM_PWM_Start+0xfe>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b0c      	cmp	r3, #12
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Start+0xe6>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008054:	e00b      	b.n	800806e <HAL_TIM_PWM_Start+0xfe>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b10      	cmp	r3, #16
 800805a:	d104      	bne.n	8008066 <HAL_TIM_PWM_Start+0xf6>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008064:	e003      	b.n	800806e <HAL_TIM_PWM_Start+0xfe>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2201      	movs	r2, #1
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 ffa0 	bl	8008fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a33      	ldr	r2, [pc, #204]	; (8008150 <HAL_TIM_PWM_Start+0x1e0>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <HAL_TIM_PWM_Start+0x13e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a32      	ldr	r2, [pc, #200]	; (8008154 <HAL_TIM_PWM_Start+0x1e4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00e      	beq.n	80080ae <HAL_TIM_PWM_Start+0x13e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a30      	ldr	r2, [pc, #192]	; (8008158 <HAL_TIM_PWM_Start+0x1e8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d009      	beq.n	80080ae <HAL_TIM_PWM_Start+0x13e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a2f      	ldr	r2, [pc, #188]	; (800815c <HAL_TIM_PWM_Start+0x1ec>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d004      	beq.n	80080ae <HAL_TIM_PWM_Start+0x13e>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a2d      	ldr	r2, [pc, #180]	; (8008160 <HAL_TIM_PWM_Start+0x1f0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <HAL_TIM_PWM_Start+0x142>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <HAL_TIM_PWM_Start+0x144>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d007      	beq.n	80080c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a20      	ldr	r2, [pc, #128]	; (8008150 <HAL_TIM_PWM_Start+0x1e0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d018      	beq.n	8008104 <HAL_TIM_PWM_Start+0x194>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d013      	beq.n	8008104 <HAL_TIM_PWM_Start+0x194>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a20      	ldr	r2, [pc, #128]	; (8008164 <HAL_TIM_PWM_Start+0x1f4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_TIM_PWM_Start+0x194>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1f      	ldr	r2, [pc, #124]	; (8008168 <HAL_TIM_PWM_Start+0x1f8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_TIM_PWM_Start+0x194>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a17      	ldr	r2, [pc, #92]	; (8008154 <HAL_TIM_PWM_Start+0x1e4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_TIM_PWM_Start+0x194>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a16      	ldr	r2, [pc, #88]	; (8008158 <HAL_TIM_PWM_Start+0x1e8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d115      	bne.n	8008130 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	4b18      	ldr	r3, [pc, #96]	; (800816c <HAL_TIM_PWM_Start+0x1fc>)
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d015      	beq.n	8008142 <HAL_TIM_PWM_Start+0x1d2>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811c:	d011      	beq.n	8008142 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812e:	e008      	b.n	8008142 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	e000      	b.n	8008144 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	40012c00 	.word	0x40012c00
 8008154:	40013400 	.word	0x40013400
 8008158:	40014000 	.word	0x40014000
 800815c:	40014400 	.word	0x40014400
 8008160:	40014800 	.word	0x40014800
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	00010007 	.word	0x00010007

08008170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d122      	bne.n	80081cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b02      	cmp	r3, #2
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0202 	mvn.w	r2, #2
 800819c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fae3 	bl	800877e <HAL_TIM_IC_CaptureCallback>
 80081b8:	e005      	b.n	80081c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fad5 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fae6 	bl	8008792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d122      	bne.n	8008220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d11b      	bne.n	8008220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0204 	mvn.w	r2, #4
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fab9 	bl	800877e <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 faab 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fabc 	bl	8008792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b08      	cmp	r3, #8
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b08      	cmp	r3, #8
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0208 	mvn.w	r2, #8
 8008244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2204      	movs	r2, #4
 800824a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa8f 	bl	800877e <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa81 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fa92 	bl	8008792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	2b10      	cmp	r3, #16
 8008280:	d122      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b10      	cmp	r3, #16
 800828e:	d11b      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0210 	mvn.w	r2, #16
 8008298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2208      	movs	r2, #8
 800829e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa65 	bl	800877e <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa57 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa68 	bl	8008792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10e      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0201 	mvn.w	r2, #1
 80082ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7f9 fe0c 	bl	8001f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fe:	2b80      	cmp	r3, #128	; 0x80
 8008300:	d10e      	bne.n	8008320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830c:	2b80      	cmp	r3, #128	; 0x80
 800830e:	d107      	bne.n	8008320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 ff7c 	bl	8009218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832e:	d10e      	bne.n	800834e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833a:	2b80      	cmp	r3, #128	; 0x80
 800833c:	d107      	bne.n	800834e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 ff6f 	bl	800922c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d10e      	bne.n	800837a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b40      	cmp	r3, #64	; 0x40
 8008368:	d107      	bne.n	800837a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa16 	bl	80087a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b20      	cmp	r3, #32
 8008386:	d10e      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b20      	cmp	r3, #32
 8008394:	d107      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f06f 0220 	mvn.w	r2, #32
 800839e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 ff2f 	bl	8009204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083ca:	2302      	movs	r3, #2
 80083cc:	e0ff      	b.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b14      	cmp	r3, #20
 80083da:	f200 80f0 	bhi.w	80085be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008439 	.word	0x08008439
 80083e8:	080085bf 	.word	0x080085bf
 80083ec:	080085bf 	.word	0x080085bf
 80083f0:	080085bf 	.word	0x080085bf
 80083f4:	08008479 	.word	0x08008479
 80083f8:	080085bf 	.word	0x080085bf
 80083fc:	080085bf 	.word	0x080085bf
 8008400:	080085bf 	.word	0x080085bf
 8008404:	080084bb 	.word	0x080084bb
 8008408:	080085bf 	.word	0x080085bf
 800840c:	080085bf 	.word	0x080085bf
 8008410:	080085bf 	.word	0x080085bf
 8008414:	080084fb 	.word	0x080084fb
 8008418:	080085bf 	.word	0x080085bf
 800841c:	080085bf 	.word	0x080085bf
 8008420:	080085bf 	.word	0x080085bf
 8008424:	0800853d 	.word	0x0800853d
 8008428:	080085bf 	.word	0x080085bf
 800842c:	080085bf 	.word	0x080085bf
 8008430:	080085bf 	.word	0x080085bf
 8008434:	0800857d 	.word	0x0800857d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fa4c 	bl	80088dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0208 	orr.w	r2, r2, #8
 8008452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0204 	bic.w	r2, r2, #4
 8008462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6999      	ldr	r1, [r3, #24]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691a      	ldr	r2, [r3, #16]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	619a      	str	r2, [r3, #24]
      break;
 8008476:	e0a5      	b.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fabc 	bl	80089fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6999      	ldr	r1, [r3, #24]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	021a      	lsls	r2, r3, #8
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	619a      	str	r2, [r3, #24]
      break;
 80084b8:	e084      	b.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fb25 	bl	8008b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69da      	ldr	r2, [r3, #28]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0208 	orr.w	r2, r2, #8
 80084d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0204 	bic.w	r2, r2, #4
 80084e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69d9      	ldr	r1, [r3, #28]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	61da      	str	r2, [r3, #28]
      break;
 80084f8:	e064      	b.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fb8d 	bl	8008c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69da      	ldr	r2, [r3, #28]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69d9      	ldr	r1, [r3, #28]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	021a      	lsls	r2, r3, #8
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	61da      	str	r2, [r3, #28]
      break;
 800853a:	e043      	b.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68b9      	ldr	r1, [r7, #8]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fbd6 	bl	8008cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0208 	orr.w	r2, r2, #8
 8008556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0204 	bic.w	r2, r2, #4
 8008566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800857a:	e023      	b.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fc1a 	bl	8008dbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	021a      	lsls	r2, r3, #8
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085bc:	e002      	b.n	80085c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]
      break;
 80085c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop

080085d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_TIM_ConfigClockSource+0x1c>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e0b6      	b.n	8008762 <HAL_TIM_ConfigClockSource+0x18a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800861e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008630:	d03e      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0xd8>
 8008632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008636:	f200 8087 	bhi.w	8008748 <HAL_TIM_ConfigClockSource+0x170>
 800863a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863e:	f000 8086 	beq.w	800874e <HAL_TIM_ConfigClockSource+0x176>
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008646:	d87f      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008648:	2b70      	cmp	r3, #112	; 0x70
 800864a:	d01a      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0xaa>
 800864c:	2b70      	cmp	r3, #112	; 0x70
 800864e:	d87b      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008650:	2b60      	cmp	r3, #96	; 0x60
 8008652:	d050      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x11e>
 8008654:	2b60      	cmp	r3, #96	; 0x60
 8008656:	d877      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008658:	2b50      	cmp	r3, #80	; 0x50
 800865a:	d03c      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0xfe>
 800865c:	2b50      	cmp	r3, #80	; 0x50
 800865e:	d873      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	d058      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x13e>
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	d86f      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008668:	2b30      	cmp	r3, #48	; 0x30
 800866a:	d064      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15e>
 800866c:	2b30      	cmp	r3, #48	; 0x30
 800866e:	d86b      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008670:	2b20      	cmp	r3, #32
 8008672:	d060      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15e>
 8008674:	2b20      	cmp	r3, #32
 8008676:	d867      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d05c      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15e>
 800867c:	2b10      	cmp	r3, #16
 800867e:	d05a      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15e>
 8008680:	e062      	b.n	8008748 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	6899      	ldr	r1, [r3, #8]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	f000 fc73 	bl	8008f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	609a      	str	r2, [r3, #8]
      break;
 80086ae:	e04f      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6899      	ldr	r1, [r3, #8]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f000 fc5c 	bl	8008f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086d2:	609a      	str	r2, [r3, #8]
      break;
 80086d4:	e03c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6859      	ldr	r1, [r3, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f000 fbd0 	bl	8008e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2150      	movs	r1, #80	; 0x50
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fc29 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 80086f4:	e02c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6859      	ldr	r1, [r3, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	461a      	mov	r2, r3
 8008704:	f000 fbef 	bl	8008ee6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2160      	movs	r1, #96	; 0x60
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fc19 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008714:	e01c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	6859      	ldr	r1, [r3, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	461a      	mov	r2, r3
 8008724:	f000 fbb0 	bl	8008e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2140      	movs	r1, #64	; 0x40
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fc09 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008734:	e00c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f000 fc00 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008746:	e003      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
      break;
 800874c:	e000      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800874e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a3c      	ldr	r2, [pc, #240]	; (80088c0 <TIM_Base_SetConfig+0x104>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00f      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087da:	d00b      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a39      	ldr	r2, [pc, #228]	; (80088c4 <TIM_Base_SetConfig+0x108>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d007      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a38      	ldr	r2, [pc, #224]	; (80088c8 <TIM_Base_SetConfig+0x10c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a37      	ldr	r2, [pc, #220]	; (80088cc <TIM_Base_SetConfig+0x110>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d108      	bne.n	8008806 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2d      	ldr	r2, [pc, #180]	; (80088c0 <TIM_Base_SetConfig+0x104>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01b      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008814:	d017      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2a      	ldr	r2, [pc, #168]	; (80088c4 <TIM_Base_SetConfig+0x108>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a29      	ldr	r2, [pc, #164]	; (80088c8 <TIM_Base_SetConfig+0x10c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00f      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a28      	ldr	r2, [pc, #160]	; (80088cc <TIM_Base_SetConfig+0x110>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00b      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a27      	ldr	r2, [pc, #156]	; (80088d0 <TIM_Base_SetConfig+0x114>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d007      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a26      	ldr	r2, [pc, #152]	; (80088d4 <TIM_Base_SetConfig+0x118>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a25      	ldr	r2, [pc, #148]	; (80088d8 <TIM_Base_SetConfig+0x11c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d108      	bne.n	8008858 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800884c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a10      	ldr	r2, [pc, #64]	; (80088c0 <TIM_Base_SetConfig+0x104>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00f      	beq.n	80088a4 <TIM_Base_SetConfig+0xe8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a11      	ldr	r2, [pc, #68]	; (80088cc <TIM_Base_SetConfig+0x110>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00b      	beq.n	80088a4 <TIM_Base_SetConfig+0xe8>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <TIM_Base_SetConfig+0x114>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d007      	beq.n	80088a4 <TIM_Base_SetConfig+0xe8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a0f      	ldr	r2, [pc, #60]	; (80088d4 <TIM_Base_SetConfig+0x118>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d003      	beq.n	80088a4 <TIM_Base_SetConfig+0xe8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a0e      	ldr	r2, [pc, #56]	; (80088d8 <TIM_Base_SetConfig+0x11c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d103      	bne.n	80088ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	615a      	str	r2, [r3, #20]
}
 80088b2:	bf00      	nop
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40012c00 	.word	0x40012c00
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800

080088dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f023 0201 	bic.w	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f023 0302 	bic.w	r3, r3, #2
 8008928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <TIM_OC1_SetConfig+0x10c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00f      	beq.n	800895c <TIM_OC1_SetConfig+0x80>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a2b      	ldr	r2, [pc, #172]	; (80089ec <TIM_OC1_SetConfig+0x110>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00b      	beq.n	800895c <TIM_OC1_SetConfig+0x80>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a2a      	ldr	r2, [pc, #168]	; (80089f0 <TIM_OC1_SetConfig+0x114>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d007      	beq.n	800895c <TIM_OC1_SetConfig+0x80>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a29      	ldr	r2, [pc, #164]	; (80089f4 <TIM_OC1_SetConfig+0x118>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d003      	beq.n	800895c <TIM_OC1_SetConfig+0x80>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a28      	ldr	r2, [pc, #160]	; (80089f8 <TIM_OC1_SetConfig+0x11c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d10c      	bne.n	8008976 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 0308 	bic.w	r3, r3, #8
 8008962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 0304 	bic.w	r3, r3, #4
 8008974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a1b      	ldr	r2, [pc, #108]	; (80089e8 <TIM_OC1_SetConfig+0x10c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00f      	beq.n	800899e <TIM_OC1_SetConfig+0xc2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a1a      	ldr	r2, [pc, #104]	; (80089ec <TIM_OC1_SetConfig+0x110>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00b      	beq.n	800899e <TIM_OC1_SetConfig+0xc2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <TIM_OC1_SetConfig+0x114>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d007      	beq.n	800899e <TIM_OC1_SetConfig+0xc2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <TIM_OC1_SetConfig+0x118>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d003      	beq.n	800899e <TIM_OC1_SetConfig+0xc2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <TIM_OC1_SetConfig+0x11c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d111      	bne.n	80089c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	621a      	str	r2, [r3, #32]
}
 80089dc:	bf00      	nop
 80089de:	371c      	adds	r7, #28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	40012c00 	.word	0x40012c00
 80089ec:	40013400 	.word	0x40013400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800

080089fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	f023 0210 	bic.w	r2, r3, #16
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0320 	bic.w	r3, r3, #32
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a28      	ldr	r2, [pc, #160]	; (8008afc <TIM_OC2_SetConfig+0x100>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d003      	beq.n	8008a68 <TIM_OC2_SetConfig+0x6c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a27      	ldr	r2, [pc, #156]	; (8008b00 <TIM_OC2_SetConfig+0x104>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d10d      	bne.n	8008a84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a1d      	ldr	r2, [pc, #116]	; (8008afc <TIM_OC2_SetConfig+0x100>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00f      	beq.n	8008aac <TIM_OC2_SetConfig+0xb0>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <TIM_OC2_SetConfig+0x104>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00b      	beq.n	8008aac <TIM_OC2_SetConfig+0xb0>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <TIM_OC2_SetConfig+0x108>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d007      	beq.n	8008aac <TIM_OC2_SetConfig+0xb0>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <TIM_OC2_SetConfig+0x10c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d003      	beq.n	8008aac <TIM_OC2_SetConfig+0xb0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <TIM_OC2_SetConfig+0x110>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d113      	bne.n	8008ad4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	621a      	str	r2, [r3, #32]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40014000 	.word	0x40014000
 8008b08:	40014400 	.word	0x40014400
 8008b0c:	40014800 	.word	0x40014800

08008b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0303 	bic.w	r3, r3, #3
 8008b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a27      	ldr	r2, [pc, #156]	; (8008c0c <TIM_OC3_SetConfig+0xfc>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d003      	beq.n	8008b7a <TIM_OC3_SetConfig+0x6a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a26      	ldr	r2, [pc, #152]	; (8008c10 <TIM_OC3_SetConfig+0x100>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d10d      	bne.n	8008b96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a1c      	ldr	r2, [pc, #112]	; (8008c0c <TIM_OC3_SetConfig+0xfc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00f      	beq.n	8008bbe <TIM_OC3_SetConfig+0xae>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a1b      	ldr	r2, [pc, #108]	; (8008c10 <TIM_OC3_SetConfig+0x100>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00b      	beq.n	8008bbe <TIM_OC3_SetConfig+0xae>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a1a      	ldr	r2, [pc, #104]	; (8008c14 <TIM_OC3_SetConfig+0x104>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d007      	beq.n	8008bbe <TIM_OC3_SetConfig+0xae>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a19      	ldr	r2, [pc, #100]	; (8008c18 <TIM_OC3_SetConfig+0x108>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d003      	beq.n	8008bbe <TIM_OC3_SetConfig+0xae>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a18      	ldr	r2, [pc, #96]	; (8008c1c <TIM_OC3_SetConfig+0x10c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d113      	bne.n	8008be6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	011b      	lsls	r3, r3, #4
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	621a      	str	r2, [r3, #32]
}
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40012c00 	.word	0x40012c00
 8008c10:	40013400 	.word	0x40013400
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800

08008c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	031b      	lsls	r3, r3, #12
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a18      	ldr	r2, [pc, #96]	; (8008ce0 <TIM_OC4_SetConfig+0xc0>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00f      	beq.n	8008ca4 <TIM_OC4_SetConfig+0x84>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a17      	ldr	r2, [pc, #92]	; (8008ce4 <TIM_OC4_SetConfig+0xc4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00b      	beq.n	8008ca4 <TIM_OC4_SetConfig+0x84>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a16      	ldr	r2, [pc, #88]	; (8008ce8 <TIM_OC4_SetConfig+0xc8>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d007      	beq.n	8008ca4 <TIM_OC4_SetConfig+0x84>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a15      	ldr	r2, [pc, #84]	; (8008cec <TIM_OC4_SetConfig+0xcc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d003      	beq.n	8008ca4 <TIM_OC4_SetConfig+0x84>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a14      	ldr	r2, [pc, #80]	; (8008cf0 <TIM_OC4_SetConfig+0xd0>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d109      	bne.n	8008cb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	019b      	lsls	r3, r3, #6
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	621a      	str	r2, [r3, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40012c00 	.word	0x40012c00
 8008ce4:	40013400 	.word	0x40013400
 8008ce8:	40014000 	.word	0x40014000
 8008cec:	40014400 	.word	0x40014400
 8008cf0:	40014800 	.word	0x40014800

08008cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	041b      	lsls	r3, r3, #16
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a17      	ldr	r2, [pc, #92]	; (8008da8 <TIM_OC5_SetConfig+0xb4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00f      	beq.n	8008d6e <TIM_OC5_SetConfig+0x7a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a16      	ldr	r2, [pc, #88]	; (8008dac <TIM_OC5_SetConfig+0xb8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00b      	beq.n	8008d6e <TIM_OC5_SetConfig+0x7a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a15      	ldr	r2, [pc, #84]	; (8008db0 <TIM_OC5_SetConfig+0xbc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d007      	beq.n	8008d6e <TIM_OC5_SetConfig+0x7a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a14      	ldr	r2, [pc, #80]	; (8008db4 <TIM_OC5_SetConfig+0xc0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d003      	beq.n	8008d6e <TIM_OC5_SetConfig+0x7a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a13      	ldr	r2, [pc, #76]	; (8008db8 <TIM_OC5_SetConfig+0xc4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d109      	bne.n	8008d82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	621a      	str	r2, [r3, #32]
}
 8008d9c:	bf00      	nop
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	40012c00 	.word	0x40012c00
 8008dac:	40013400 	.word	0x40013400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800

08008dbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	051b      	lsls	r3, r3, #20
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <TIM_OC6_SetConfig+0xb8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00f      	beq.n	8008e38 <TIM_OC6_SetConfig+0x7c>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <TIM_OC6_SetConfig+0xbc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00b      	beq.n	8008e38 <TIM_OC6_SetConfig+0x7c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <TIM_OC6_SetConfig+0xc0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_OC6_SetConfig+0x7c>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <TIM_OC6_SetConfig+0xc4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_OC6_SetConfig+0x7c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a14      	ldr	r2, [pc, #80]	; (8008e84 <TIM_OC6_SetConfig+0xc8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d109      	bne.n	8008e4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	029b      	lsls	r3, r3, #10
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40012c00 	.word	0x40012c00
 8008e78:	40013400 	.word	0x40013400
 8008e7c:	40014000 	.word	0x40014000
 8008e80:	40014400 	.word	0x40014400
 8008e84:	40014800 	.word	0x40014800

08008e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f023 030a 	bic.w	r3, r3, #10
 8008ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	621a      	str	r2, [r3, #32]
}
 8008eda:	bf00      	nop
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f023 0210 	bic.w	r2, r3, #16
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	031b      	lsls	r3, r3, #12
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	621a      	str	r2, [r3, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f043 0307 	orr.w	r3, r3, #7
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	609a      	str	r2, [r3, #8]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	021a      	lsls	r2, r3, #8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	609a      	str	r2, [r3, #8]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f003 031f 	and.w	r3, r3, #31
 8008fce:	2201      	movs	r2, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1a      	ldr	r2, [r3, #32]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	401a      	ands	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a1a      	ldr	r2, [r3, #32]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	621a      	str	r2, [r3, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800901c:	2302      	movs	r3, #2
 800901e:	e063      	b.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a2b      	ldr	r2, [pc, #172]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d004      	beq.n	8009054 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a2a      	ldr	r2, [pc, #168]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d108      	bne.n	8009066 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800905a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4313      	orrs	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1b      	ldr	r2, [pc, #108]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d018      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009092:	d013      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a18      	ldr	r2, [pc, #96]	; (80090fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00e      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a17      	ldr	r2, [pc, #92]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d009      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a13      	ldr	r2, [pc, #76]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d10c      	bne.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	40012c00 	.word	0x40012c00
 80090f8:	40013400 	.word	0x40013400
 80090fc:	40000400 	.word	0x40000400
 8009100:	40000800 	.word	0x40000800
 8009104:	40014000 	.word	0x40014000

08009108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009120:	2302      	movs	r3, #2
 8009122:	e065      	b.n	80091f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	4313      	orrs	r3, r2
 8009146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4313      	orrs	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a16      	ldr	r2, [pc, #88]	; (80091fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d004      	beq.n	80091b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a14      	ldr	r2, [pc, #80]	; (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d115      	bne.n	80091de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	051b      	lsls	r3, r3, #20
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	40012c00 	.word	0x40012c00
 8009200:	40013400 	.word	0x40013400

08009204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e040      	b.n	80092d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7f9 fa4e 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2224      	movs	r2, #36	; 0x24
 800926c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0201 	bic.w	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc72 	bl	8009b68 <UART_SetConfig>
 8009284:	4603      	mov	r3, r0
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e022      	b.n	80092d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fe3a 	bl	8009f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fec1 	bl	800a054 <UART_CheckIdleState>
 80092d2:	4603      	mov	r3, r0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	af02      	add	r7, sp, #8
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	4613      	mov	r3, r2
 80092ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d178      	bne.n	80093e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <HAL_UART_Transmit+0x24>
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e071      	b.n	80093e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2221      	movs	r2, #33	; 0x21
 8009310:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009312:	f7f9 ffd3 	bl	80032bc <HAL_GetTick>
 8009316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	88fa      	ldrh	r2, [r7, #6]
 800931c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	88fa      	ldrh	r2, [r7, #6]
 8009324:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009330:	d108      	bne.n	8009344 <HAL_UART_Transmit+0x68>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d104      	bne.n	8009344 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	61bb      	str	r3, [r7, #24]
 8009342:	e003      	b.n	800934c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009348:	2300      	movs	r3, #0
 800934a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800934c:	e030      	b.n	80093b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2200      	movs	r2, #0
 8009356:	2180      	movs	r1, #128	; 0x80
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 ff23 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2220      	movs	r2, #32
 8009368:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e03c      	b.n	80093e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10b      	bne.n	800938c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	881a      	ldrh	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009380:	b292      	uxth	r2, r2
 8009382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	3302      	adds	r3, #2
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	e008      	b.n	800939e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	b292      	uxth	r2, r2
 8009396:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	3301      	adds	r3, #1
 800939c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1c8      	bne.n	800934e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2200      	movs	r2, #0
 80093c4:	2140      	movs	r1, #64	; 0x40
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 feec 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2220      	movs	r2, #32
 80093d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e005      	b.n	80093e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2220      	movs	r2, #32
 80093e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e000      	b.n	80093e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80093e6:	2302      	movs	r3, #2
  }
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009406:	2b20      	cmp	r3, #32
 8009408:	f040 80a3 	bne.w	8009552 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <HAL_UART_Receive+0x28>
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e09b      	b.n	8009554 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2222      	movs	r2, #34	; 0x22
 8009428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009432:	f7f9 ff43 	bl	80032bc <HAL_GetTick>
 8009436:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	88fa      	ldrh	r2, [r7, #6]
 800943c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	88fa      	ldrh	r2, [r7, #6]
 8009444:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009450:	d10e      	bne.n	8009470 <HAL_UART_Receive+0x80>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d105      	bne.n	8009466 <HAL_UART_Receive+0x76>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009464:	e01a      	b.n	800949c <HAL_UART_Receive+0xac>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	22ff      	movs	r2, #255	; 0xff
 800946a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800946e:	e015      	b.n	800949c <HAL_UART_Receive+0xac>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10d      	bne.n	8009494 <HAL_UART_Receive+0xa4>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <HAL_UART_Receive+0x9a>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	22ff      	movs	r2, #255	; 0xff
 8009484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009488:	e008      	b.n	800949c <HAL_UART_Receive+0xac>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	227f      	movs	r2, #127	; 0x7f
 800948e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009492:	e003      	b.n	800949c <HAL_UART_Receive+0xac>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ac:	d108      	bne.n	80094c0 <HAL_UART_Receive+0xd0>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	61bb      	str	r3, [r7, #24]
 80094be:	e003      	b.n	80094c8 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80094c8:	e037      	b.n	800953a <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2200      	movs	r2, #0
 80094d2:	2120      	movs	r1, #32
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fe65 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e033      	b.n	8009554 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10c      	bne.n	800950c <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	8a7b      	ldrh	r3, [r7, #18]
 80094fc:	4013      	ands	r3, r2
 80094fe:	b29a      	uxth	r2, r3
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	3302      	adds	r3, #2
 8009508:	61bb      	str	r3, [r7, #24]
 800950a:	e00d      	b.n	8009528 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009512:	b29b      	uxth	r3, r3
 8009514:	b2da      	uxtb	r2, r3
 8009516:	8a7b      	ldrh	r3, [r7, #18]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	4013      	ands	r3, r2
 800951c:	b2da      	uxtb	r2, r3
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	3301      	adds	r3, #1
 8009526:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1c1      	bne.n	80094ca <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2220      	movs	r2, #32
 800954a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	e000      	b.n	8009554 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8009552:	2302      	movs	r3, #2
  }
}
 8009554:	4618      	mov	r0, r3
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b0ba      	sub	sp, #232	; 0xe8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009586:	f640 030f 	movw	r3, #2063	; 0x80f
 800958a:	4013      	ands	r3, r2
 800958c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009594:	2b00      	cmp	r3, #0
 8009596:	d115      	bne.n	80095c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00f      	beq.n	80095c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d009      	beq.n	80095c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 82ab 	beq.w	8009b10 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	4798      	blx	r3
      }
      return;
 80095c2:	e2a5      	b.n	8009b10 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8117 	beq.w	80097fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80095ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80095da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095de:	4b85      	ldr	r3, [pc, #532]	; (80097f4 <HAL_UART_IRQHandler+0x298>)
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 810a 	beq.w	80097fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d011      	beq.n	8009618 <HAL_UART_IRQHandler+0xbc>
 80095f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2201      	movs	r2, #1
 8009606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800960e:	f043 0201 	orr.w	r2, r3, #1
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d011      	beq.n	8009648 <HAL_UART_IRQHandler+0xec>
 8009624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2202      	movs	r2, #2
 8009636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963e:	f043 0204 	orr.w	r2, r3, #4
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d011      	beq.n	8009678 <HAL_UART_IRQHandler+0x11c>
 8009654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2204      	movs	r2, #4
 8009666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800966e:	f043 0202 	orr.w	r2, r3, #2
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967c:	f003 0308 	and.w	r3, r3, #8
 8009680:	2b00      	cmp	r3, #0
 8009682:	d017      	beq.n	80096b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009694:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2208      	movs	r2, #8
 80096a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096aa:	f043 0208 	orr.w	r2, r3, #8
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d012      	beq.n	80096e6 <HAL_UART_IRQHandler+0x18a>
 80096c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00c      	beq.n	80096e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096dc:	f043 0220 	orr.w	r2, r3, #32
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8211 	beq.w	8009b14 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00d      	beq.n	800971a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d005      	beq.n	800973e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800973a:	2b00      	cmp	r3, #0
 800973c:	d04f      	beq.n	80097de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fd97 	bl	800a272 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974e:	2b40      	cmp	r3, #64	; 0x40
 8009750:	d141      	bne.n	80097d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800976c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3308      	adds	r3, #8
 800977a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800977e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800978a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1d9      	bne.n	8009752 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d013      	beq.n	80097ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097aa:	4a13      	ldr	r2, [pc, #76]	; (80097f8 <HAL_UART_IRQHandler+0x29c>)
 80097ac:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fa ffa8 	bl	8004708 <HAL_DMA_Abort_IT>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d017      	beq.n	80097ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097cc:	e00f      	b.n	80097ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9b4 	bl	8009b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d4:	e00b      	b.n	80097ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f9b0 	bl	8009b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	e007      	b.n	80097ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f9ac 	bl	8009b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80097ec:	e192      	b.n	8009b14 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ee:	bf00      	nop
    return;
 80097f0:	e190      	b.n	8009b14 <HAL_UART_IRQHandler+0x5b8>
 80097f2:	bf00      	nop
 80097f4:	04000120 	.word	0x04000120
 80097f8:	0800a33b 	.word	0x0800a33b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009800:	2b01      	cmp	r3, #1
 8009802:	f040 814b 	bne.w	8009a9c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 8144 	beq.w	8009a9c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 813d 	beq.w	8009a9c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2210      	movs	r2, #16
 8009828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	f040 80b5 	bne.w	80099a4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 8164 	beq.w	8009b18 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800985a:	429a      	cmp	r2, r3
 800985c:	f080 815c 	bcs.w	8009b18 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	2b20      	cmp	r3, #32
 8009872:	f000 8086 	beq.w	8009982 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800988a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800988e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	461a      	mov	r2, r3
 800989c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1da      	bne.n	8009876 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ca:	e853 3f00 	ldrex	r3, [r3]
 80098ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e1      	bne.n	80098c0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800990c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800990e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009920:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009922:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009926:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800992e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009952:	f023 0310 	bic.w	r3, r3, #16
 8009956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009964:	65bb      	str	r3, [r7, #88]	; 0x58
 8009966:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800996a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e4      	bne.n	8009942 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997c:	4618      	mov	r0, r3
 800997e:	f7fa fe8a 	bl	8004696 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009994:	b29b      	uxth	r3, r3
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	b29b      	uxth	r3, r3
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f8d7 	bl	8009b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099a2:	e0b9      	b.n	8009b18 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80ab 	beq.w	8009b1c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80099c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 80a6 	beq.w	8009b1c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099f2:	647b      	str	r3, [r7, #68]	; 0x44
 80099f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e4      	bne.n	80099d0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	623b      	str	r3, [r7, #32]
   return(result);
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	f023 0301 	bic.w	r3, r3, #1
 8009a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3308      	adds	r3, #8
 8009a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e3      	bne.n	8009a06 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 0310 	bic.w	r3, r3, #16
 8009a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a74:	61fb      	str	r3, [r7, #28]
 8009a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	69b9      	ldr	r1, [r7, #24]
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	617b      	str	r3, [r7, #20]
   return(result);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e4      	bne.n	8009a52 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f85b 	bl	8009b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a9a:	e03f      	b.n	8009b1c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00e      	beq.n	8009ac6 <HAL_UART_IRQHandler+0x56a>
 8009aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d008      	beq.n	8009ac6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc7b 	bl	800a3ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ac4:	e02d      	b.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00e      	beq.n	8009af0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01c      	beq.n	8009b20 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	4798      	blx	r3
    }
    return;
 8009aee:	e017      	b.n	8009b20 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d012      	beq.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
 8009afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fc2c 	bl	800a366 <UART_EndTransmit_IT>
    return;
 8009b0e:	e008      	b.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009b10:	bf00      	nop
 8009b12:	e006      	b.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009b14:	bf00      	nop
 8009b16:	e004      	b.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009b18:	bf00      	nop
 8009b1a:	e002      	b.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009b20:	bf00      	nop
  }

}
 8009b22:	37e8      	adds	r7, #232	; 0xe8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009b96:	f023 030c 	bic.w	r3, r3, #12
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6812      	ldr	r2, [r2, #0]
 8009b9e:	6979      	ldr	r1, [r7, #20]
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4aa7      	ldr	r2, [pc, #668]	; (8009e80 <UART_SetConfig+0x318>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d120      	bne.n	8009c2a <UART_SetConfig+0xc2>
 8009be8:	4ba6      	ldr	r3, [pc, #664]	; (8009e84 <UART_SetConfig+0x31c>)
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d817      	bhi.n	8009c24 <UART_SetConfig+0xbc>
 8009bf4:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x94>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c1f 	.word	0x08009c1f
 8009c08:	08009c13 	.word	0x08009c13
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	77fb      	strb	r3, [r7, #31]
 8009c10:	e0b5      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c12:	2302      	movs	r3, #2
 8009c14:	77fb      	strb	r3, [r7, #31]
 8009c16:	e0b2      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c18:	2304      	movs	r3, #4
 8009c1a:	77fb      	strb	r3, [r7, #31]
 8009c1c:	e0af      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c1e:	2308      	movs	r3, #8
 8009c20:	77fb      	strb	r3, [r7, #31]
 8009c22:	e0ac      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c24:	2310      	movs	r3, #16
 8009c26:	77fb      	strb	r3, [r7, #31]
 8009c28:	e0a9      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a96      	ldr	r2, [pc, #600]	; (8009e88 <UART_SetConfig+0x320>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d124      	bne.n	8009c7e <UART_SetConfig+0x116>
 8009c34:	4b93      	ldr	r3, [pc, #588]	; (8009e84 <UART_SetConfig+0x31c>)
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c40:	d011      	beq.n	8009c66 <UART_SetConfig+0xfe>
 8009c42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c46:	d817      	bhi.n	8009c78 <UART_SetConfig+0x110>
 8009c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c4c:	d011      	beq.n	8009c72 <UART_SetConfig+0x10a>
 8009c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c52:	d811      	bhi.n	8009c78 <UART_SetConfig+0x110>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <UART_SetConfig+0xf8>
 8009c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c5c:	d006      	beq.n	8009c6c <UART_SetConfig+0x104>
 8009c5e:	e00b      	b.n	8009c78 <UART_SetConfig+0x110>
 8009c60:	2300      	movs	r3, #0
 8009c62:	77fb      	strb	r3, [r7, #31]
 8009c64:	e08b      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c66:	2302      	movs	r3, #2
 8009c68:	77fb      	strb	r3, [r7, #31]
 8009c6a:	e088      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	77fb      	strb	r3, [r7, #31]
 8009c70:	e085      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c72:	2308      	movs	r3, #8
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	e082      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e07f      	b.n	8009d7e <UART_SetConfig+0x216>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a82      	ldr	r2, [pc, #520]	; (8009e8c <UART_SetConfig+0x324>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d124      	bne.n	8009cd2 <UART_SetConfig+0x16a>
 8009c88:	4b7e      	ldr	r3, [pc, #504]	; (8009e84 <UART_SetConfig+0x31c>)
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009c90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009c94:	d011      	beq.n	8009cba <UART_SetConfig+0x152>
 8009c96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009c9a:	d817      	bhi.n	8009ccc <UART_SetConfig+0x164>
 8009c9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ca0:	d011      	beq.n	8009cc6 <UART_SetConfig+0x15e>
 8009ca2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ca6:	d811      	bhi.n	8009ccc <UART_SetConfig+0x164>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <UART_SetConfig+0x14c>
 8009cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cb0:	d006      	beq.n	8009cc0 <UART_SetConfig+0x158>
 8009cb2:	e00b      	b.n	8009ccc <UART_SetConfig+0x164>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	77fb      	strb	r3, [r7, #31]
 8009cb8:	e061      	b.n	8009d7e <UART_SetConfig+0x216>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	77fb      	strb	r3, [r7, #31]
 8009cbe:	e05e      	b.n	8009d7e <UART_SetConfig+0x216>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	77fb      	strb	r3, [r7, #31]
 8009cc4:	e05b      	b.n	8009d7e <UART_SetConfig+0x216>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	77fb      	strb	r3, [r7, #31]
 8009cca:	e058      	b.n	8009d7e <UART_SetConfig+0x216>
 8009ccc:	2310      	movs	r3, #16
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e055      	b.n	8009d7e <UART_SetConfig+0x216>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a6e      	ldr	r2, [pc, #440]	; (8009e90 <UART_SetConfig+0x328>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d124      	bne.n	8009d26 <UART_SetConfig+0x1be>
 8009cdc:	4b69      	ldr	r3, [pc, #420]	; (8009e84 <UART_SetConfig+0x31c>)
 8009cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ce8:	d011      	beq.n	8009d0e <UART_SetConfig+0x1a6>
 8009cea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cee:	d817      	bhi.n	8009d20 <UART_SetConfig+0x1b8>
 8009cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cf4:	d011      	beq.n	8009d1a <UART_SetConfig+0x1b2>
 8009cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cfa:	d811      	bhi.n	8009d20 <UART_SetConfig+0x1b8>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <UART_SetConfig+0x1a0>
 8009d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d04:	d006      	beq.n	8009d14 <UART_SetConfig+0x1ac>
 8009d06:	e00b      	b.n	8009d20 <UART_SetConfig+0x1b8>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	77fb      	strb	r3, [r7, #31]
 8009d0c:	e037      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	77fb      	strb	r3, [r7, #31]
 8009d12:	e034      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d14:	2304      	movs	r3, #4
 8009d16:	77fb      	strb	r3, [r7, #31]
 8009d18:	e031      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	77fb      	strb	r3, [r7, #31]
 8009d1e:	e02e      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d20:	2310      	movs	r3, #16
 8009d22:	77fb      	strb	r3, [r7, #31]
 8009d24:	e02b      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a5a      	ldr	r2, [pc, #360]	; (8009e94 <UART_SetConfig+0x32c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d124      	bne.n	8009d7a <UART_SetConfig+0x212>
 8009d30:	4b54      	ldr	r3, [pc, #336]	; (8009e84 <UART_SetConfig+0x31c>)
 8009d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d34:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009d38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d3c:	d011      	beq.n	8009d62 <UART_SetConfig+0x1fa>
 8009d3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d42:	d817      	bhi.n	8009d74 <UART_SetConfig+0x20c>
 8009d44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d48:	d011      	beq.n	8009d6e <UART_SetConfig+0x206>
 8009d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d4e:	d811      	bhi.n	8009d74 <UART_SetConfig+0x20c>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d003      	beq.n	8009d5c <UART_SetConfig+0x1f4>
 8009d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d58:	d006      	beq.n	8009d68 <UART_SetConfig+0x200>
 8009d5a:	e00b      	b.n	8009d74 <UART_SetConfig+0x20c>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	77fb      	strb	r3, [r7, #31]
 8009d60:	e00d      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d62:	2302      	movs	r3, #2
 8009d64:	77fb      	strb	r3, [r7, #31]
 8009d66:	e00a      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d68:	2304      	movs	r3, #4
 8009d6a:	77fb      	strb	r3, [r7, #31]
 8009d6c:	e007      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d6e:	2308      	movs	r3, #8
 8009d70:	77fb      	strb	r3, [r7, #31]
 8009d72:	e004      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d74:	2310      	movs	r3, #16
 8009d76:	77fb      	strb	r3, [r7, #31]
 8009d78:	e001      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d7a:	2310      	movs	r3, #16
 8009d7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d86:	d15b      	bne.n	8009e40 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8009d88:	7ffb      	ldrb	r3, [r7, #31]
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d827      	bhi.n	8009dde <UART_SetConfig+0x276>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <UART_SetConfig+0x22c>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	08009ddf 	.word	0x08009ddf
 8009da4:	08009dcf 	.word	0x08009dcf
 8009da8:	08009ddf 	.word	0x08009ddf
 8009dac:	08009ddf 	.word	0x08009ddf
 8009db0:	08009ddf 	.word	0x08009ddf
 8009db4:	08009dd7 	.word	0x08009dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db8:	f7fd fc02 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 8009dbc:	61b8      	str	r0, [r7, #24]
        break;
 8009dbe:	e013      	b.n	8009de8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc0:	f7fd fc20 	bl	8007604 <HAL_RCC_GetPCLK2Freq>
 8009dc4:	61b8      	str	r0, [r7, #24]
        break;
 8009dc6:	e00f      	b.n	8009de8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc8:	4b33      	ldr	r3, [pc, #204]	; (8009e98 <UART_SetConfig+0x330>)
 8009dca:	61bb      	str	r3, [r7, #24]
        break;
 8009dcc:	e00c      	b.n	8009de8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dce:	f7fd fb81 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 8009dd2:	61b8      	str	r0, [r7, #24]
        break;
 8009dd4:	e008      	b.n	8009de8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dda:	61bb      	str	r3, [r7, #24]
        break;
 8009ddc:	e004      	b.n	8009de8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	77bb      	strb	r3, [r7, #30]
        break;
 8009de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8082 	beq.w	8009ef4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	005a      	lsls	r2, r3, #1
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	085b      	lsrs	r3, r3, #1
 8009dfa:	441a      	add	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b0f      	cmp	r3, #15
 8009e0a:	d916      	bls.n	8009e3a <UART_SetConfig+0x2d2>
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e12:	d212      	bcs.n	8009e3a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f023 030f 	bic.w	r3, r3, #15
 8009e1c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	89fb      	ldrh	r3, [r7, #14]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	89fa      	ldrh	r2, [r7, #14]
 8009e36:	60da      	str	r2, [r3, #12]
 8009e38:	e05c      	b.n	8009ef4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	77bb      	strb	r3, [r7, #30]
 8009e3e:	e059      	b.n	8009ef4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e40:	7ffb      	ldrb	r3, [r7, #31]
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	d835      	bhi.n	8009eb2 <UART_SetConfig+0x34a>
 8009e46:	a201      	add	r2, pc, #4	; (adr r2, 8009e4c <UART_SetConfig+0x2e4>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e9d 	.word	0x08009e9d
 8009e58:	08009eb3 	.word	0x08009eb3
 8009e5c:	08009ea3 	.word	0x08009ea3
 8009e60:	08009eb3 	.word	0x08009eb3
 8009e64:	08009eb3 	.word	0x08009eb3
 8009e68:	08009eb3 	.word	0x08009eb3
 8009e6c:	08009eab 	.word	0x08009eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e70:	f7fd fba6 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 8009e74:	61b8      	str	r0, [r7, #24]
        break;
 8009e76:	e021      	b.n	8009ebc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e78:	f7fd fbc4 	bl	8007604 <HAL_RCC_GetPCLK2Freq>
 8009e7c:	61b8      	str	r0, [r7, #24]
        break;
 8009e7e:	e01d      	b.n	8009ebc <UART_SetConfig+0x354>
 8009e80:	40013800 	.word	0x40013800
 8009e84:	40021000 	.word	0x40021000
 8009e88:	40004400 	.word	0x40004400
 8009e8c:	40004800 	.word	0x40004800
 8009e90:	40004c00 	.word	0x40004c00
 8009e94:	40005000 	.word	0x40005000
 8009e98:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	; (8009f0c <UART_SetConfig+0x3a4>)
 8009e9e:	61bb      	str	r3, [r7, #24]
        break;
 8009ea0:	e00c      	b.n	8009ebc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ea2:	f7fd fb17 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 8009ea6:	61b8      	str	r0, [r7, #24]
        break;
 8009ea8:	e008      	b.n	8009ebc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eae:	61bb      	str	r3, [r7, #24]
        break;
 8009eb0:	e004      	b.n	8009ebc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	77bb      	strb	r3, [r7, #30]
        break;
 8009eba:	bf00      	nop
    }

    if (pclk != 0U)
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d018      	beq.n	8009ef4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	085a      	lsrs	r2, r3, #1
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	441a      	add	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b0f      	cmp	r3, #15
 8009eda:	d909      	bls.n	8009ef0 <UART_SetConfig+0x388>
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee2:	d205      	bcs.n	8009ef0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60da      	str	r2, [r3, #12]
 8009eee:	e001      	b.n	8009ef4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009f00:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	007a1200 	.word	0x007a1200

08009f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01a      	beq.n	800a026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a00e:	d10a      	bne.n	800a026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	605a      	str	r2, [r3, #4]
  }
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b098      	sub	sp, #96	; 0x60
 800a058:	af02      	add	r7, sp, #8
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a064:	f7f9 f92a 	bl	80032bc <HAL_GetTick>
 800a068:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b08      	cmp	r3, #8
 800a076:	d12e      	bne.n	800a0d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a080:	2200      	movs	r2, #0
 800a082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f88c 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d021      	beq.n	800a0d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e6      	bne.n	800a092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e062      	b.n	800a19c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d149      	bne.n	800a178 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f856 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d03c      	beq.n	800a178 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	623b      	str	r3, [r7, #32]
   return(result);
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a112:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11c:	633b      	str	r3, [r7, #48]	; 0x30
 800a11e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e6      	bne.n	800a0fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3308      	adds	r3, #8
 800a136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	e853 3f00 	ldrex	r3, [r3]
 800a13e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0301 	bic.w	r3, r3, #1
 800a146:	64bb      	str	r3, [r7, #72]	; 0x48
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3308      	adds	r3, #8
 800a14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a150:	61fa      	str	r2, [r7, #28]
 800a152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a154:	69b9      	ldr	r1, [r7, #24]
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	e841 2300 	strex	r3, r2, [r1]
 800a15c:	617b      	str	r3, [r7, #20]
   return(result);
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e5      	bne.n	800a130 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e011      	b.n	800a19c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2220      	movs	r2, #32
 800a182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3758      	adds	r7, #88	; 0x58
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b4:	e049      	b.n	800a24a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1bc:	d045      	beq.n	800a24a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1be:	f7f9 f87d 	bl	80032bc <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d302      	bcc.n	800a1d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e048      	b.n	800a26a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0304 	and.w	r3, r3, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d031      	beq.n	800a24a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	f003 0308 	and.w	r3, r3, #8
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	d110      	bne.n	800a216 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2208      	movs	r2, #8
 800a1fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f838 	bl	800a272 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2208      	movs	r2, #8
 800a206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e029      	b.n	800a26a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a224:	d111      	bne.n	800a24a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a22e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 f81e 	bl	800a272 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2220      	movs	r2, #32
 800a23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e00f      	b.n	800a26a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4013      	ands	r3, r2
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	429a      	cmp	r2, r3
 800a258:	bf0c      	ite	eq
 800a25a:	2301      	moveq	r3, #1
 800a25c:	2300      	movne	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	461a      	mov	r2, r3
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	429a      	cmp	r2, r3
 800a266:	d0a6      	beq.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a272:	b480      	push	{r7}
 800a274:	b095      	sub	sp, #84	; 0x54
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a28e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	643b      	str	r3, [r7, #64]	; 0x40
 800a29a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a29e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e6      	bne.n	800a27a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	f023 0301 	bic.w	r3, r3, #1
 800a2c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e5      	bne.n	800a2ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d118      	bne.n	800a31a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f023 0310 	bic.w	r3, r3, #16
 800a2fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a306:	61bb      	str	r3, [r7, #24]
 800a308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	613b      	str	r3, [r7, #16]
   return(result);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e6      	bne.n	800a2e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a32e:	bf00      	nop
 800a330:	3754      	adds	r7, #84	; 0x54
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff fbef 	bl	8009b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b088      	sub	sp, #32
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	e853 3f00 	ldrex	r3, [r3]
 800a37a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	61bb      	str	r3, [r7, #24]
 800a38e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	e841 2300 	strex	r3, r2, [r1]
 800a398:	613b      	str	r3, [r7, #16]
   return(result);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e6      	bne.n	800a36e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fbbb 	bl	8009b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b2:	bf00      	nop
 800a3b4:	3720      	adds	r7, #32
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <BUTTON_LowLevelManager>:

/* Functions -----------------------------------------------------------------*/

/******************************************************************************/
void BUTTON_LowLevelManager()
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
  uint8_t currentStates[BUTTONS_NUM];
  
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
 800a3da:	e076      	b.n	800a4ca <BUTTON_LowLevelManager+0xfa>
  {
    currentStates[i] = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	4a3f      	ldr	r2, [pc, #252]	; (800a4dc <BUTTON_LowLevelManager+0x10c>)
 800a3e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	493d      	ldr	r1, [pc, #244]	; (800a4dc <BUTTON_LowLevelManager+0x10c>)
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	440b      	add	r3, r1
 800a3ec:	889b      	ldrh	r3, [r3, #4]
 800a3ee:	7bfc      	ldrb	r4, [r7, #15]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	f7fa fb4e 	bl	8004a94 <HAL_GPIO_ReadPin>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f104 0310 	add.w	r3, r4, #16
 800a400:	443b      	add	r3, r7
 800a402:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    switch (buttonState[i])
 800a406:	7bfb      	ldrb	r3, [r7, #15]
 800a408:	4a35      	ldr	r2, [pc, #212]	; (800a4e0 <BUTTON_LowLevelManager+0x110>)
 800a40a:	5cd3      	ldrb	r3, [r2, r3]
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d850      	bhi.n	800a4b2 <BUTTON_LowLevelManager+0xe2>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <BUTTON_LowLevelManager+0x48>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a429 	.word	0x0800a429
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a463 	.word	0x0800a463
 800a424:	0800a491 	.word	0x0800a491
    {
      case BUTTON_STARTING:
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	3310      	adds	r3, #16
 800a42c:	443b      	add	r3, r7
 800a42e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d13f      	bne.n	800a4b6 <BUTTON_LowLevelManager+0xe6>
        {
          buttonState[i] = BUTTON_NOT_PRESSED;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	4a29      	ldr	r2, [pc, #164]	; (800a4e0 <BUTTON_LowLevelManager+0x110>)
 800a43a:	2101      	movs	r1, #1
 800a43c:	54d1      	strb	r1, [r2, r3]
        } 
        break;
 800a43e:	e03a      	b.n	800a4b6 <BUTTON_LowLevelManager+0xe6>
      
      case BUTTON_NOT_PRESSED:
        if (currentStates[i] == GPIO_BUTTON_PRESSED)
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	3310      	adds	r3, #16
 800a444:	443b      	add	r3, r7
 800a446:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d135      	bne.n	800a4ba <BUTTON_LowLevelManager+0xea>
        {
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	4a23      	ldr	r2, [pc, #140]	; (800a4e0 <BUTTON_LowLevelManager+0x110>)
 800a452:	2102      	movs	r1, #2
 800a454:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <BUTTON_LowLevelManager+0x114>)
 800a45a:	2100      	movs	r1, #0
 800a45c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        break;
 800a460:	e02b      	b.n	800a4ba <BUTTON_LowLevelManager+0xea>
        
      case BUTTON_WAIT_DEBOUNCE:
        if (debounceCounter[i] == DEBOUNCE_TIME_MS)
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <BUTTON_LowLevelManager+0x114>)
 800a466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a46a:	2b64      	cmp	r3, #100	; 0x64
 800a46c:	d127      	bne.n	800a4be <BUTTON_LowLevelManager+0xee>
        {
          if (currentStates[i] == GPIO_BUTTON_PRESSED)
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	3310      	adds	r3, #16
 800a472:	443b      	add	r3, r7
 800a474:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d104      	bne.n	800a486 <BUTTON_LowLevelManager+0xb6>
          {
            buttonState[i] = BUTTON_PRESSED;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <BUTTON_LowLevelManager+0x110>)
 800a480:	2103      	movs	r1, #3
 800a482:	54d1      	strb	r1, [r2, r3]
          else
          {
            buttonState[i] = BUTTON_NOT_PRESSED;
          }
        }
        break;
 800a484:	e01b      	b.n	800a4be <BUTTON_LowLevelManager+0xee>
            buttonState[i] = BUTTON_NOT_PRESSED;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	4a15      	ldr	r2, [pc, #84]	; (800a4e0 <BUTTON_LowLevelManager+0x110>)
 800a48a:	2101      	movs	r1, #1
 800a48c:	54d1      	strb	r1, [r2, r3]
        break;
 800a48e:	e016      	b.n	800a4be <BUTTON_LowLevelManager+0xee>
        
      case BUTTON_PRESSED:
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	3310      	adds	r3, #16
 800a494:	443b      	add	r3, r7
 800a496:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d111      	bne.n	800a4c2 <BUTTON_LowLevelManager+0xf2>
        {
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	4a0f      	ldr	r2, [pc, #60]	; (800a4e0 <BUTTON_LowLevelManager+0x110>)
 800a4a2:	2102      	movs	r1, #2
 800a4a4:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	4a0e      	ldr	r2, [pc, #56]	; (800a4e4 <BUTTON_LowLevelManager+0x114>)
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        } 
        break;
 800a4b0:	e007      	b.n	800a4c2 <BUTTON_LowLevelManager+0xf2>
        
      default:
        break;
 800a4b2:	bf00      	nop
 800a4b4:	e006      	b.n	800a4c4 <BUTTON_LowLevelManager+0xf4>
        break;
 800a4b6:	bf00      	nop
 800a4b8:	e004      	b.n	800a4c4 <BUTTON_LowLevelManager+0xf4>
        break;
 800a4ba:	bf00      	nop
 800a4bc:	e002      	b.n	800a4c4 <BUTTON_LowLevelManager+0xf4>
        break;
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <BUTTON_LowLevelManager+0xf4>
        break;
 800a4c2:	bf00      	nop
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	73fb      	strb	r3, [r7, #15]
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d985      	bls.n	800a3dc <BUTTON_LowLevelManager+0xc>
    }
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd90      	pop	{r4, r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000010 	.word	0x20000010
 800a4e0:	20000684 	.word	0x20000684
 800a4e4:	20000644 	.word	0x20000644

0800a4e8 <BUTTON_HighLevelManager>:



/******************************************************************************/
void BUTTON_HighLevelManager()
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	71fb      	strb	r3, [r7, #7]
 800a4f2:	e03b      	b.n	800a56c <BUTTON_HighLevelManager+0x84>
  {
    if (buttonActions[i] == BUTTON_NONE)
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	4a22      	ldr	r2, [pc, #136]	; (800a580 <BUTTON_HighLevelManager+0x98>)
 800a4f8:	5cd3      	ldrb	r3, [r2, r3]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d133      	bne.n	800a566 <BUTTON_HighLevelManager+0x7e>
    {
      if (waitButtonRelease[i] == 0)
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	4a20      	ldr	r2, [pc, #128]	; (800a584 <BUTTON_HighLevelManager+0x9c>)
 800a502:	5cd3      	ldrb	r3, [r2, r3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <BUTTON_HighLevelManager+0x34>
      {
        if (buttonState[i] == BUTTON_PRESSED)
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <BUTTON_HighLevelManager+0xa0>)
 800a50c:	5cd3      	ldrb	r3, [r2, r3]
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d129      	bne.n	800a566 <BUTTON_HighLevelManager+0x7e>
        {
          waitButtonRelease[i] = 1;
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	4a1b      	ldr	r2, [pc, #108]	; (800a584 <BUTTON_HighLevelManager+0x9c>)
 800a516:	2101      	movs	r1, #1
 800a518:	54d1      	strb	r1, [r2, r3]
 800a51a:	e024      	b.n	800a566 <BUTTON_HighLevelManager+0x7e>
        }
      }
      else
      {
        if (buttonState[i] == BUTTON_NOT_PRESSED)
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	4a1a      	ldr	r2, [pc, #104]	; (800a588 <BUTTON_HighLevelManager+0xa0>)
 800a520:	5cd3      	ldrb	r3, [r2, r3]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d11f      	bne.n	800a566 <BUTTON_HighLevelManager+0x7e>
        {
          waitButtonRelease[i] = 0;
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	4a16      	ldr	r2, [pc, #88]	; (800a584 <BUTTON_HighLevelManager+0x9c>)
 800a52a:	2100      	movs	r1, #0
 800a52c:	54d1      	strb	r1, [r2, r3]

          if (buttonPressCounter[i] >= BUTTONS_VERY_LONG_PRESS_MS)
 800a52e:	79fb      	ldrb	r3, [r7, #7]
 800a530:	4a16      	ldr	r2, [pc, #88]	; (800a58c <BUTTON_HighLevelManager+0xa4>)
 800a532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a536:	f242 720f 	movw	r2, #9999	; 0x270f
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d904      	bls.n	800a548 <BUTTON_HighLevelManager+0x60>
          {
            buttonActions[i] = BUTTON_VERY_LONG_PRESS;
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	4a0f      	ldr	r2, [pc, #60]	; (800a580 <BUTTON_HighLevelManager+0x98>)
 800a542:	2103      	movs	r1, #3
 800a544:	54d1      	strb	r1, [r2, r3]
 800a546:	e00e      	b.n	800a566 <BUTTON_HighLevelManager+0x7e>
          }
          else
          {
            if (buttonPressCounter[i] >= BUTTONS_LONG_PRESS_MS)
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	4a10      	ldr	r2, [pc, #64]	; (800a58c <BUTTON_HighLevelManager+0xa4>)
 800a54c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a550:	2b95      	cmp	r3, #149	; 0x95
 800a552:	d904      	bls.n	800a55e <BUTTON_HighLevelManager+0x76>
            {
              buttonActions[i] = BUTTON_LONG_PRESS;
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	4a0a      	ldr	r2, [pc, #40]	; (800a580 <BUTTON_HighLevelManager+0x98>)
 800a558:	2102      	movs	r1, #2
 800a55a:	54d1      	strb	r1, [r2, r3]
 800a55c:	e003      	b.n	800a566 <BUTTON_HighLevelManager+0x7e>
            }
            else
            {
              buttonActions[i] = BUTTON_SHORT_PRESS;
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	4a07      	ldr	r2, [pc, #28]	; (800a580 <BUTTON_HighLevelManager+0x98>)
 800a562:	2101      	movs	r1, #1
 800a564:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	3301      	adds	r3, #1
 800a56a:	71fb      	strb	r3, [r7, #7]
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b08      	cmp	r3, #8
 800a570:	d9c0      	bls.n	800a4f4 <BUTTON_HighLevelManager+0xc>
          }
        }
      }
    }
  }
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr
 800a580:	20000678 	.word	0x20000678
 800a584:	20000658 	.word	0x20000658
 800a588:	20000684 	.word	0x20000684
 800a58c:	20000664 	.word	0x20000664

0800a590 <BUTTON_Process>:



/******************************************************************************/
void BUTTON_Process()
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  BUTTON_LowLevelManager();
 800a594:	f7ff ff1c 	bl	800a3d0 <BUTTON_LowLevelManager>
  BUTTON_HighLevelManager();
 800a598:	f7ff ffa6 	bl	800a4e8 <BUTTON_HighLevelManager>
}
 800a59c:	bf00      	nop
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <BUTTON_TimerProcess>:



/******************************************************************************/
void BUTTON_TimerProcess()
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	71fb      	strb	r3, [r7, #7]
 800a5aa:	e025      	b.n	800a5f8 <BUTTON_TimerProcess+0x58>
  {
    if (debounceCounter[i] < DEBOUNCE_TIME_MS)
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	4a17      	ldr	r2, [pc, #92]	; (800a60c <BUTTON_TimerProcess+0x6c>)
 800a5b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b4:	2b63      	cmp	r3, #99	; 0x63
 800a5b6:	d808      	bhi.n	800a5ca <BUTTON_TimerProcess+0x2a>
    {
      debounceCounter[i]++;
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	4a14      	ldr	r2, [pc, #80]	; (800a60c <BUTTON_TimerProcess+0x6c>)
 800a5bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a5c0:	3201      	adds	r2, #1
 800a5c2:	b291      	uxth	r1, r2
 800a5c4:	4a11      	ldr	r2, [pc, #68]	; (800a60c <BUTTON_TimerProcess+0x6c>)
 800a5c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (waitButtonRelease[i] == 1)
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	4a10      	ldr	r2, [pc, #64]	; (800a610 <BUTTON_TimerProcess+0x70>)
 800a5ce:	5cd3      	ldrb	r3, [r2, r3]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d109      	bne.n	800a5e8 <BUTTON_TimerProcess+0x48>
    {
      buttonPressCounter[i]++;
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	4a0f      	ldr	r2, [pc, #60]	; (800a614 <BUTTON_TimerProcess+0x74>)
 800a5d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a5dc:	3201      	adds	r2, #1
 800a5de:	b291      	uxth	r1, r2
 800a5e0:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <BUTTON_TimerProcess+0x74>)
 800a5e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a5e6:	e004      	b.n	800a5f2 <BUTTON_TimerProcess+0x52>
    }
    else
    {
      buttonPressCounter[i] = 0;
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	4a0a      	ldr	r2, [pc, #40]	; (800a614 <BUTTON_TimerProcess+0x74>)
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	71fb      	strb	r3, [r7, #7]
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	2b08      	cmp	r3, #8
 800a5fc:	d9d6      	bls.n	800a5ac <BUTTON_TimerProcess+0xc>
    }
  }
}
 800a5fe:	bf00      	nop
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	20000644 	.word	0x20000644
 800a610:	20000658 	.word	0x20000658
 800a614:	20000664 	.word	0x20000664

0800a618 <BUTTON_GetAction>:



/******************************************************************************/
ButtonAction BUTTON_GetAction(uint8_t index)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	71fb      	strb	r3, [r7, #7]
  return buttonActions[index];
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	4a03      	ldr	r2, [pc, #12]	; (800a634 <BUTTON_GetAction+0x1c>)
 800a626:	5cd3      	ldrb	r3, [r2, r3]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	20000678 	.word	0x20000678

0800a638 <BUTTON_ResetActions>:



/******************************************************************************/
void BUTTON_ResetActions()
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a63e:	2300      	movs	r3, #0
 800a640:	71fb      	strb	r3, [r7, #7]
 800a642:	e006      	b.n	800a652 <BUTTON_ResetActions+0x1a>
  {
    buttonActions[i] = BUTTON_NONE;
 800a644:	79fb      	ldrb	r3, [r7, #7]
 800a646:	4a08      	ldr	r2, [pc, #32]	; (800a668 <BUTTON_ResetActions+0x30>)
 800a648:	2100      	movs	r1, #0
 800a64a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	3301      	adds	r3, #1
 800a650:	71fb      	strb	r3, [r7, #7]
 800a652:	79fb      	ldrb	r3, [r7, #7]
 800a654:	2b08      	cmp	r3, #8
 800a656:	d9f5      	bls.n	800a644 <BUTTON_ResetActions+0xc>
  }
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000678 	.word	0x20000678

0800a66c <BUTTON_Init>:



/******************************************************************************/
void BUTTON_Init()
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a672:	2300      	movs	r3, #0
 800a674:	71fb      	strb	r3, [r7, #7]
 800a676:	e018      	b.n	800a6aa <BUTTON_Init+0x3e>
  {
    debounceCounter[i] = 0;
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	4a11      	ldr	r2, [pc, #68]	; (800a6c0 <BUTTON_Init+0x54>)
 800a67c:	2100      	movs	r1, #0
 800a67e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    waitButtonRelease[i] = 0;
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	4a0f      	ldr	r2, [pc, #60]	; (800a6c4 <BUTTON_Init+0x58>)
 800a686:	2100      	movs	r1, #0
 800a688:	54d1      	strb	r1, [r2, r3]
    buttonPressCounter[i] = 0;
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	4a0e      	ldr	r2, [pc, #56]	; (800a6c8 <BUTTON_Init+0x5c>)
 800a68e:	2100      	movs	r1, #0
 800a690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    buttonActions[i] = BUTTON_NONE;
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	4a0d      	ldr	r2, [pc, #52]	; (800a6cc <BUTTON_Init+0x60>)
 800a698:	2100      	movs	r1, #0
 800a69a:	54d1      	strb	r1, [r2, r3]
    buttonState[i] = BUTTON_STARTING;
 800a69c:	79fb      	ldrb	r3, [r7, #7]
 800a69e:	4a0c      	ldr	r2, [pc, #48]	; (800a6d0 <BUTTON_Init+0x64>)
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	71fb      	strb	r3, [r7, #7]
 800a6aa:	79fb      	ldrb	r3, [r7, #7]
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d9e3      	bls.n	800a678 <BUTTON_Init+0xc>
  }
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	20000644 	.word	0x20000644
 800a6c4:	20000658 	.word	0x20000658
 800a6c8:	20000664 	.word	0x20000664
 800a6cc:	20000678 	.word	0x20000678
 800a6d0:	20000684 	.word	0x20000684

0800a6d4 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 800a6d8:	4b43      	ldr	r3, [pc, #268]	; (800a7e8 <ili9488_Init+0x114>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d115      	bne.n	800a710 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 800a6e4:	4b40      	ldr	r3, [pc, #256]	; (800a7e8 <ili9488_Init+0x114>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f043 0301 	orr.w	r3, r3, #1
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	4b3e      	ldr	r3, [pc, #248]	; (800a7e8 <ili9488_Init+0x114>)
 800a6f0:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 800a6f2:	4b3d      	ldr	r3, [pc, #244]	; (800a7e8 <ili9488_Init+0x114>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <ili9488_Init+0x2e>
      LCD_IO_Init();
 800a6fe:	f000 fde7 	bl	800b2d0 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 800a702:	4b39      	ldr	r3, [pc, #228]	; (800a7e8 <ili9488_Init+0x114>)
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	f043 0302 	orr.w	r3, r3, #2
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	4b36      	ldr	r3, [pc, #216]	; (800a7e8 <ili9488_Init+0x114>)
 800a70e:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 800a710:	2069      	movs	r0, #105	; 0x69
 800a712:	f000 fdc6 	bl	800b2a2 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 800a716:	2001      	movs	r0, #1
 800a718:	f000 fe98 	bl	800b44c <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 800a71c:	2005      	movs	r0, #5
 800a71e:	f000 fdc0 	bl	800b2a2 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 800a722:	220f      	movs	r2, #15
 800a724:	4931      	ldr	r1, [pc, #196]	; (800a7ec <ili9488_Init+0x118>)
 800a726:	20e0      	movs	r0, #224	; 0xe0
 800a728:	f000 ff00 	bl	800b52c <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 800a72c:	220f      	movs	r2, #15
 800a72e:	4930      	ldr	r1, [pc, #192]	; (800a7f0 <ili9488_Init+0x11c>)
 800a730:	20e1      	movs	r0, #225	; 0xe1
 800a732:	f000 fefb 	bl	800b52c <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 800a736:	2202      	movs	r2, #2
 800a738:	492e      	ldr	r1, [pc, #184]	; (800a7f4 <ili9488_Init+0x120>)
 800a73a:	20c0      	movs	r0, #192	; 0xc0
 800a73c:	f000 fef6 	bl	800b52c <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 800a740:	2005      	movs	r0, #5
 800a742:	f000 fdae 	bl	800b2a2 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 800a746:	20c1      	movs	r0, #193	; 0xc1
 800a748:	f000 fe80 	bl	800b44c <LCD_IO_WriteCmd8>
 800a74c:	2041      	movs	r0, #65	; 0x41
 800a74e:	f000 fe9f 	bl	800b490 <LCD_IO_WriteData8>
  LCD_Delay(5);
 800a752:	2005      	movs	r0, #5
 800a754:	f000 fda5 	bl	800b2a2 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 800a758:	2203      	movs	r2, #3
 800a75a:	4927      	ldr	r1, [pc, #156]	; (800a7f8 <ili9488_Init+0x124>)
 800a75c:	20c5      	movs	r0, #197	; 0xc5
 800a75e:	f000 fee5 	bl	800b52c <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 800a762:	2005      	movs	r0, #5
 800a764:	f000 fd9d 	bl	800b2a2 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 800a768:	203a      	movs	r0, #58	; 0x3a
 800a76a:	f000 fe6f 	bl	800b44c <LCD_IO_WriteCmd8>
 800a76e:	2066      	movs	r0, #102	; 0x66
 800a770:	f000 fe8e 	bl	800b490 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 800a774:	20b0      	movs	r0, #176	; 0xb0
 800a776:	f000 fe69 	bl	800b44c <LCD_IO_WriteCmd8>
 800a77a:	2080      	movs	r0, #128	; 0x80
 800a77c:	f000 fe88 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 800a780:	20b1      	movs	r0, #177	; 0xb1
 800a782:	f000 fe63 	bl	800b44c <LCD_IO_WriteCmd8>
 800a786:	20a0      	movs	r0, #160	; 0xa0
 800a788:	f000 fe82 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 800a78c:	20b4      	movs	r0, #180	; 0xb4
 800a78e:	f000 fe5d 	bl	800b44c <LCD_IO_WriteCmd8>
 800a792:	2002      	movs	r0, #2
 800a794:	f000 fe7c 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 800a798:	2202      	movs	r2, #2
 800a79a:	4918      	ldr	r1, [pc, #96]	; (800a7fc <ili9488_Init+0x128>)
 800a79c:	20b6      	movs	r0, #182	; 0xb6
 800a79e:	f000 fec5 	bl	800b52c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 800a7a2:	20e9      	movs	r0, #233	; 0xe9
 800a7a4:	f000 fe52 	bl	800b44c <LCD_IO_WriteCmd8>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f000 fe71 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 800a7ae:	2204      	movs	r2, #4
 800a7b0:	4913      	ldr	r1, [pc, #76]	; (800a800 <ili9488_Init+0x12c>)
 800a7b2:	20f7      	movs	r0, #247	; 0xf7
 800a7b4:	f000 feba 	bl	800b52c <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 800a7b8:	2005      	movs	r0, #5
 800a7ba:	f000 fd72 	bl	800b2a2 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 800a7be:	2011      	movs	r0, #17
 800a7c0:	f000 fe44 	bl	800b44c <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 800a7c4:	2078      	movs	r0, #120	; 0x78
 800a7c6:	f000 fd6c 	bl	800b2a2 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 800a7ca:	2029      	movs	r0, #41	; 0x29
 800a7cc:	f000 fe3e 	bl	800b44c <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 800a7d0:	2005      	movs	r0, #5
 800a7d2:	f000 fd66 	bl	800b2a2 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 800a7d6:	2036      	movs	r0, #54	; 0x36
 800a7d8:	f000 fe38 	bl	800b44c <LCD_IO_WriteCmd8>
 800a7dc:	2028      	movs	r0, #40	; 0x28
 800a7de:	f000 fe57 	bl	800b490 <LCD_IO_WriteData8>
}
 800a7e2:	bf00      	nop
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	2000068d 	.word	0x2000068d
 800a7ec:	0800f090 	.word	0x0800f090
 800a7f0:	0800f0a0 	.word	0x0800f0a0
 800a7f4:	0800f0b0 	.word	0x0800f0b0
 800a7f8:	0800f0b4 	.word	0x0800f0b4
 800a7fc:	0800f0b8 	.word	0x0800f0b8
 800a800:	0800f0bc 	.word	0x0800f0bc

0800a804 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 800a808:	2011      	movs	r0, #17
 800a80a:	f000 fe1f 	bl	800b44c <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 800a80e:	2001      	movs	r0, #1
 800a810:	f000 fd52 	bl	800b2b8 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 800a814:	bf00      	nop
 800a816:	bd80      	pop	{r7, pc}

0800a818 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 800a81c:	2010      	movs	r0, #16
 800a81e:	f000 fe15 	bl	800b44c <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 800a822:	2000      	movs	r0, #0
 800a824:	f000 fd48 	bl	800b2b8 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 800a828:	bf00      	nop
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 800a830:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800a834:	4618      	mov	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 800a83e:	b480      	push	{r7}
 800a840:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 800a842:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800a846:	4618      	mov	r0, r3
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 800a85a:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <ili9488_ReadID+0x40>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 800a862:	f7ff ff37 	bl	800a6d4 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 800a866:	1d39      	adds	r1, r7, #4
 800a868:	2300      	movs	r3, #0
 800a86a:	2203      	movs	r2, #3
 800a86c:	2004      	movs	r0, #4
 800a86e:	f000 feab 	bl	800b5c8 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a06      	ldr	r2, [pc, #24]	; (800a894 <ili9488_ReadID+0x44>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d102      	bne.n	800a886 <ili9488_ReadID+0x36>
    return 0x9488;
 800a880:	f249 4388 	movw	r3, #38024	; 0x9488
 800a884:	e000      	b.n	800a888 <ili9488_ReadID+0x38>
  return 0;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2000068d 	.word	0x2000068d
 800a894:	00668054 	.word	0x00668054

0800a898 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	460a      	mov	r2, r1
 800a8a2:	80fb      	strh	r3, [r7, #6]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800a8a8:	202a      	movs	r0, #42	; 0x2a
 800a8aa:	f000 fdcf 	bl	800b44c <LCD_IO_WriteCmd8>
 800a8ae:	88fb      	ldrh	r3, [r7, #6]
 800a8b0:	0a1b      	lsrs	r3, r3, #8
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fdea 	bl	800b490 <LCD_IO_WriteData8>
 800a8bc:	88fb      	ldrh	r3, [r7, #6]
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fde5 	bl	800b490 <LCD_IO_WriteData8>
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	0a1b      	lsrs	r3, r3, #8
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fdde 	bl	800b490 <LCD_IO_WriteData8>
 800a8d4:	88fb      	ldrh	r3, [r7, #6]
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 fdd9 	bl	800b490 <LCD_IO_WriteData8>
 800a8de:	202b      	movs	r0, #43	; 0x2b
 800a8e0:	f000 fdb4 	bl	800b44c <LCD_IO_WriteCmd8>
 800a8e4:	88bb      	ldrh	r3, [r7, #4]
 800a8e6:	0a1b      	lsrs	r3, r3, #8
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fdcf 	bl	800b490 <LCD_IO_WriteData8>
 800a8f2:	88bb      	ldrh	r3, [r7, #4]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fdca 	bl	800b490 <LCD_IO_WriteData8>
 800a8fc:	88bb      	ldrh	r3, [r7, #4]
 800a8fe:	0a1b      	lsrs	r3, r3, #8
 800a900:	b29b      	uxth	r3, r3
 800a902:	b2db      	uxtb	r3, r3
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fdc3 	bl	800b490 <LCD_IO_WriteData8>
 800a90a:	88bb      	ldrh	r3, [r7, #4]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fdbe 	bl	800b490 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	121b      	asrs	r3, r3, #8
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f023 0307 	bic.w	r3, r3, #7
 800a930:	b2db      	uxtb	r3, r3
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fdac 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 800a938:	88fb      	ldrh	r3, [r7, #6]
 800a93a:	10db      	asrs	r3, r3, #3
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	b2db      	uxtb	r3, r3
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fda3 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fd9d 	bl	800b490 <LCD_IO_WriteData8>
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	4603      	mov	r3, r0
 800a966:	80fb      	strh	r3, [r7, #6]
 800a968:	460b      	mov	r3, r1
 800a96a:	80bb      	strh	r3, [r7, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800a970:	202a      	movs	r0, #42	; 0x2a
 800a972:	f000 fd6b 	bl	800b44c <LCD_IO_WriteCmd8>
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	0a1b      	lsrs	r3, r3, #8
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fd86 	bl	800b490 <LCD_IO_WriteData8>
 800a984:	88fb      	ldrh	r3, [r7, #6]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fd81 	bl	800b490 <LCD_IO_WriteData8>
 800a98e:	88fb      	ldrh	r3, [r7, #6]
 800a990:	0a1b      	lsrs	r3, r3, #8
 800a992:	b29b      	uxth	r3, r3
 800a994:	b2db      	uxtb	r3, r3
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fd7a 	bl	800b490 <LCD_IO_WriteData8>
 800a99c:	88fb      	ldrh	r3, [r7, #6]
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fd75 	bl	800b490 <LCD_IO_WriteData8>
 800a9a6:	202b      	movs	r0, #43	; 0x2b
 800a9a8:	f000 fd50 	bl	800b44c <LCD_IO_WriteCmd8>
 800a9ac:	88bb      	ldrh	r3, [r7, #4]
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fd6b 	bl	800b490 <LCD_IO_WriteData8>
 800a9ba:	88bb      	ldrh	r3, [r7, #4]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fd66 	bl	800b490 <LCD_IO_WriteData8>
 800a9c4:	88bb      	ldrh	r3, [r7, #4]
 800a9c6:	0a1b      	lsrs	r3, r3, #8
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fd5f 	bl	800b490 <LCD_IO_WriteData8>
 800a9d2:	88bb      	ldrh	r3, [r7, #4]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fd5a 	bl	800b490 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800a9dc:	202c      	movs	r0, #44	; 0x2c
 800a9de:	f000 fd35 	bl	800b44c <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 800a9e2:	887b      	ldrh	r3, [r7, #2]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff ff99 	bl	800a91c <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	80fb      	strh	r3, [r7, #6]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800aa02:	202a      	movs	r0, #42	; 0x2a
 800aa04:	f000 fd22 	bl	800b44c <LCD_IO_WriteCmd8>
 800aa08:	88fb      	ldrh	r3, [r7, #6]
 800aa0a:	0a1b      	lsrs	r3, r3, #8
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fd3d 	bl	800b490 <LCD_IO_WriteData8>
 800aa16:	88fb      	ldrh	r3, [r7, #6]
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 fd38 	bl	800b490 <LCD_IO_WriteData8>
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	0a1b      	lsrs	r3, r3, #8
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fd31 	bl	800b490 <LCD_IO_WriteData8>
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fd2c 	bl	800b490 <LCD_IO_WriteData8>
 800aa38:	202b      	movs	r0, #43	; 0x2b
 800aa3a:	f000 fd07 	bl	800b44c <LCD_IO_WriteCmd8>
 800aa3e:	88bb      	ldrh	r3, [r7, #4]
 800aa40:	0a1b      	lsrs	r3, r3, #8
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fd22 	bl	800b490 <LCD_IO_WriteData8>
 800aa4c:	88bb      	ldrh	r3, [r7, #4]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 fd1d 	bl	800b490 <LCD_IO_WriteData8>
 800aa56:	88bb      	ldrh	r3, [r7, #4]
 800aa58:	0a1b      	lsrs	r3, r3, #8
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fd16 	bl	800b490 <LCD_IO_WriteData8>
 800aa64:	88bb      	ldrh	r3, [r7, #4]
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fd11 	bl	800b490 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 800aa6e:	f107 010e 	add.w	r1, r7, #14
 800aa72:	2301      	movs	r3, #1
 800aa74:	2201      	movs	r2, #1
 800aa76:	202e      	movs	r0, #46	; 0x2e
 800aa78:	f000 fdb4 	bl	800b5e4 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 800aa7c:	89fb      	ldrh	r3, [r7, #14]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800aa88:	b590      	push	{r4, r7, lr}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	461a      	mov	r2, r3
 800aa96:	4623      	mov	r3, r4
 800aa98:	80fb      	strh	r3, [r7, #6]
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	80bb      	strh	r3, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	807b      	strh	r3, [r7, #2]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800aaa6:	4a2a      	ldr	r2, [pc, #168]	; (800ab50 <ili9488_SetDisplayWindow+0xc8>)
 800aaa8:	88bb      	ldrh	r3, [r7, #4]
 800aaaa:	8013      	strh	r3, [r2, #0]
 800aaac:	88ba      	ldrh	r2, [r7, #4]
 800aaae:	883b      	ldrh	r3, [r7, #0]
 800aab0:	4413      	add	r3, r2
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	4b26      	ldr	r3, [pc, #152]	; (800ab54 <ili9488_SetDisplayWindow+0xcc>)
 800aaba:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800aabc:	202a      	movs	r0, #42	; 0x2a
 800aabe:	f000 fcc5 	bl	800b44c <LCD_IO_WriteCmd8>
 800aac2:	88fb      	ldrh	r3, [r7, #6]
 800aac4:	0a1b      	lsrs	r3, r3, #8
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fce0 	bl	800b490 <LCD_IO_WriteData8>
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 fcdb 	bl	800b490 <LCD_IO_WriteData8>
 800aada:	88fa      	ldrh	r2, [r7, #6]
 800aadc:	887b      	ldrh	r3, [r7, #2]
 800aade:	4413      	add	r3, r2
 800aae0:	3b01      	subs	r3, #1
 800aae2:	121b      	asrs	r3, r3, #8
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fcd2 	bl	800b490 <LCD_IO_WriteData8>
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	887b      	ldrh	r3, [r7, #2]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 fcc7 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800ab02:	202b      	movs	r0, #43	; 0x2b
 800ab04:	f000 fca2 	bl	800b44c <LCD_IO_WriteCmd8>
 800ab08:	88bb      	ldrh	r3, [r7, #4]
 800ab0a:	0a1b      	lsrs	r3, r3, #8
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fcbd 	bl	800b490 <LCD_IO_WriteData8>
 800ab16:	88bb      	ldrh	r3, [r7, #4]
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fcb8 	bl	800b490 <LCD_IO_WriteData8>
 800ab20:	88ba      	ldrh	r2, [r7, #4]
 800ab22:	883b      	ldrh	r3, [r7, #0]
 800ab24:	4413      	add	r3, r2
 800ab26:	3b01      	subs	r3, #1
 800ab28:	121b      	asrs	r3, r3, #8
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fcaf 	bl	800b490 <LCD_IO_WriteData8>
 800ab32:	88bb      	ldrh	r3, [r7, #4]
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	883b      	ldrh	r3, [r7, #0]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	4413      	add	r3, r2
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fca4 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd90      	pop	{r4, r7, pc}
 800ab50:	2000068e 	.word	0x2000068e
 800ab54:	20000690 	.word	0x20000690

0800ab58 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800ab58:	b590      	push	{r4, r7, lr}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	461a      	mov	r2, r3
 800ab66:	4623      	mov	r3, r4
 800ab68:	80fb      	strh	r3, [r7, #6]
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	80bb      	strh	r3, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	807b      	strh	r3, [r7, #2]
 800ab72:	4613      	mov	r3, r2
 800ab74:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 800ab76:	883a      	ldrh	r2, [r7, #0]
 800ab78:	8879      	ldrh	r1, [r7, #2]
 800ab7a:	88b8      	ldrh	r0, [r7, #4]
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2301      	movs	r3, #1
 800ab82:	f000 f820 	bl	800abc6 <ili9488_FillRect>
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd90      	pop	{r4, r7, pc}

0800ab8e <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800ab8e:	b590      	push	{r4, r7, lr}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af02      	add	r7, sp, #8
 800ab94:	4604      	mov	r4, r0
 800ab96:	4608      	mov	r0, r1
 800ab98:	4611      	mov	r1, r2
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	80fb      	strh	r3, [r7, #6]
 800aba0:	4603      	mov	r3, r0
 800aba2:	80bb      	strh	r3, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	807b      	strh	r3, [r7, #2]
 800aba8:	4613      	mov	r3, r2
 800abaa:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 800abac:	883a      	ldrh	r2, [r7, #0]
 800abae:	8879      	ldrh	r1, [r7, #2]
 800abb0:	88b8      	ldrh	r0, [r7, #4]
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	4613      	mov	r3, r2
 800abb8:	2201      	movs	r2, #1
 800abba:	f000 f804 	bl	800abc6 <ili9488_FillRect>
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd90      	pop	{r4, r7, pc}

0800abc6 <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800abc6:	b590      	push	{r4, r7, lr}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	4604      	mov	r4, r0
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	4623      	mov	r3, r4
 800abd6:	80fb      	strh	r3, [r7, #6]
 800abd8:	4603      	mov	r3, r0
 800abda:	80bb      	strh	r3, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	807b      	strh	r3, [r7, #2]
 800abe0:	4613      	mov	r3, r2
 800abe2:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800abe4:	883b      	ldrh	r3, [r7, #0]
 800abe6:	887a      	ldrh	r2, [r7, #2]
 800abe8:	88b9      	ldrh	r1, [r7, #4]
 800abea:	88f8      	ldrh	r0, [r7, #6]
 800abec:	f7ff ff4c 	bl	800aa88 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800abf0:	202c      	movs	r0, #44	; 0x2c
 800abf2:	f000 fc2b 	bl	800b44c <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 800abf6:	887b      	ldrh	r3, [r7, #2]
 800abf8:	883a      	ldrh	r2, [r7, #0]
 800abfa:	fb02 f303 	mul.w	r3, r2, r3
 800abfe:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 800ac00:	e003      	b.n	800ac0a <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 800ac02:	8c3b      	ldrh	r3, [r7, #32]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff fe89 	bl	800a91c <ili9488_write16to24>
  while(XYsize--)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	1e5a      	subs	r2, r3, #1
 800ac0e:	60fa      	str	r2, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1f6      	bne.n	800ac02 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}
	...

0800ac20 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	603a      	str	r2, [r7, #0]
 800ac2a:	80fb      	strh	r3, [r7, #6]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60bb      	str	r3, [r7, #8]
 800ac34:	2300      	movs	r3, #0
 800ac36:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	3316      	adds	r3, #22
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	3317      	adds	r3, #23
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	021b      	lsls	r3, r3, #8
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	88bb      	ldrh	r3, [r7, #4]
 800ac52:	4413      	add	r3, r2
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	3b01      	subs	r3, #1
 800ac58:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	3304      	adds	r3, #4
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	041b      	lsls	r3, r3, #16
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	330a      	adds	r3, #10
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	330c      	adds	r3, #12
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	041b      	lsls	r3, r3, #16
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	085b      	lsrs	r3, r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4413      	add	r3, r2
 800aca2:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 800aca4:	2036      	movs	r0, #54	; 0x36
 800aca6:	f000 fbd1 	bl	800b44c <LCD_IO_WriteCmd8>
 800acaa:	2068      	movs	r0, #104	; 0x68
 800acac:	f000 fbf0 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 800acb0:	202b      	movs	r0, #43	; 0x2b
 800acb2:	f000 fbcb 	bl	800b44c <LCD_IO_WriteCmd8>
 800acb6:	4b20      	ldr	r3, [pc, #128]	; (800ad38 <ili9488_DrawBitmap+0x118>)
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800acbe:	3301      	adds	r3, #1
 800acc0:	121b      	asrs	r3, r3, #8
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fbe3 	bl	800b490 <LCD_IO_WriteData8>
 800acca:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <ili9488_DrawBitmap+0x118>)
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fbda 	bl	800b490 <LCD_IO_WriteData8>
 800acdc:	4b17      	ldr	r3, [pc, #92]	; (800ad3c <ili9488_DrawBitmap+0x11c>)
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800ace4:	3301      	adds	r3, #1
 800ace6:	121b      	asrs	r3, r3, #8
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fbd0 	bl	800b490 <LCD_IO_WriteData8>
 800acf0:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <ili9488_DrawBitmap+0x11c>)
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fbc7 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800ad02:	202c      	movs	r0, #44	; 0x2c
 800ad04:	f000 fba2 	bl	800b44c <LCD_IO_WriteCmd8>
  while(size--)
 800ad08:	e007      	b.n	800ad1a <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fe04 	bl	800a91c <ili9488_write16to24>
    pbmp+= 2;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	3302      	adds	r3, #2
 800ad18:	603b      	str	r3, [r7, #0]
  while(size--)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	1e5a      	subs	r2, r3, #1
 800ad1e:	60fa      	str	r2, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1f2      	bne.n	800ad0a <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 800ad24:	2036      	movs	r0, #54	; 0x36
 800ad26:	f000 fb91 	bl	800b44c <LCD_IO_WriteCmd8>
 800ad2a:	2028      	movs	r0, #40	; 0x28
 800ad2c:	f000 fbb0 	bl	800b490 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20000690 	.word	0x20000690
 800ad3c:	2000068e 	.word	0x2000068e

0800ad40 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 800ad40:	b590      	push	{r4, r7, lr}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	4623      	mov	r3, r4
 800ad50:	80fb      	strh	r3, [r7, #6]
 800ad52:	4603      	mov	r3, r0
 800ad54:	80bb      	strh	r3, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	807b      	strh	r3, [r7, #2]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 800ad5e:	887b      	ldrh	r3, [r7, #2]
 800ad60:	883a      	ldrh	r2, [r7, #0]
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
 800ad66:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800ad68:	883b      	ldrh	r3, [r7, #0]
 800ad6a:	887a      	ldrh	r2, [r7, #2]
 800ad6c:	88b9      	ldrh	r1, [r7, #4]
 800ad6e:	88f8      	ldrh	r0, [r7, #6]
 800ad70:	f7ff fe8a 	bl	800aa88 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800ad74:	202c      	movs	r0, #44	; 0x2c
 800ad76:	f000 fb69 	bl	800b44c <LCD_IO_WriteCmd8>
  while(size--)
 800ad7a:	e007      	b.n	800ad8c <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff fdcb 	bl	800a91c <ili9488_write16to24>
    pdata++;
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	3302      	adds	r3, #2
 800ad8a:	623b      	str	r3, [r7, #32]
  while(size--)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	1e5a      	subs	r2, r3, #1
 800ad90:	60fa      	str	r2, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f2      	bne.n	800ad7c <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800ad96:	bf00      	nop
 800ad98:	bf00      	nop
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd90      	pop	{r4, r7, pc}

0800ada0 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	4611      	mov	r1, r2
 800adac:	461a      	mov	r2, r3
 800adae:	4623      	mov	r3, r4
 800adb0:	80fb      	strh	r3, [r7, #6]
 800adb2:	4603      	mov	r3, r0
 800adb4:	80bb      	strh	r3, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	807b      	strh	r3, [r7, #2]
 800adba:	4613      	mov	r3, r2
 800adbc:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 800adc2:	887b      	ldrh	r3, [r7, #2]
 800adc4:	883a      	ldrh	r2, [r7, #0]
 800adc6:	fb02 f303 	mul.w	r3, r2, r3
 800adca:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800adcc:	883b      	ldrh	r3, [r7, #0]
 800adce:	887a      	ldrh	r2, [r7, #2]
 800add0:	88b9      	ldrh	r1, [r7, #4]
 800add2:	88f8      	ldrh	r0, [r7, #6]
 800add4:	f7ff fe58 	bl	800aa88 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 800add8:	2301      	movs	r3, #1
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	6a39      	ldr	r1, [r7, #32]
 800adde:	202e      	movs	r0, #46	; 0x2e
 800ade0:	f000 fc00 	bl	800b5e4 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800ade4:	bf00      	nop
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd90      	pop	{r4, r7, pc}

0800adec <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	80fb      	strh	r3, [r7, #6]
 800adf6:	460b      	mov	r3, r1
 800adf8:	80bb      	strh	r3, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 800adfe:	4b29      	ldr	r3, [pc, #164]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae00:	885b      	ldrh	r3, [r3, #2]
 800ae02:	88ba      	ldrh	r2, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d104      	bne.n	800ae12 <ili9488_Scroll+0x26>
 800ae08:	4b26      	ldr	r3, [pc, #152]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae0a:	88db      	ldrh	r3, [r3, #6]
 800ae0c:	887a      	ldrh	r2, [r7, #2]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d013      	beq.n	800ae3a <ili9488_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 800ae12:	4a24      	ldr	r2, [pc, #144]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae14:	88bb      	ldrh	r3, [r7, #4]
 800ae16:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 800ae18:	4a22      	ldr	r2, [pc, #136]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae1a:	887b      	ldrh	r3, [r7, #2]
 800ae1c:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 800ae1e:	88ba      	ldrh	r2, [r7, #4]
 800ae20:	887b      	ldrh	r3, [r7, #2]
 800ae22:	4413      	add	r3, r2
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	4b1d      	ldr	r3, [pc, #116]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae2e:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 800ae30:	2203      	movs	r2, #3
 800ae32:	491d      	ldr	r1, [pc, #116]	; (800aea8 <ili9488_Scroll+0xbc>)
 800ae34:	2033      	movs	r0, #51	; 0x33
 800ae36:	f000 fb9d 	bl	800b574 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 800ae3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae3e:	425b      	negs	r3, r3
 800ae40:	4a18      	ldr	r2, [pc, #96]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae42:	8892      	ldrh	r2, [r2, #4]
 800ae44:	fb93 f1f2 	sdiv	r1, r3, r2
 800ae48:	fb01 f202 	mul.w	r2, r1, r2
 800ae4c:	1a9b      	subs	r3, r3, r2
 800ae4e:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 800ae50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	da0a      	bge.n	800ae6e <ili9488_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800ae58:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae5a:	889a      	ldrh	r2, [r3, #4]
 800ae5c:	88fb      	ldrh	r3, [r7, #6]
 800ae5e:	4413      	add	r3, r2
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae64:	885b      	ldrh	r3, [r3, #2]
 800ae66:	4413      	add	r3, r2
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	80fb      	strh	r3, [r7, #6]
 800ae6c:	e005      	b.n	800ae7a <ili9488_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 800ae6e:	4b0d      	ldr	r3, [pc, #52]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae70:	885a      	ldrh	r2, [r3, #2]
 800ae72:	88fb      	ldrh	r3, [r7, #6]
 800ae74:	4413      	add	r3, r2
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 800ae7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae80:	8812      	ldrh	r2, [r2, #0]
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d009      	beq.n	800ae9a <ili9488_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 800ae86:	88fa      	ldrh	r2, [r7, #6]
 800ae88:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae8a:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <ili9488_Scroll+0xb8>)
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	2201      	movs	r2, #1
 800ae92:	4619      	mov	r1, r3
 800ae94:	2037      	movs	r0, #55	; 0x37
 800ae96:	f000 fb1d 	bl	800b4d4 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000694 	.word	0x20000694
 800aea8:	20000696 	.word	0x20000696

0800aeac <__NVIC_EnableIRQ>:
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aeb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	db0b      	blt.n	800aed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	f003 021f 	and.w	r2, r3, #31
 800aec4:	4907      	ldr	r1, [pc, #28]	; (800aee4 <__NVIC_EnableIRQ+0x38>)
 800aec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeca:	095b      	lsrs	r3, r3, #5
 800aecc:	2001      	movs	r0, #1
 800aece:	fa00 f202 	lsl.w	r2, r0, r2
 800aed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	e000e100 	.word	0xe000e100

0800aee8 <__NVIC_SetPriority>:
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	6039      	str	r1, [r7, #0]
 800aef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	db0a      	blt.n	800af12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	490c      	ldr	r1, [pc, #48]	; (800af34 <__NVIC_SetPriority+0x4c>)
 800af02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af06:	0112      	lsls	r2, r2, #4
 800af08:	b2d2      	uxtb	r2, r2
 800af0a:	440b      	add	r3, r1
 800af0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af10:	e00a      	b.n	800af28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	b2da      	uxtb	r2, r3
 800af16:	4908      	ldr	r1, [pc, #32]	; (800af38 <__NVIC_SetPriority+0x50>)
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	f003 030f 	and.w	r3, r3, #15
 800af1e:	3b04      	subs	r3, #4
 800af20:	0112      	lsls	r2, r2, #4
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	440b      	add	r3, r1
 800af26:	761a      	strb	r2, [r3, #24]
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	e000e100 	.word	0xe000e100
 800af38:	e000ed00 	.word	0xe000ed00

0800af3c <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)&SPIX->DR = d8;
 800af46:	4a08      	ldr	r2, [pc, #32]	; (800af68 <LcdWrite8+0x2c>)
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 800af4c:	2000      	movs	r0, #0
 800af4e:	f000 f997 	bl	800b280 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800af52:	bf00      	nop
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <LcdWrite8+0x30>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1fb      	bne.n	800af54 <LcdWrite8+0x18>
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	4001300c 	.word	0x4001300c
 800af6c:	4226011c 	.word	0x4226011c

0800af70 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 800af7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800af82:	619a      	str	r2, [r3, #24]
  *(volatile uint8_t *)&SPIX->DR = cmd8;
 800af84:	4a09      	ldr	r2, [pc, #36]	; (800afac <LcdCmdWrite8+0x3c>)
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 800af8a:	2000      	movs	r0, #0
 800af8c:	f000 f978 	bl	800b280 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800af90:	bf00      	nop
 800af92:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <LcdCmdWrite8+0x40>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1fb      	bne.n	800af92 <LcdCmdWrite8+0x22>
  LCD_RS_DATA;
 800af9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af9e:	2240      	movs	r2, #64	; 0x40
 800afa0:	619a      	str	r2, [r3, #24]
}
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	4001300c 	.word	0x4001300c
 800afb0:	4226011c 	.word	0x4226011c

0800afb4 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 800afb8:	bf00      	nop
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <WaitForDmaEnd+0x1c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1fb      	bne.n	800afba <WaitForDmaEnd+0x6>
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	2000069c 	.word	0x2000069c

0800afd4 <DMA1_Channel3_IRQHandler>:

//-----------------------------------------------------------------------------
/* SPI TX on DMA */

void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 800afd8:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <DMA1_Channel3_IRQHandler+0x80>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d031      	beq.n	800b048 <DMA1_Channel3_IRQHandler+0x74>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 800afe4:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <DMA1_Channel3_IRQHandler+0x80>)
 800afe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afea:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 800afec:	4b1a      	ldr	r3, [pc, #104]	; (800b058 <DMA1_Channel3_IRQHandler+0x84>)
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800aff2:	bf00      	nop
 800aff4:	4b18      	ldr	r3, [pc, #96]	; (800b058 <DMA1_Channel3_IRQHandler+0x84>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1f9      	bne.n	800aff4 <DMA1_Channel3_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 800b000:	4b16      	ldr	r3, [pc, #88]	; (800b05c <DMA1_Channel3_IRQHandler+0x88>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800b006:	bf00      	nop
 800b008:	4b15      	ldr	r3, [pc, #84]	; (800b060 <DMA1_Channel3_IRQHandler+0x8c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1fb      	bne.n	800b008 <DMA1_Channel3_IRQHandler+0x34>
    SPIX->CR1 &= ~SPI_CR1_SPE;
 800b010:	4b14      	ldr	r3, [pc, #80]	; (800b064 <DMA1_Channel3_IRQHandler+0x90>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a13      	ldr	r2, [pc, #76]	; (800b064 <DMA1_Channel3_IRQHandler+0x90>)
 800b016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b01a:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 800b01c:	2003      	movs	r0, #3
 800b01e:	f000 f92f 	bl	800b280 <LCD_IO_Delay>
    SPIX->CR1 |= SPI_CR1_SPE;
 800b022:	4b10      	ldr	r3, [pc, #64]	; (800b064 <DMA1_Channel3_IRQHandler+0x90>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a0f      	ldr	r2, [pc, #60]	; (800b064 <DMA1_Channel3_IRQHandler+0x90>)
 800b028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b02c:	6013      	str	r3, [r2, #0]

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 800b02e:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <DMA1_Channel3_IRQHandler+0x94>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d104      	bne.n	800b040 <DMA1_Channel3_IRQHandler+0x6c>
      LCD_CS_OFF;
 800b036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b03a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b03e:	619a      	str	r2, [r3, #24]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <DMA1_Channel3_IRQHandler+0x94>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 800b046:	e003      	b.n	800b050 <DMA1_Channel3_IRQHandler+0x7c>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 800b048:	4b02      	ldr	r3, [pc, #8]	; (800b054 <DMA1_Channel3_IRQHandler+0x80>)
 800b04a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b04e:	605a      	str	r2, [r3, #4]
}
 800b050:	bf00      	nop
 800b052:	bd80      	pop	{r7, pc}
 800b054:	40020000 	.word	0x40020000
 800b058:	40020030 	.word	0x40020030
 800b05c:	42260084 	.word	0x42260084
 800b060:	4226011c 	.word	0x4226011c
 800b064:	40013000 	.word	0x40013000
 800b068:	2000069c 	.word	0x2000069c

0800b06c <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 800b078:	4b1a      	ldr	r3, [pc, #104]	; (800b0e4 <LCD_IO_WriteMultiData+0x78>)
 800b07a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b07e:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 800b080:	4b19      	ldr	r3, [pc, #100]	; (800b0e8 <LCD_IO_WriteMultiData+0x7c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a18      	ldr	r2, [pc, #96]	; (800b0e8 <LCD_IO_WriteMultiData+0x7c>)
 800b086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08a:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 800b08c:	4b17      	ldr	r3, [pc, #92]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800b092:	bf00      	nop
 800b094:	4b15      	ldr	r3, [pc, #84]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1f9      	bne.n	800b094 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 800b0a0:	4a12      	ldr	r2, [pc, #72]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 800b0a6:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b0a8:	4a11      	ldr	r2, [pc, #68]	; (800b0f0 <LCD_IO_WriteMultiData+0x84>)
 800b0aa:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 800b0ac:	4a0f      	ldr	r2, [pc, #60]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 800b0b2:	4a0e      	ldr	r2, [pc, #56]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a0b      	ldr	r2, [pc, #44]	; (800b0ec <LCD_IO_WriteMultiData+0x80>)
 800b0be:	f043 0301 	orr.w	r3, r3, #1
 800b0c2:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 800b0c4:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <LCD_IO_WriteMultiData+0x88>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <LCD_IO_WriteMultiData+0x7c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a06      	ldr	r2, [pc, #24]	; (800b0e8 <LCD_IO_WriteMultiData+0x7c>)
 800b0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d4:	6013      	str	r3, [r2, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40020000 	.word	0x40020000
 800b0e8:	40013000 	.word	0x40013000
 800b0ec:	40020030 	.word	0x40020030
 800b0f0:	4001300c 	.word	0x4001300c
 800b0f4:	42260084 	.word	0x42260084

0800b0f8 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d108      	bne.n	800b11c <LCD_IO_WriteMultiData8+0x24>
  {
    d8s = *pData;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	781a      	ldrb	r2, [r3, #0]
 800b10e:	4b1f      	ldr	r3, [pc, #124]	; (800b18c <LCD_IO_WriteMultiData8+0x94>)
 800b110:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 800b112:	4b1e      	ldr	r3, [pc, #120]	; (800b18c <LCD_IO_WriteMultiData8+0x94>)
 800b114:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 800b116:	2312      	movs	r3, #18
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	e02f      	b.n	800b17c <LCD_IO_WriteMultiData8+0x84>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 800b11c:	2392      	movs	r3, #146	; 0x92
 800b11e:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 800b120:	e02c      	b.n	800b17c <LCD_IO_WriteMultiData8+0x84>
  {
    if(Size <= DMA_MAXSIZE)
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b128:	4293      	cmp	r3, r2
 800b12a:	d80f      	bhi.n	800b14c <LCD_IO_WriteMultiData8+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800b12c:	4b18      	ldr	r3, [pc, #96]	; (800b190 <LCD_IO_WriteMultiData8+0x98>)
 800b12e:	2201      	movs	r2, #1
 800b130:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	68b9      	ldr	r1, [r7, #8]
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f7ff ff98 	bl	800b06c <LCD_IO_WriteMultiData>
      Size = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d01a      	beq.n	800b17c <LCD_IO_WriteMultiData8+0x84>
        WaitForDmaEnd();
 800b146:	f7ff ff35 	bl	800afb4 <WaitForDmaEnd>
 800b14a:	e017      	b.n	800b17c <LCD_IO_WriteMultiData8+0x84>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800b14c:	4b10      	ldr	r3, [pc, #64]	; (800b190 <LCD_IO_WriteMultiData8+0x98>)
 800b14e:	2202      	movs	r2, #2
 800b150:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7ff ff87 	bl	800b06c <LCD_IO_WriteMultiData>
      if(dinc)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d004      	beq.n	800b16e <LCD_IO_WriteMultiData8+0x76>
        pData+= DMA_MAXSIZE;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b16a:	33fe      	adds	r3, #254	; 0xfe
 800b16c:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800b174:	3bfe      	subs	r3, #254	; 0xfe
 800b176:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800b178:	f7ff ff1c 	bl	800afb4 <WaitForDmaEnd>
  while(Size)
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1cf      	bne.n	800b122 <LCD_IO_WriteMultiData8+0x2a>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200006a0 	.word	0x200006a0
 800b190:	2000069c 	.word	0x2000069c

0800b194 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	881a      	ldrh	r2, [r3, #0]
 800b1aa:	4b31      	ldr	r3, [pc, #196]	; (800b270 <LCD_IO_WriteMultiData16+0xdc>)
 800b1ac:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 800b1ae:	4b30      	ldr	r3, [pc, #192]	; (800b270 <LCD_IO_WriteMultiData16+0xdc>)
 800b1b0:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800b1b2:	f240 5312 	movw	r3, #1298	; 0x512
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	e051      	b.n	800b25e <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 800b1ba:	f240 5392 	movw	r3, #1426	; 0x592
 800b1be:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 800b1c0:	e04d      	b.n	800b25e <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d80f      	bhi.n	800b1ec <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800b1cc:	4b29      	ldr	r3, [pc, #164]	; (800b274 <LCD_IO_WriteMultiData16+0xe0>)
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	68b9      	ldr	r1, [r7, #8]
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff ff48 	bl	800b06c <LCD_IO_WriteMultiData>
      Size = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d03b      	beq.n	800b25e <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 800b1e6:	f7ff fee5 	bl	800afb4 <WaitForDmaEnd>
 800b1ea:	e038      	b.n	800b25e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	4a22      	ldr	r2, [pc, #136]	; (800b278 <LCD_IO_WriteMultiData16+0xe4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d81b      	bhi.n	800b22c <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800b1f4:	4b1f      	ldr	r3, [pc, #124]	; (800b274 <LCD_IO_WriteMultiData16+0xe0>)
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800b200:	3bfe      	subs	r3, #254	; 0xfe
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	4619      	mov	r1, r3
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f7ff ff30 	bl	800b06c <LCD_IO_WriteMultiData>
      if(dinc)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d006      	beq.n	800b220 <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	4b19      	ldr	r3, [pc, #100]	; (800b27c <LCD_IO_WriteMultiData16+0xe8>)
 800b216:	4413      	add	r3, r2
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4413      	add	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 800b220:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b224:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800b226:	f7ff fec5 	bl	800afb4 <WaitForDmaEnd>
 800b22a:	e018      	b.n	800b25e <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <LCD_IO_WriteMultiData16+0xe0>)
 800b22e:	2202      	movs	r2, #2
 800b230:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff ff17 	bl	800b06c <LCD_IO_WriteMultiData>
      if(dinc)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d005      	beq.n	800b250 <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b24a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b24e:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800b256:	3bfe      	subs	r3, #254	; 0xfe
 800b258:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 800b25a:	f7ff feab 	bl	800afb4 <WaitForDmaEnd>
  while(Size)
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ae      	bne.n	800b1c2 <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	200006a2 	.word	0x200006a2
 800b274:	2000069c 	.word	0x2000069c
 800b278:	0001fffb 	.word	0x0001fffb
 800b27c:	7fff0002 	.word	0x7fff0002

0800b280 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  while(c--);
 800b288:	bf00      	nop
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	1e5a      	subs	r2, r3, #1
 800b28e:	607a      	str	r2, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1fa      	bne.n	800b28a <LCD_IO_Delay+0xa>
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b082      	sub	sp, #8
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7f8 f812 	bl	80032d4 <HAL_Delay>
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
    #else
    GPIOX_SET(LCD_BL);
    #endif
  #endif
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHBENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 800b2d4:	4b5a      	ldr	r3, [pc, #360]	; (800b440 <LCD_IO_Init+0x170>)
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	4a59      	ldr	r2, [pc, #356]	; (800b440 <LCD_IO_Init+0x170>)
 800b2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2de:	f043 0301 	orr.w	r3, r3, #1
 800b2e2:	6153      	str	r3, [r2, #20]
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800b2e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b2ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b2f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2f6:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 800b2f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b302:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b306:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 800b308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b30c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b310:	619a      	str	r2, [r3, #24]
  #endif

  LCD_RS_DATA;
 800b312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b316:	2240      	movs	r2, #64	; 0x40
 800b318:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800b31a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b31e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b322:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800b324:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b32e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b336:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 800b338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800b342:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b34a:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800b34c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b356:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800b35a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800b35c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b366:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800b36a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800b36c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b376:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b37a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800b37c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b38a:	6093      	str	r3, [r2, #8]
  GPIOX_SET(LCD_SCK);                   // SCK = 1
 800b38c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b390:	2220      	movs	r2, #32
 800b392:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 800b394:	4b2b      	ldr	r3, [pc, #172]	; (800b444 <LCD_IO_Init+0x174>)
 800b396:	2201      	movs	r2, #1
 800b398:	601a      	str	r2, [r3, #0]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 800b39a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b3a8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800b3ac:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 800b3ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b3b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b3bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3c0:	6013      	str	r3, [r2, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 800b3c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b3cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b3d0:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800b3d4:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 800b3d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b3e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b3e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e8:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 800b3ea:	4b17      	ldr	r3, [pc, #92]	; (800b448 <LCD_IO_Init+0x178>)
 800b3ec:	f240 320f 	movw	r2, #783	; 0x30f
 800b3f0:	601a      	str	r2, [r3, #0]
  #endif // #else LCD_SPI_MODE == 1
  SPIX->CR2 = (7 << SPI_CR2_DS_Pos);
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <LCD_IO_Init+0x178>)
 800b3f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800b3f8:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 800b3fa:	4b13      	ldr	r3, [pc, #76]	; (800b448 <LCD_IO_Init+0x178>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a12      	ldr	r2, [pc, #72]	; (800b448 <LCD_IO_Init+0x178>)
 800b400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b404:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 800b406:	200a      	movs	r0, #10
 800b408:	f7ff ff4b 	bl	800b2a2 <LCD_Delay>
  LCD_RST_ON;
 800b40c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b410:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b414:	619a      	str	r2, [r3, #24]
  LCD_Delay(10);
 800b416:	200a      	movs	r0, #10
 800b418:	f7ff ff43 	bl	800b2a2 <LCD_Delay>
  LCD_RST_OFF;
 800b41c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b424:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(10);
 800b426:	200a      	movs	r0, #10
 800b428:	f7ff ff3b 	bl	800b2a2 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 800b42c:	210f      	movs	r1, #15
 800b42e:	200d      	movs	r0, #13
 800b430:	f7ff fd5a 	bl	800aee8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 800b434:	200d      	movs	r0, #13
 800b436:	f7ff fd39 	bl	800aeac <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800b43a:	bf00      	nop
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40021000 	.word	0x40021000
 800b444:	42420330 	.word	0x42420330
 800b448:	40013000 	.word	0x40013000

0800b44c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800b456:	f7ff fdad 	bl	800afb4 <WaitForDmaEnd>
  LcdSpiMode8();
 800b45a:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <LCD_IO_WriteCmd8+0x40>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	4a0b      	ldr	r2, [pc, #44]	; (800b48c <LCD_IO_WriteCmd8+0x40>)
 800b460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b464:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800b466:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b46e:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fd7c 	bl	800af70 <LcdCmdWrite8>
  LCD_CS_OFF;
 800b478:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b47c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b480:	619a      	str	r2, [r3, #24]
}
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	40013000 	.word	0x40013000

0800b490 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800b49a:	f7ff fd8b 	bl	800afb4 <WaitForDmaEnd>
  LcdSpiMode8();
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <LCD_IO_WriteData8+0x40>)
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	4a0b      	ldr	r2, [pc, #44]	; (800b4d0 <LCD_IO_WriteData8+0x40>)
 800b4a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4a8:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800b4aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	619a      	str	r2, [r3, #24]
  LcdWrite8(Data);
 800b4b4:	79fb      	ldrb	r3, [r7, #7]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff fd40 	bl	800af3c <LcdWrite8>
  LCD_CS_OFF;
 800b4bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b4c4:	619a      	str	r2, [r3, #24]
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40013000 	.word	0x40013000

0800b4d4 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	603a      	str	r2, [r7, #0]
 800b4de:	71fb      	strb	r3, [r7, #7]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 800b4e4:	f7ff fd66 	bl	800afb4 <WaitForDmaEnd>
  LcdSpiMode8();
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	; (800b528 <LCD_IO_WriteCmd8DataFill16+0x54>)
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	4a0e      	ldr	r2, [pc, #56]	; (800b528 <LCD_IO_WriteCmd8DataFill16+0x54>)
 800b4ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4f2:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800b4f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4fc:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fd35 	bl	800af70 <LcdCmdWrite8>
  LcdSpiMode16();
 800b506:	4b08      	ldr	r3, [pc, #32]	; (800b528 <LCD_IO_WriteCmd8DataFill16+0x54>)
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	4a07      	ldr	r2, [pc, #28]	; (800b528 <LCD_IO_WriteCmd8DataFill16+0x54>)
 800b50c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b510:	6053      	str	r3, [r2, #4]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 800b512:	1d3b      	adds	r3, r7, #4
 800b514:	2200      	movs	r2, #0
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff fe3b 	bl	800b194 <LCD_IO_WriteMultiData16>
}
 800b51e:	bf00      	nop
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	40013000 	.word	0x40013000

0800b52c <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800b53a:	f7ff fd3b 	bl	800afb4 <WaitForDmaEnd>
  LcdSpiMode8();
 800b53e:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <LCD_IO_WriteCmd8MultipleData8+0x44>)
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4a0b      	ldr	r2, [pc, #44]	; (800b570 <LCD_IO_WriteCmd8MultipleData8+0x44>)
 800b544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b548:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800b54a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b552:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fd0a 	bl	800af70 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 800b55c:	2201      	movs	r2, #1
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	68b8      	ldr	r0, [r7, #8]
 800b562:	f7ff fdc9 	bl	800b0f8 <LCD_IO_WriteMultiData8>
}
 800b566:	bf00      	nop
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	40013000 	.word	0x40013000

0800b574 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 800b582:	f7ff fd17 	bl	800afb4 <WaitForDmaEnd>
  LcdSpiMode8();
 800b586:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <LCD_IO_WriteCmd8MultipleData16+0x50>)
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	4a0e      	ldr	r2, [pc, #56]	; (800b5c4 <LCD_IO_WriteCmd8MultipleData16+0x50>)
 800b58c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b590:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800b592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59a:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fce6 	bl	800af70 <LcdCmdWrite8>
  LcdSpiMode16();
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <LCD_IO_WriteCmd8MultipleData16+0x50>)
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4a06      	ldr	r2, [pc, #24]	; (800b5c4 <LCD_IO_WriteCmd8MultipleData16+0x50>)
 800b5aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b5ae:	6053      	str	r3, [r2, #4]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	68b8      	ldr	r0, [r7, #8]
 800b5b6:	f7ff fded 	bl	800b194 <LCD_IO_WriteMultiData16>
}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	40013000 	.word	0x40013000

0800b5c8 <LCD_IO_ReadCmd8MultipleData8>:
  LcdCmdWrite16(Cmd);
  LCD_IO_WriteMultiData16(pData, Size, 1);
}

#if LCD_SPI_MODE == 0
__weak void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize) {}
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	607a      	str	r2, [r7, #4]
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73fb      	strb	r3, [r7, #15]
 800b5d8:	bf00      	nop
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <LCD_IO_ReadCmd8MultipleData24to16>:
__weak void LCD_IO_ReadCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
__weak void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	607a      	str	r2, [r7, #4]
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 800b60a:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <BSP_LCD_Init+0x34>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <BSP_LCD_Init+0x38>)
 800b614:	2200      	movs	r2, #0
 800b616:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 800b618:	4b07      	ldr	r3, [pc, #28]	; (800b638 <BSP_LCD_Init+0x38>)
 800b61a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b61e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 800b620:	4b05      	ldr	r3, [pc, #20]	; (800b638 <BSP_LCD_Init+0x38>)
 800b622:	4a06      	ldr	r2, [pc, #24]	; (800b63c <BSP_LCD_Init+0x3c>)
 800b624:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800b62a:	79fb      	ldrb	r3, [r7, #7]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	200000b4 	.word	0x200000b4
 800b638:	200006a4 	.word	0x200006a4
 800b63c:	20000068 	.word	0x20000068

0800b640 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 800b644:	4b03      	ldr	r3, [pc, #12]	; (800b654 <BSP_LCD_GetXSize+0x14>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	4798      	blx	r3
 800b64c:	4603      	mov	r3, r0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	200000b4 	.word	0x200000b4

0800b658 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800b65c:	4b03      	ldr	r3, [pc, #12]	; (800b66c <BSP_LCD_GetYSize+0x14>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	4798      	blx	r3
 800b664:	4603      	mov	r3, r0
}
 800b666:	4618      	mov	r0, r3
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	200000b4 	.word	0x200000b4

0800b670 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800b67a:	88fb      	ldrh	r3, [r7, #6]
 800b67c:	4a03      	ldr	r2, [pc, #12]	; (800b68c <BSP_LCD_SetTextColor+0x1c>)
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	200006a4 	.word	0x200006a4

0800b690 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 800b698:	4a04      	ldr	r2, [pc, #16]	; (800b6ac <BSP_LCD_SetFont+0x1c>)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6093      	str	r3, [r2, #8]
}
 800b69e:	bf00      	nop
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	200006a4 	.word	0x200006a4

0800b6b0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800b6b0:	b5b0      	push	{r4, r5, r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800b6ba:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <BSP_LCD_Clear+0x38>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b6c0:	f7ff ffbe 	bl	800b640 <BSP_LCD_GetXSize>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461d      	mov	r5, r3
 800b6c8:	f7ff ffc6 	bl	800b658 <BSP_LCD_GetYSize>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	2100      	movs	r1, #0
 800b6da:	2000      	movs	r0, #0
 800b6dc:	47a0      	blx	r4
}
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200000b4 	.word	0x200000b4

0800b6ec <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	80fb      	strh	r3, [r7, #6]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	80bb      	strh	r3, [r7, #4]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	70fb      	strb	r3, [r7, #3]
	if (Ascii > 31 && Ascii < 127){
 800b6fe:	78fb      	ldrb	r3, [r7, #3]
 800b700:	2b1f      	cmp	r3, #31
 800b702:	d91c      	bls.n	800b73e <BSP_LCD_DisplayChar+0x52>
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	2b7e      	cmp	r3, #126	; 0x7e
 800b708:	d819      	bhi.n	800b73e <BSP_LCD_DisplayChar+0x52>
		DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800b70a:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <BSP_LCD_DisplayChar+0x5c>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	3b20      	subs	r3, #32
	DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b714:	490c      	ldr	r1, [pc, #48]	; (800b748 <BSP_LCD_DisplayChar+0x5c>)
 800b716:	6889      	ldr	r1, [r1, #8]
 800b718:	88c9      	ldrh	r1, [r1, #6]
		DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800b71a:	fb03 f101 	mul.w	r1, r3, r1
	DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b71e:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <BSP_LCD_DisplayChar+0x5c>)
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	889b      	ldrh	r3, [r3, #4]
 800b724:	3307      	adds	r3, #7
 800b726:	2b00      	cmp	r3, #0
 800b728:	da00      	bge.n	800b72c <BSP_LCD_DisplayChar+0x40>
 800b72a:	3307      	adds	r3, #7
 800b72c:	10db      	asrs	r3, r3, #3
 800b72e:	fb01 f303 	mul.w	r3, r1, r3
		DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800b732:	441a      	add	r2, r3
 800b734:	88b9      	ldrh	r1, [r7, #4]
 800b736:	88fb      	ldrh	r3, [r7, #6]
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 fbe1 	bl	800bf00 <DrawChar>
	}
//	else {
//		DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii- 53297) * DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
	//}
}
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	200006a4 	.word	0x200006a4

0800b74c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800b74c:	b590      	push	{r4, r7, lr}
 800b74e:	b089      	sub	sp, #36	; 0x24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60ba      	str	r2, [r7, #8]
 800b754:	461a      	mov	r2, r3
 800b756:	4603      	mov	r3, r0
 800b758:	81fb      	strh	r3, [r7, #14]
 800b75a:	460b      	mov	r3, r1
 800b75c:	81bb      	strh	r3, [r7, #12]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800b762:	2301      	movs	r3, #1
 800b764:	83fb      	strh	r3, [r7, #30]
 800b766:	2300      	movs	r3, #0
 800b768:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800b76a:	2300      	movs	r3, #0
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	2300      	movs	r3, #0
 800b770:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800b776:	e002      	b.n	800b77e <BSP_LCD_DisplayStringAt+0x32>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	3301      	adds	r3, #1
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	617a      	str	r2, [r7, #20]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1f6      	bne.n	800b778 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800b78a:	f7ff ff59 	bl	800b640 <BSP_LCD_GetXSize>
 800b78e:	4603      	mov	r3, r0
 800b790:	461a      	mov	r2, r3
 800b792:	4b35      	ldr	r3, [pc, #212]	; (800b868 <BSP_LCD_DisplayStringAt+0x11c>)
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	889b      	ldrh	r3, [r3, #4]
 800b798:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d014      	beq.n	800b7d0 <BSP_LCD_DisplayStringAt+0x84>
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	dc23      	bgt.n	800b7f2 <BSP_LCD_DisplayStringAt+0xa6>
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d002      	beq.n	800b7b4 <BSP_LCD_DisplayStringAt+0x68>
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d011      	beq.n	800b7d6 <BSP_LCD_DisplayStringAt+0x8a>
 800b7b2:	e01e      	b.n	800b7f2 <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	4a2b      	ldr	r2, [pc, #172]	; (800b868 <BSP_LCD_DisplayStringAt+0x11c>)
 800b7bc:	6892      	ldr	r2, [r2, #8]
 800b7be:	8892      	ldrh	r2, [r2, #4]
 800b7c0:	fb02 f303 	mul.w	r3, r2, r3
 800b7c4:	085b      	lsrs	r3, r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	89fb      	ldrh	r3, [r7, #14]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	83fb      	strh	r3, [r7, #30]
      break;
 800b7ce:	e013      	b.n	800b7f8 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800b7d0:	89fb      	ldrh	r3, [r7, #14]
 800b7d2:	83fb      	strh	r3, [r7, #30]
      break;
 800b7d4:	e010      	b.n	800b7f8 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	4b22      	ldr	r3, [pc, #136]	; (800b868 <BSP_LCD_DisplayStringAt+0x11c>)
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	889b      	ldrh	r3, [r3, #4]
 800b7e4:	fb12 f303 	smulbb	r3, r2, r3
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	89fb      	ldrh	r3, [r7, #14]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	83fb      	strh	r3, [r7, #30]
      break;
 800b7f0:	e002      	b.n	800b7f8 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 800b7f2:	89fb      	ldrh	r3, [r7, #14]
 800b7f4:	83fb      	strh	r3, [r7, #30]
      break;
 800b7f6:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b7f8:	e012      	b.n	800b820 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	781a      	ldrb	r2, [r3, #0]
 800b7fe:	89b9      	ldrh	r1, [r7, #12]
 800b800:	8bfb      	ldrh	r3, [r7, #30]
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff ff72 	bl	800b6ec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800b808:	4b17      	ldr	r3, [pc, #92]	; (800b868 <BSP_LCD_DisplayStringAt+0x11c>)
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	889a      	ldrh	r2, [r3, #4]
 800b80e:	8bfb      	ldrh	r3, [r7, #30]
 800b810:	4413      	add	r3, r2
 800b812:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	3301      	adds	r3, #1
 800b818:	60bb      	str	r3, [r7, #8]
    i++;
 800b81a:	8bbb      	ldrh	r3, [r7, #28]
 800b81c:	3301      	adds	r3, #1
 800b81e:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	bf14      	ite	ne
 800b828:	2301      	movne	r3, #1
 800b82a:	2300      	moveq	r3, #0
 800b82c:	b2dc      	uxtb	r4, r3
 800b82e:	f7ff ff07 	bl	800b640 <BSP_LCD_GetXSize>
 800b832:	4603      	mov	r3, r0
 800b834:	4619      	mov	r1, r3
 800b836:	8bbb      	ldrh	r3, [r7, #28]
 800b838:	4a0b      	ldr	r2, [pc, #44]	; (800b868 <BSP_LCD_DisplayStringAt+0x11c>)
 800b83a:	6892      	ldr	r2, [r2, #8]
 800b83c:	8892      	ldrh	r2, [r2, #4]
 800b83e:	fb02 f303 	mul.w	r3, r2, r3
 800b842:	1acb      	subs	r3, r1, r3
 800b844:	b29b      	uxth	r3, r3
 800b846:	4a08      	ldr	r2, [pc, #32]	; (800b868 <BSP_LCD_DisplayStringAt+0x11c>)
 800b848:	6892      	ldr	r2, [r2, #8]
 800b84a:	8892      	ldrh	r2, [r2, #4]
 800b84c:	4293      	cmp	r3, r2
 800b84e:	bfac      	ite	ge
 800b850:	2301      	movge	r3, #1
 800b852:	2300      	movlt	r3, #0
 800b854:	b2db      	uxtb	r3, r3
 800b856:	4023      	ands	r3, r4
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1cd      	bne.n	800b7fa <BSP_LCD_DisplayStringAt+0xae>
  }
}
 800b85e:	bf00      	nop
 800b860:	bf00      	nop
 800b862:	3724      	adds	r7, #36	; 0x24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd90      	pop	{r4, r7, pc}
 800b868:	200006a4 	.word	0x200006a4

0800b86c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	80fb      	strh	r3, [r7, #6]
 800b876:	460b      	mov	r3, r1
 800b878:	80bb      	strh	r3, [r7, #4]
 800b87a:	4613      	mov	r3, r2
 800b87c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800b87e:	4b08      	ldr	r3, [pc, #32]	; (800b8a0 <BSP_LCD_DrawPixel+0x34>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d006      	beq.n	800b896 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 800b888:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <BSP_LCD_DrawPixel+0x34>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	887a      	ldrh	r2, [r7, #2]
 800b890:	88b9      	ldrh	r1, [r7, #4]
 800b892:	88f8      	ldrh	r0, [r7, #6]
 800b894:	4798      	blx	r3
  }
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	200000b4 	.word	0x200000b4

0800b8a4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800b8a4:	b590      	push	{r4, r7, lr}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	80fb      	strh	r3, [r7, #6]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	80bb      	strh	r3, [r7, #4]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800b8ba:	4b15      	ldr	r3, [pc, #84]	; (800b910 <BSP_LCD_DrawHLine+0x6c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00a      	beq.n	800b8da <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800b8c4:	4b12      	ldr	r3, [pc, #72]	; (800b910 <BSP_LCD_DrawHLine+0x6c>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6a1c      	ldr	r4, [r3, #32]
 800b8ca:	4b12      	ldr	r3, [pc, #72]	; (800b914 <BSP_LCD_DrawHLine+0x70>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	b298      	uxth	r0, r3
 800b8d0:	887b      	ldrh	r3, [r7, #2]
 800b8d2:	88ba      	ldrh	r2, [r7, #4]
 800b8d4:	88f9      	ldrh	r1, [r7, #6]
 800b8d6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800b8d8:	e015      	b.n	800b906 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800b8da:	2300      	movs	r3, #0
 800b8dc:	60fb      	str	r3, [r7, #12]
 800b8de:	e00e      	b.n	800b8fe <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	88fb      	ldrh	r3, [r7, #6]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	4a0a      	ldr	r2, [pc, #40]	; (800b914 <BSP_LCD_DrawHLine+0x70>)
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	b292      	uxth	r2, r2
 800b8f0:	88b9      	ldrh	r1, [r7, #4]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ffba 	bl	800b86c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	60fb      	str	r3, [r7, #12]
 800b8fe:	887b      	ldrh	r3, [r7, #2]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	429a      	cmp	r2, r3
 800b904:	d3ec      	bcc.n	800b8e0 <BSP_LCD_DrawHLine+0x3c>
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd90      	pop	{r4, r7, pc}
 800b90e:	bf00      	nop
 800b910:	200000b4 	.word	0x200000b4
 800b914:	200006a4 	.word	0x200006a4

0800b918 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	80fb      	strh	r3, [r7, #6]
 800b922:	460b      	mov	r3, r1
 800b924:	80bb      	strh	r3, [r7, #4]
 800b926:	4613      	mov	r3, r2
 800b928:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 800b92e:	4b15      	ldr	r3, [pc, #84]	; (800b984 <BSP_LCD_DrawVLine+0x6c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00a      	beq.n	800b94e <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800b938:	4b12      	ldr	r3, [pc, #72]	; (800b984 <BSP_LCD_DrawVLine+0x6c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b93e:	4b12      	ldr	r3, [pc, #72]	; (800b988 <BSP_LCD_DrawVLine+0x70>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	b298      	uxth	r0, r3
 800b944:	887b      	ldrh	r3, [r7, #2]
 800b946:	88ba      	ldrh	r2, [r7, #4]
 800b948:	88f9      	ldrh	r1, [r7, #6]
 800b94a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 800b94c:	e015      	b.n	800b97a <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e00e      	b.n	800b972 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	b29a      	uxth	r2, r3
 800b958:	88bb      	ldrh	r3, [r7, #4]
 800b95a:	4413      	add	r3, r2
 800b95c:	b299      	uxth	r1, r3
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <BSP_LCD_DrawVLine+0x70>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	b29a      	uxth	r2, r3
 800b964:	88fb      	ldrh	r3, [r7, #6]
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff ff80 	bl	800b86c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3301      	adds	r3, #1
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	887b      	ldrh	r3, [r7, #2]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	429a      	cmp	r2, r3
 800b978:	d3ec      	bcc.n	800b954 <BSP_LCD_DrawVLine+0x3c>
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd90      	pop	{r4, r7, pc}
 800b982:	bf00      	nop
 800b984:	200000b4 	.word	0x200000b4
 800b988:	200006a4 	.word	0x200006a4

0800b98c <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b08b      	sub	sp, #44	; 0x2c
 800b990:	af00      	add	r7, sp, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	461a      	mov	r2, r3
 800b99a:	4623      	mov	r3, r4
 800b99c:	80fb      	strh	r3, [r7, #6]
 800b99e:	4603      	mov	r3, r0
 800b9a0:	80bb      	strh	r3, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	807b      	strh	r3, [r7, #2]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	823b      	strh	r3, [r7, #16]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	81fb      	strh	r3, [r7, #14]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	847b      	strh	r3, [r7, #34]	; 0x22
 800b9be:	2300      	movs	r3, #0
 800b9c0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	83fb      	strh	r3, [r7, #30]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	83bb      	strh	r3, [r7, #28]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	837b      	strh	r3, [r7, #26]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	833b      	strh	r3, [r7, #24]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	82fb      	strh	r3, [r7, #22]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800b9de:	887a      	ldrh	r2, [r7, #2]
 800b9e0:	88fb      	ldrh	r3, [r7, #6]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfb8      	it	lt
 800b9e8:	425b      	neglt	r3, r3
 800b9ea:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800b9ec:	883a      	ldrh	r2, [r7, #0]
 800b9ee:	88bb      	ldrh	r3, [r7, #4]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bfb8      	it	lt
 800b9f6:	425b      	neglt	r3, r3
 800b9f8:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800b9fa:	88fb      	ldrh	r3, [r7, #6]
 800b9fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800b9fe:	88bb      	ldrh	r3, [r7, #4]
 800ba00:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800ba02:	887a      	ldrh	r2, [r7, #2]
 800ba04:	88fb      	ldrh	r3, [r7, #6]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d304      	bcc.n	800ba14 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	843b      	strh	r3, [r7, #32]
 800ba12:	e005      	b.n	800ba20 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800ba14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba18:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800ba1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba1e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800ba20:	883a      	ldrh	r2, [r7, #0]
 800ba22:	88bb      	ldrh	r3, [r7, #4]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d304      	bcc.n	800ba32 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	83bb      	strh	r3, [r7, #28]
 800ba30:	e005      	b.n	800ba3e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800ba32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba36:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800ba38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba3c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800ba3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ba42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	db10      	blt.n	800ba6c <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800ba4e:	2300      	movs	r3, #0
 800ba50:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800ba52:	8a3b      	ldrh	r3, [r7, #16]
 800ba54:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800ba56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ba5a:	0fda      	lsrs	r2, r3, #31
 800ba5c:	4413      	add	r3, r2
 800ba5e:	105b      	asrs	r3, r3, #1
 800ba60:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800ba62:	89fb      	ldrh	r3, [r7, #14]
 800ba64:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800ba66:	8a3b      	ldrh	r3, [r7, #16]
 800ba68:	82bb      	strh	r3, [r7, #20]
 800ba6a:	e00f      	b.n	800ba8c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800ba70:	2300      	movs	r3, #0
 800ba72:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800ba74:	89fb      	ldrh	r3, [r7, #14]
 800ba76:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800ba78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba7c:	0fda      	lsrs	r2, r3, #31
 800ba7e:	4413      	add	r3, r2
 800ba80:	105b      	asrs	r3, r3, #1
 800ba82:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 800ba84:	8a3b      	ldrh	r3, [r7, #16]
 800ba86:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800ba88:	89fb      	ldrh	r3, [r7, #14]
 800ba8a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	827b      	strh	r3, [r7, #18]
 800ba90:	e031      	b.n	800baf6 <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 800ba92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba94:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ba96:	4a1d      	ldr	r2, [pc, #116]	; (800bb0c <BSP_LCD_DrawLine+0x180>)
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	b292      	uxth	r2, r2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff fee5 	bl	800b86c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800baa2:	8b3a      	ldrh	r2, [r7, #24]
 800baa4:	8afb      	ldrh	r3, [r7, #22]
 800baa6:	4413      	add	r3, r2
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800baac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800bab0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	db0e      	blt.n	800bad6 <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 800bab8:	8b3a      	ldrh	r2, [r7, #24]
 800baba:	8b7b      	ldrh	r3, [r7, #26]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	b29b      	uxth	r3, r3
 800bac0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800bac2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bac6:	4413      	add	r3, r2
 800bac8:	b29b      	uxth	r3, r3
 800baca:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 800bacc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bace:	8bfb      	ldrh	r3, [r7, #30]
 800bad0:	4413      	add	r3, r2
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800bad6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bad8:	8c3b      	ldrh	r3, [r7, #32]
 800bada:	4413      	add	r3, r2
 800badc:	b29b      	uxth	r3, r3
 800bade:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800bae0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bae2:	8bbb      	ldrh	r3, [r7, #28]
 800bae4:	4413      	add	r3, r2
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800baea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	3301      	adds	r3, #1
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	827b      	strh	r3, [r7, #18]
 800baf6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bafa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	ddc7      	ble.n	800ba92 <BSP_LCD_DrawLine+0x106>
  }
}
 800bb02:	bf00      	nop
 800bb04:	bf00      	nop
 800bb06:	372c      	adds	r7, #44	; 0x2c
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd90      	pop	{r4, r7, pc}
 800bb0c:	200006a4 	.word	0x200006a4

0800bb10 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800bb10:	b590      	push	{r4, r7, lr}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4623      	mov	r3, r4
 800bb20:	80fb      	strh	r3, [r7, #6]
 800bb22:	4603      	mov	r3, r0
 800bb24:	80bb      	strh	r3, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	807b      	strh	r3, [r7, #2]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800bb2e:	887a      	ldrh	r2, [r7, #2]
 800bb30:	88b9      	ldrh	r1, [r7, #4]
 800bb32:	88fb      	ldrh	r3, [r7, #6]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff feb5 	bl	800b8a4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 800bb3a:	88ba      	ldrh	r2, [r7, #4]
 800bb3c:	883b      	ldrh	r3, [r7, #0]
 800bb3e:	4413      	add	r3, r2
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	3b01      	subs	r3, #1
 800bb44:	b299      	uxth	r1, r3
 800bb46:	887a      	ldrh	r2, [r7, #2]
 800bb48:	88fb      	ldrh	r3, [r7, #6]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff feaa 	bl	800b8a4 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800bb50:	883a      	ldrh	r2, [r7, #0]
 800bb52:	88b9      	ldrh	r1, [r7, #4]
 800bb54:	88fb      	ldrh	r3, [r7, #6]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff fede 	bl	800b918 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 800bb5c:	88fa      	ldrh	r2, [r7, #6]
 800bb5e:	887b      	ldrh	r3, [r7, #2]
 800bb60:	4413      	add	r3, r2
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	3b01      	subs	r3, #1
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	883a      	ldrh	r2, [r7, #0]
 800bb6a:	88b9      	ldrh	r1, [r7, #4]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff fed3 	bl	800b918 <BSP_LCD_DrawVLine>
}
 800bb72:	bf00      	nop
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd90      	pop	{r4, r7, pc}
	...

0800bb7c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	80fb      	strh	r3, [r7, #6]
 800bb86:	460b      	mov	r3, r1
 800bb88:	80bb      	strh	r3, [r7, #4]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800bb8e:	887b      	ldrh	r3, [r7, #2]
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	f1c3 0303 	rsb	r3, r3, #3
 800bb96:	617b      	str	r3, [r7, #20]
  CurX = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800bb9c:	887b      	ldrh	r3, [r7, #2]
 800bb9e:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 800bba0:	e097      	b.n	800bcd2 <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	4413      	add	r3, r2
 800bbaa:	b298      	uxth	r0, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	88ba      	ldrh	r2, [r7, #4]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	4a4c      	ldr	r2, [pc, #304]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bbb8:	6812      	ldr	r2, [r2, #0]
 800bbba:	b292      	uxth	r2, r2
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	f7ff fe55 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	88fa      	ldrh	r2, [r7, #6]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	b298      	uxth	r0, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	88ba      	ldrh	r2, [r7, #4]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4a44      	ldr	r2, [pc, #272]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	b292      	uxth	r2, r2
 800bbdc:	4619      	mov	r1, r3
 800bbde:	f7ff fe45 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	4413      	add	r3, r2
 800bbea:	b298      	uxth	r0, r3
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	88ba      	ldrh	r2, [r7, #4]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4a3c      	ldr	r2, [pc, #240]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bbf8:	6812      	ldr	r2, [r2, #0]
 800bbfa:	b292      	uxth	r2, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	f7ff fe35 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	b298      	uxth	r0, r3
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	88ba      	ldrh	r2, [r7, #4]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	4a34      	ldr	r2, [pc, #208]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bc18:	6812      	ldr	r2, [r2, #0]
 800bc1a:	b292      	uxth	r2, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f7ff fe25 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	88fb      	ldrh	r3, [r7, #6]
 800bc28:	4413      	add	r3, r2
 800bc2a:	b298      	uxth	r0, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	88bb      	ldrh	r3, [r7, #4]
 800bc32:	4413      	add	r3, r2
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	4a2c      	ldr	r2, [pc, #176]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bc38:	6812      	ldr	r2, [r2, #0]
 800bc3a:	b292      	uxth	r2, r2
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	f7ff fe15 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	88fa      	ldrh	r2, [r7, #6]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	b298      	uxth	r0, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	88bb      	ldrh	r3, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	4a24      	ldr	r2, [pc, #144]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f7ff fe05 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	4413      	add	r3, r2
 800bc6a:	b298      	uxth	r0, r3
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	88bb      	ldrh	r3, [r7, #4]
 800bc72:	4413      	add	r3, r2
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	4a1c      	ldr	r2, [pc, #112]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bc78:	6812      	ldr	r2, [r2, #0]
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f7ff fdf5 	bl	800b86c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	88fa      	ldrh	r2, [r7, #6]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	b298      	uxth	r0, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	88bb      	ldrh	r3, [r7, #4]
 800bc92:	4413      	add	r3, r2
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	4a14      	ldr	r2, [pc, #80]	; (800bce8 <BSP_LCD_DrawCircle+0x16c>)
 800bc98:	6812      	ldr	r2, [r2, #0]
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	f7ff fde5 	bl	800b86c <BSP_LCD_DrawPixel>

    if (D < 0)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	da06      	bge.n	800bcb6 <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	009a      	lsls	r2, r3, #2
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	4413      	add	r3, r2
 800bcb0:	3306      	adds	r3, #6
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	e00a      	b.n	800bccc <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	009a      	lsls	r2, r3, #2
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	330a      	adds	r3, #10
 800bcc4:	617b      	str	r3, [r7, #20]
      CurY--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	f67f af63 	bls.w	800bba2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800bcdc:	bf00      	nop
 800bcde:	bf00      	nop
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200006a4 	.word	0x200006a4

0800bcec <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	603a      	str	r2, [r7, #0]
 800bcf6:	80fb      	strh	r3, [r7, #6]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	3312      	adds	r3, #18
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	3313      	adds	r3, #19
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	021b      	lsls	r3, r3, #8
 800bd14:	441a      	add	r2, r3
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	3314      	adds	r3, #20
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	041b      	lsls	r3, r3, #16
 800bd1e:	441a      	add	r2, r3
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	3315      	adds	r3, #21
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	061b      	lsls	r3, r3, #24
 800bd28:	4413      	add	r3, r2
 800bd2a:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	3316      	adds	r3, #22
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	3317      	adds	r3, #23
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	441a      	add	r2, r3
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	3318      	adds	r3, #24
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	041b      	lsls	r3, r3, #16
 800bd46:	441a      	add	r2, r3
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	3319      	adds	r3, #25
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	061b      	lsls	r3, r3, #24
 800bd50:	4413      	add	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	88b9      	ldrh	r1, [r7, #4]
 800bd5e:	88f8      	ldrh	r0, [r7, #6]
 800bd60:	f000 f9c0 	bl	800c0e4 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 800bd64:	4b0d      	ldr	r3, [pc, #52]	; (800bd9c <BSP_LCD_DrawBitmap+0xb0>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d006      	beq.n	800bd7c <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800bd6e:	4b0b      	ldr	r3, [pc, #44]	; (800bd9c <BSP_LCD_DrawBitmap+0xb0>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd74:	88b9      	ldrh	r1, [r7, #4]
 800bd76:	88f8      	ldrh	r0, [r7, #6]
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800bd7c:	f7ff fc60 	bl	800b640 <BSP_LCD_GetXSize>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461c      	mov	r4, r3
 800bd84:	f7ff fc68 	bl	800b658 <BSP_LCD_GetYSize>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f000 f9a8 	bl	800c0e4 <SetDisplayWindow>
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd90      	pop	{r4, r7, pc}
 800bd9c:	200000b4 	.word	0x200000b4

0800bda0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800bda0:	b5b0      	push	{r4, r5, r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	4611      	mov	r1, r2
 800bdac:	461a      	mov	r2, r3
 800bdae:	4623      	mov	r3, r4
 800bdb0:	80fb      	strh	r3, [r7, #6]
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	80bb      	strh	r3, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	807b      	strh	r3, [r7, #2]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 800bdbe:	4b08      	ldr	r3, [pc, #32]	; (800bde0 <BSP_LCD_FillRect+0x40>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bdc4:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <BSP_LCD_FillRect+0x44>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	883d      	ldrh	r5, [r7, #0]
 800bdcc:	887a      	ldrh	r2, [r7, #2]
 800bdce:	88b9      	ldrh	r1, [r7, #4]
 800bdd0:	88f8      	ldrh	r0, [r7, #6]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	462b      	mov	r3, r5
 800bdd6:	47a0      	blx	r4
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bdb0      	pop	{r4, r5, r7, pc}
 800bde0:	200000b4 	.word	0x200000b4
 800bde4:	200006a4 	.word	0x200006a4

0800bde8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	80fb      	strh	r3, [r7, #6]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	80bb      	strh	r3, [r7, #4]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800bdfa:	887b      	ldrh	r3, [r7, #2]
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	f1c3 0303 	rsb	r3, r3, #3
 800be02:	617b      	str	r3, [r7, #20]

  CurX = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800be08:	887b      	ldrh	r3, [r7, #2]
 800be0a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800be0c:	4b3b      	ldr	r3, [pc, #236]	; (800befc <BSP_LCD_FillCircle+0x114>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	b29b      	uxth	r3, r3
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff fc2c 	bl	800b670 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 800be18:	e061      	b.n	800bede <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d021      	beq.n	800be64 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	b29b      	uxth	r3, r3
 800be24:	88fa      	ldrh	r2, [r7, #6]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	b298      	uxth	r0, r3
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	88bb      	ldrh	r3, [r7, #4]
 800be30:	4413      	add	r3, r2
 800be32:	b299      	uxth	r1, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	b29b      	uxth	r3, r3
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	461a      	mov	r2, r3
 800be3e:	f7ff fd31 	bl	800b8a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	b29b      	uxth	r3, r3
 800be46:	88fa      	ldrh	r2, [r7, #6]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	b298      	uxth	r0, r3
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	88ba      	ldrh	r2, [r7, #4]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	b299      	uxth	r1, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	461a      	mov	r2, r3
 800be60:	f7ff fd20 	bl	800b8a4 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d021      	beq.n	800beae <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	88fa      	ldrh	r2, [r7, #6]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	b298      	uxth	r0, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	b29b      	uxth	r3, r3
 800be78:	88ba      	ldrh	r2, [r7, #4]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	b299      	uxth	r1, r3
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	b29b      	uxth	r3, r3
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	b29b      	uxth	r3, r3
 800be86:	461a      	mov	r2, r3
 800be88:	f7ff fd0c 	bl	800b8a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	88fa      	ldrh	r2, [r7, #6]
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	b298      	uxth	r0, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	b29a      	uxth	r2, r3
 800be9a:	88bb      	ldrh	r3, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	b299      	uxth	r1, r3
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	f7ff fcfb 	bl	800b8a4 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	da06      	bge.n	800bec2 <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	009a      	lsls	r2, r3, #2
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	4413      	add	r3, r2
 800bebc:	3306      	adds	r3, #6
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e00a      	b.n	800bed8 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	009a      	lsls	r2, r3, #2
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	4413      	add	r3, r2
 800bece:	330a      	adds	r3, #10
 800bed0:	617b      	str	r3, [r7, #20]
      CurY--;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	3301      	adds	r3, #1
 800bedc:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d999      	bls.n	800be1a <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800bee6:	887a      	ldrh	r2, [r7, #2]
 800bee8:	88b9      	ldrh	r1, [r7, #4]
 800beea:	88fb      	ldrh	r3, [r7, #6]
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff fe45 	bl	800bb7c <BSP_LCD_DrawCircle>
}
 800bef2:	bf00      	nop
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200006a4 	.word	0x200006a4

0800bf00 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	4603      	mov	r3, r0
 800bf08:	603a      	str	r2, [r7, #0]
 800bf0a:	80fb      	strh	r3, [r7, #6]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	627b      	str	r3, [r7, #36]	; 0x24
 800bf14:	2300      	movs	r3, #0
 800bf16:	623b      	str	r3, [r7, #32]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	82fb      	strh	r3, [r7, #22]
 800bf20:	2300      	movs	r3, #0
 800bf22:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 800bf30:	4b63      	ldr	r3, [pc, #396]	; (800c0c0 <DrawChar+0x1c0>)
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	88db      	ldrh	r3, [r3, #6]
 800bf36:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 800bf38:	4b61      	ldr	r3, [pc, #388]	; (800c0c0 <DrawChar+0x1c0>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	889b      	ldrh	r3, [r3, #4]
 800bf3e:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 800bf40:	8afa      	ldrh	r2, [r7, #22]
 800bf42:	8abb      	ldrh	r3, [r7, #20]
 800bf44:	fb12 f303 	smulbb	r3, r2, r3
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	331b      	adds	r3, #27
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	4a5d      	ldr	r2, [pc, #372]	; (800c0c4 <DrawChar+0x1c4>)
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800bf56:	8afb      	ldrh	r3, [r7, #22]
 800bf58:	8aba      	ldrh	r2, [r7, #20]
 800bf5a:	fb02 f303 	mul.w	r3, r2, r3
 800bf5e:	331b      	adds	r3, #27
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	141a      	asrs	r2, r3, #16
 800bf64:	4b58      	ldr	r3, [pc, #352]	; (800c0c8 <DrawChar+0x1c8>)
 800bf66:	b292      	uxth	r2, r2
 800bf68:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 800bf6a:	4b58      	ldr	r3, [pc, #352]	; (800c0cc <DrawChar+0x1cc>)
 800bf6c:	2236      	movs	r2, #54	; 0x36
 800bf6e:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800bf70:	4a57      	ldr	r2, [pc, #348]	; (800c0d0 <DrawChar+0x1d0>)
 800bf72:	8abb      	ldrh	r3, [r7, #20]
 800bf74:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800bf76:	8abb      	ldrh	r3, [r7, #20]
 800bf78:	141a      	asrs	r2, r3, #16
 800bf7a:	4b56      	ldr	r3, [pc, #344]	; (800c0d4 <DrawChar+0x1d4>)
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800bf80:	4a55      	ldr	r2, [pc, #340]	; (800c0d8 <DrawChar+0x1d8>)
 800bf82:	8afb      	ldrh	r3, [r7, #22]
 800bf84:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800bf86:	8afb      	ldrh	r3, [r7, #22]
 800bf88:	141a      	asrs	r2, r3, #16
 800bf8a:	4b54      	ldr	r3, [pc, #336]	; (800c0dc <DrawChar+0x1dc>)
 800bf8c:	b292      	uxth	r2, r2
 800bf8e:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 800bf90:	8abb      	ldrh	r3, [r7, #20]
 800bf92:	3307      	adds	r3, #7
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	da00      	bge.n	800bf9a <DrawChar+0x9a>
 800bf98:	3307      	adds	r3, #7
 800bf9a:	10db      	asrs	r3, r3, #3
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	8abb      	ldrh	r3, [r7, #20]
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800bfaa:	2300      	movs	r3, #0
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
 800bfae:	e078      	b.n	800c0a2 <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800bfb0:	8abb      	ldrh	r3, [r7, #20]
 800bfb2:	3307      	adds	r3, #7
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	da00      	bge.n	800bfba <DrawChar+0xba>
 800bfb8:	3307      	adds	r3, #7
 800bfba:	10db      	asrs	r3, r3, #3
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	fb02 f303 	mul.w	r3, r2, r3
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 800bfca:	8abb      	ldrh	r3, [r7, #20]
 800bfcc:	3b11      	subs	r3, #17
 800bfce:	2b07      	cmp	r3, #7
 800bfd0:	d80c      	bhi.n	800bfec <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	041a      	lsls	r2, r3, #16
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	021b      	lsls	r3, r3, #8
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	3202      	adds	r2, #2
 800bfe6:	7812      	ldrb	r2, [r2, #0]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 800bfec:	8abb      	ldrh	r3, [r7, #20]
 800bfee:	3b09      	subs	r3, #9
 800bff0:	2b07      	cmp	r3, #7
 800bff2:	d807      	bhi.n	800c004 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	021b      	lsls	r3, r3, #8
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	3201      	adds	r2, #1
 800bffe:	7812      	ldrb	r2, [r2, #0]
 800c000:	4313      	orrs	r3, r2
 800c002:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 800c004:	8abb      	ldrh	r3, [r7, #20]
 800c006:	3b01      	subs	r3, #1
 800c008:	2b07      	cmp	r3, #7
 800c00a:	d802      	bhi.n	800c012 <DrawChar+0x112>
    {
      line =  pchar[0];
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800c012:	2300      	movs	r3, #0
 800c014:	623b      	str	r3, [r7, #32]
 800c016:	e03d      	b.n	800c094 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 800c018:	8afa      	ldrh	r2, [r7, #22]
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	8aba      	ldrh	r2, [r7, #20]
 800c022:	fb03 f202 	mul.w	r2, r3, r2
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	4413      	add	r3, r2
 800c02a:	331b      	adds	r3, #27
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 800c030:	8aba      	ldrh	r2, [r7, #20]
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	1ad2      	subs	r2, r2, r3
 800c036:	7cfb      	ldrb	r3, [r7, #19]
 800c038:	4413      	add	r3, r2
 800c03a:	3b01      	subs	r3, #1
 800c03c:	2201      	movs	r2, #1
 800c03e:	fa02 f303 	lsl.w	r3, r2, r3
 800c042:	461a      	mov	r2, r3
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	4013      	ands	r3, r2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d010      	beq.n	800c06e <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 800c04c:	4b1c      	ldr	r3, [pc, #112]	; (800c0c0 <DrawChar+0x1c0>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	b2d9      	uxtb	r1, r3
 800c052:	4a23      	ldr	r2, [pc, #140]	; (800c0e0 <DrawChar+0x1e0>)
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	4413      	add	r3, r2
 800c058:	460a      	mov	r2, r1
 800c05a:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 800c05c:	4b18      	ldr	r3, [pc, #96]	; (800c0c0 <DrawChar+0x1c0>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	0a1a      	lsrs	r2, r3, #8
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	3301      	adds	r3, #1
 800c066:	b2d1      	uxtb	r1, r2
 800c068:	4a1d      	ldr	r2, [pc, #116]	; (800c0e0 <DrawChar+0x1e0>)
 800c06a:	54d1      	strb	r1, [r2, r3]
 800c06c:	e00f      	b.n	800c08e <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800c06e:	4b14      	ldr	r3, [pc, #80]	; (800c0c0 <DrawChar+0x1c0>)
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	b2d9      	uxtb	r1, r3
 800c074:	4a1a      	ldr	r2, [pc, #104]	; (800c0e0 <DrawChar+0x1e0>)
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	4413      	add	r3, r2
 800c07a:	460a      	mov	r2, r1
 800c07c:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800c07e:	4b10      	ldr	r3, [pc, #64]	; (800c0c0 <DrawChar+0x1c0>)
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	0a1a      	lsrs	r2, r3, #8
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	3301      	adds	r3, #1
 800c088:	b2d1      	uxtb	r1, r2
 800c08a:	4a15      	ldr	r2, [pc, #84]	; (800c0e0 <DrawChar+0x1e0>)
 800c08c:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	3301      	adds	r3, #1
 800c092:	623b      	str	r3, [r7, #32]
 800c094:	8abb      	ldrh	r3, [r7, #20]
 800c096:	6a3a      	ldr	r2, [r7, #32]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d3bd      	bcc.n	800c018 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	3301      	adds	r3, #1
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c0a2:	8afb      	ldrh	r3, [r7, #22]
 800c0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d382      	bcc.n	800bfb0 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800c0aa:	88b9      	ldrh	r1, [r7, #4]
 800c0ac:	88fb      	ldrh	r3, [r7, #6]
 800c0ae:	4a0c      	ldr	r2, [pc, #48]	; (800c0e0 <DrawChar+0x1e0>)
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff fe1b 	bl	800bcec <BSP_LCD_DrawBitmap>
}
 800c0b6:	bf00      	nop
 800c0b8:	3728      	adds	r7, #40	; 0x28
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	200006a4 	.word	0x200006a4
 800c0c4:	200006b2 	.word	0x200006b2
 800c0c8:	200006b4 	.word	0x200006b4
 800c0cc:	200006ba 	.word	0x200006ba
 800c0d0:	200006c2 	.word	0x200006c2
 800c0d4:	200006c4 	.word	0x200006c4
 800c0d8:	200006c6 	.word	0x200006c6
 800c0dc:	200006c8 	.word	0x200006c8
 800c0e0:	200006b0 	.word	0x200006b0

0800c0e4 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4623      	mov	r3, r4
 800c0f4:	80fb      	strh	r3, [r7, #6]
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	80bb      	strh	r3, [r7, #4]
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	807b      	strh	r3, [r7, #2]
 800c0fe:	4613      	mov	r3, r2
 800c100:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800c102:	4b08      	ldr	r3, [pc, #32]	; (800c124 <SetDisplayWindow+0x40>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d007      	beq.n	800c11c <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800c10c:	4b05      	ldr	r3, [pc, #20]	; (800c124 <SetDisplayWindow+0x40>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	69dc      	ldr	r4, [r3, #28]
 800c112:	883b      	ldrh	r3, [r7, #0]
 800c114:	887a      	ldrh	r2, [r7, #2]
 800c116:	88b9      	ldrh	r1, [r7, #4]
 800c118:	88f8      	ldrh	r0, [r7, #6]
 800c11a:	47a0      	blx	r4
  }  
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	bd90      	pop	{r4, r7, pc}
 800c124:	200000b4 	.word	0x200000b4

0800c128 <__errno>:
 800c128:	4b01      	ldr	r3, [pc, #4]	; (800c130 <__errno+0x8>)
 800c12a:	6818      	ldr	r0, [r3, #0]
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	200000b8 	.word	0x200000b8

0800c134 <__libc_init_array>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	4d0d      	ldr	r5, [pc, #52]	; (800c16c <__libc_init_array+0x38>)
 800c138:	4c0d      	ldr	r4, [pc, #52]	; (800c170 <__libc_init_array+0x3c>)
 800c13a:	1b64      	subs	r4, r4, r5
 800c13c:	10a4      	asrs	r4, r4, #2
 800c13e:	2600      	movs	r6, #0
 800c140:	42a6      	cmp	r6, r4
 800c142:	d109      	bne.n	800c158 <__libc_init_array+0x24>
 800c144:	4d0b      	ldr	r5, [pc, #44]	; (800c174 <__libc_init_array+0x40>)
 800c146:	4c0c      	ldr	r4, [pc, #48]	; (800c178 <__libc_init_array+0x44>)
 800c148:	f002 ff04 	bl	800ef54 <_init>
 800c14c:	1b64      	subs	r4, r4, r5
 800c14e:	10a4      	asrs	r4, r4, #2
 800c150:	2600      	movs	r6, #0
 800c152:	42a6      	cmp	r6, r4
 800c154:	d105      	bne.n	800c162 <__libc_init_array+0x2e>
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	f855 3b04 	ldr.w	r3, [r5], #4
 800c15c:	4798      	blx	r3
 800c15e:	3601      	adds	r6, #1
 800c160:	e7ee      	b.n	800c140 <__libc_init_array+0xc>
 800c162:	f855 3b04 	ldr.w	r3, [r5], #4
 800c166:	4798      	blx	r3
 800c168:	3601      	adds	r6, #1
 800c16a:	e7f2      	b.n	800c152 <__libc_init_array+0x1e>
 800c16c:	08012164 	.word	0x08012164
 800c170:	08012164 	.word	0x08012164
 800c174:	08012164 	.word	0x08012164
 800c178:	08012168 	.word	0x08012168

0800c17c <memcpy>:
 800c17c:	440a      	add	r2, r1
 800c17e:	4291      	cmp	r1, r2
 800c180:	f100 33ff 	add.w	r3, r0, #4294967295
 800c184:	d100      	bne.n	800c188 <memcpy+0xc>
 800c186:	4770      	bx	lr
 800c188:	b510      	push	{r4, lr}
 800c18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c192:	4291      	cmp	r1, r2
 800c194:	d1f9      	bne.n	800c18a <memcpy+0xe>
 800c196:	bd10      	pop	{r4, pc}

0800c198 <memset>:
 800c198:	4402      	add	r2, r0
 800c19a:	4603      	mov	r3, r0
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d100      	bne.n	800c1a2 <memset+0xa>
 800c1a0:	4770      	bx	lr
 800c1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1a6:	e7f9      	b.n	800c19c <memset+0x4>

0800c1a8 <__cvt>:
 800c1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ac:	ec55 4b10 	vmov	r4, r5, d0
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	460e      	mov	r6, r1
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	462b      	mov	r3, r5
 800c1b8:	bfbb      	ittet	lt
 800c1ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c1be:	461d      	movlt	r5, r3
 800c1c0:	2300      	movge	r3, #0
 800c1c2:	232d      	movlt	r3, #45	; 0x2d
 800c1c4:	700b      	strb	r3, [r1, #0]
 800c1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c1cc:	4691      	mov	r9, r2
 800c1ce:	f023 0820 	bic.w	r8, r3, #32
 800c1d2:	bfbc      	itt	lt
 800c1d4:	4622      	movlt	r2, r4
 800c1d6:	4614      	movlt	r4, r2
 800c1d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1dc:	d005      	beq.n	800c1ea <__cvt+0x42>
 800c1de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c1e2:	d100      	bne.n	800c1e6 <__cvt+0x3e>
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	2102      	movs	r1, #2
 800c1e8:	e000      	b.n	800c1ec <__cvt+0x44>
 800c1ea:	2103      	movs	r1, #3
 800c1ec:	ab03      	add	r3, sp, #12
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	ab02      	add	r3, sp, #8
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	ec45 4b10 	vmov	d0, r4, r5
 800c1f8:	4653      	mov	r3, sl
 800c1fa:	4632      	mov	r2, r6
 800c1fc:	f000 fcec 	bl	800cbd8 <_dtoa_r>
 800c200:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c204:	4607      	mov	r7, r0
 800c206:	d102      	bne.n	800c20e <__cvt+0x66>
 800c208:	f019 0f01 	tst.w	r9, #1
 800c20c:	d022      	beq.n	800c254 <__cvt+0xac>
 800c20e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c212:	eb07 0906 	add.w	r9, r7, r6
 800c216:	d110      	bne.n	800c23a <__cvt+0x92>
 800c218:	783b      	ldrb	r3, [r7, #0]
 800c21a:	2b30      	cmp	r3, #48	; 0x30
 800c21c:	d10a      	bne.n	800c234 <__cvt+0x8c>
 800c21e:	2200      	movs	r2, #0
 800c220:	2300      	movs	r3, #0
 800c222:	4620      	mov	r0, r4
 800c224:	4629      	mov	r1, r5
 800c226:	f7f4 fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c22a:	b918      	cbnz	r0, 800c234 <__cvt+0x8c>
 800c22c:	f1c6 0601 	rsb	r6, r6, #1
 800c230:	f8ca 6000 	str.w	r6, [sl]
 800c234:	f8da 3000 	ldr.w	r3, [sl]
 800c238:	4499      	add	r9, r3
 800c23a:	2200      	movs	r2, #0
 800c23c:	2300      	movs	r3, #0
 800c23e:	4620      	mov	r0, r4
 800c240:	4629      	mov	r1, r5
 800c242:	f7f4 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 800c246:	b108      	cbz	r0, 800c24c <__cvt+0xa4>
 800c248:	f8cd 900c 	str.w	r9, [sp, #12]
 800c24c:	2230      	movs	r2, #48	; 0x30
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	454b      	cmp	r3, r9
 800c252:	d307      	bcc.n	800c264 <__cvt+0xbc>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c258:	1bdb      	subs	r3, r3, r7
 800c25a:	4638      	mov	r0, r7
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	b004      	add	sp, #16
 800c260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c264:	1c59      	adds	r1, r3, #1
 800c266:	9103      	str	r1, [sp, #12]
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	e7f0      	b.n	800c24e <__cvt+0xa6>

0800c26c <__exponent>:
 800c26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c26e:	4603      	mov	r3, r0
 800c270:	2900      	cmp	r1, #0
 800c272:	bfb8      	it	lt
 800c274:	4249      	neglt	r1, r1
 800c276:	f803 2b02 	strb.w	r2, [r3], #2
 800c27a:	bfb4      	ite	lt
 800c27c:	222d      	movlt	r2, #45	; 0x2d
 800c27e:	222b      	movge	r2, #43	; 0x2b
 800c280:	2909      	cmp	r1, #9
 800c282:	7042      	strb	r2, [r0, #1]
 800c284:	dd2a      	ble.n	800c2dc <__exponent+0x70>
 800c286:	f10d 0407 	add.w	r4, sp, #7
 800c28a:	46a4      	mov	ip, r4
 800c28c:	270a      	movs	r7, #10
 800c28e:	46a6      	mov	lr, r4
 800c290:	460a      	mov	r2, r1
 800c292:	fb91 f6f7 	sdiv	r6, r1, r7
 800c296:	fb07 1516 	mls	r5, r7, r6, r1
 800c29a:	3530      	adds	r5, #48	; 0x30
 800c29c:	2a63      	cmp	r2, #99	; 0x63
 800c29e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	dcf1      	bgt.n	800c28e <__exponent+0x22>
 800c2aa:	3130      	adds	r1, #48	; 0x30
 800c2ac:	f1ae 0502 	sub.w	r5, lr, #2
 800c2b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2b4:	1c44      	adds	r4, r0, #1
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4561      	cmp	r1, ip
 800c2ba:	d30a      	bcc.n	800c2d2 <__exponent+0x66>
 800c2bc:	f10d 0209 	add.w	r2, sp, #9
 800c2c0:	eba2 020e 	sub.w	r2, r2, lr
 800c2c4:	4565      	cmp	r5, ip
 800c2c6:	bf88      	it	hi
 800c2c8:	2200      	movhi	r2, #0
 800c2ca:	4413      	add	r3, r2
 800c2cc:	1a18      	subs	r0, r3, r0
 800c2ce:	b003      	add	sp, #12
 800c2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c2da:	e7ed      	b.n	800c2b8 <__exponent+0x4c>
 800c2dc:	2330      	movs	r3, #48	; 0x30
 800c2de:	3130      	adds	r1, #48	; 0x30
 800c2e0:	7083      	strb	r3, [r0, #2]
 800c2e2:	70c1      	strb	r1, [r0, #3]
 800c2e4:	1d03      	adds	r3, r0, #4
 800c2e6:	e7f1      	b.n	800c2cc <__exponent+0x60>

0800c2e8 <_printf_float>:
 800c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	ed2d 8b02 	vpush	{d8}
 800c2f0:	b08d      	sub	sp, #52	; 0x34
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c2f8:	4616      	mov	r6, r2
 800c2fa:	461f      	mov	r7, r3
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	f001 fa59 	bl	800d7b4 <_localeconv_r>
 800c302:	f8d0 a000 	ldr.w	sl, [r0]
 800c306:	4650      	mov	r0, sl
 800c308:	f7f3 ff62 	bl	80001d0 <strlen>
 800c30c:	2300      	movs	r3, #0
 800c30e:	930a      	str	r3, [sp, #40]	; 0x28
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	f8d8 3000 	ldr.w	r3, [r8]
 800c318:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c31c:	3307      	adds	r3, #7
 800c31e:	f023 0307 	bic.w	r3, r3, #7
 800c322:	f103 0208 	add.w	r2, r3, #8
 800c326:	f8c8 2000 	str.w	r2, [r8]
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c332:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c336:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c340:	ee08 0a10 	vmov	s16, r0
 800c344:	4b9f      	ldr	r3, [pc, #636]	; (800c5c4 <_printf_float+0x2dc>)
 800c346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c34a:	f04f 32ff 	mov.w	r2, #4294967295
 800c34e:	f7f4 fbed 	bl	8000b2c <__aeabi_dcmpun>
 800c352:	bb88      	cbnz	r0, 800c3b8 <_printf_float+0xd0>
 800c354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c358:	4b9a      	ldr	r3, [pc, #616]	; (800c5c4 <_printf_float+0x2dc>)
 800c35a:	f04f 32ff 	mov.w	r2, #4294967295
 800c35e:	f7f4 fbc7 	bl	8000af0 <__aeabi_dcmple>
 800c362:	bb48      	cbnz	r0, 800c3b8 <_printf_float+0xd0>
 800c364:	2200      	movs	r2, #0
 800c366:	2300      	movs	r3, #0
 800c368:	4640      	mov	r0, r8
 800c36a:	4649      	mov	r1, r9
 800c36c:	f7f4 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800c370:	b110      	cbz	r0, 800c378 <_printf_float+0x90>
 800c372:	232d      	movs	r3, #45	; 0x2d
 800c374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c378:	4b93      	ldr	r3, [pc, #588]	; (800c5c8 <_printf_float+0x2e0>)
 800c37a:	4894      	ldr	r0, [pc, #592]	; (800c5cc <_printf_float+0x2e4>)
 800c37c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c380:	bf94      	ite	ls
 800c382:	4698      	movls	r8, r3
 800c384:	4680      	movhi	r8, r0
 800c386:	2303      	movs	r3, #3
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	9b05      	ldr	r3, [sp, #20]
 800c38c:	f023 0204 	bic.w	r2, r3, #4
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	f04f 0900 	mov.w	r9, #0
 800c396:	9700      	str	r7, [sp, #0]
 800c398:	4633      	mov	r3, r6
 800c39a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c39c:	4621      	mov	r1, r4
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f000 f9d8 	bl	800c754 <_printf_common>
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	f040 8090 	bne.w	800c4ca <_printf_float+0x1e2>
 800c3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ae:	b00d      	add	sp, #52	; 0x34
 800c3b0:	ecbd 8b02 	vpop	{d8}
 800c3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b8:	4642      	mov	r2, r8
 800c3ba:	464b      	mov	r3, r9
 800c3bc:	4640      	mov	r0, r8
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f7f4 fbb4 	bl	8000b2c <__aeabi_dcmpun>
 800c3c4:	b140      	cbz	r0, 800c3d8 <_printf_float+0xf0>
 800c3c6:	464b      	mov	r3, r9
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	bfbc      	itt	lt
 800c3cc:	232d      	movlt	r3, #45	; 0x2d
 800c3ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3d2:	487f      	ldr	r0, [pc, #508]	; (800c5d0 <_printf_float+0x2e8>)
 800c3d4:	4b7f      	ldr	r3, [pc, #508]	; (800c5d4 <_printf_float+0x2ec>)
 800c3d6:	e7d1      	b.n	800c37c <_printf_float+0x94>
 800c3d8:	6863      	ldr	r3, [r4, #4]
 800c3da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c3de:	9206      	str	r2, [sp, #24]
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	d13f      	bne.n	800c464 <_printf_float+0x17c>
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	6063      	str	r3, [r4, #4]
 800c3e8:	9b05      	ldr	r3, [sp, #20]
 800c3ea:	6861      	ldr	r1, [r4, #4]
 800c3ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9303      	str	r3, [sp, #12]
 800c3f4:	ab0a      	add	r3, sp, #40	; 0x28
 800c3f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c3fa:	ab09      	add	r3, sp, #36	; 0x24
 800c3fc:	ec49 8b10 	vmov	d0, r8, r9
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	6022      	str	r2, [r4, #0]
 800c404:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c408:	4628      	mov	r0, r5
 800c40a:	f7ff fecd 	bl	800c1a8 <__cvt>
 800c40e:	9b06      	ldr	r3, [sp, #24]
 800c410:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c412:	2b47      	cmp	r3, #71	; 0x47
 800c414:	4680      	mov	r8, r0
 800c416:	d108      	bne.n	800c42a <_printf_float+0x142>
 800c418:	1cc8      	adds	r0, r1, #3
 800c41a:	db02      	blt.n	800c422 <_printf_float+0x13a>
 800c41c:	6863      	ldr	r3, [r4, #4]
 800c41e:	4299      	cmp	r1, r3
 800c420:	dd41      	ble.n	800c4a6 <_printf_float+0x1be>
 800c422:	f1ab 0b02 	sub.w	fp, fp, #2
 800c426:	fa5f fb8b 	uxtb.w	fp, fp
 800c42a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c42e:	d820      	bhi.n	800c472 <_printf_float+0x18a>
 800c430:	3901      	subs	r1, #1
 800c432:	465a      	mov	r2, fp
 800c434:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c438:	9109      	str	r1, [sp, #36]	; 0x24
 800c43a:	f7ff ff17 	bl	800c26c <__exponent>
 800c43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c440:	1813      	adds	r3, r2, r0
 800c442:	2a01      	cmp	r2, #1
 800c444:	4681      	mov	r9, r0
 800c446:	6123      	str	r3, [r4, #16]
 800c448:	dc02      	bgt.n	800c450 <_printf_float+0x168>
 800c44a:	6822      	ldr	r2, [r4, #0]
 800c44c:	07d2      	lsls	r2, r2, #31
 800c44e:	d501      	bpl.n	800c454 <_printf_float+0x16c>
 800c450:	3301      	adds	r3, #1
 800c452:	6123      	str	r3, [r4, #16]
 800c454:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d09c      	beq.n	800c396 <_printf_float+0xae>
 800c45c:	232d      	movs	r3, #45	; 0x2d
 800c45e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c462:	e798      	b.n	800c396 <_printf_float+0xae>
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	2a47      	cmp	r2, #71	; 0x47
 800c468:	d1be      	bne.n	800c3e8 <_printf_float+0x100>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1bc      	bne.n	800c3e8 <_printf_float+0x100>
 800c46e:	2301      	movs	r3, #1
 800c470:	e7b9      	b.n	800c3e6 <_printf_float+0xfe>
 800c472:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c476:	d118      	bne.n	800c4aa <_printf_float+0x1c2>
 800c478:	2900      	cmp	r1, #0
 800c47a:	6863      	ldr	r3, [r4, #4]
 800c47c:	dd0b      	ble.n	800c496 <_printf_float+0x1ae>
 800c47e:	6121      	str	r1, [r4, #16]
 800c480:	b913      	cbnz	r3, 800c488 <_printf_float+0x1a0>
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	07d0      	lsls	r0, r2, #31
 800c486:	d502      	bpl.n	800c48e <_printf_float+0x1a6>
 800c488:	3301      	adds	r3, #1
 800c48a:	440b      	add	r3, r1
 800c48c:	6123      	str	r3, [r4, #16]
 800c48e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c490:	f04f 0900 	mov.w	r9, #0
 800c494:	e7de      	b.n	800c454 <_printf_float+0x16c>
 800c496:	b913      	cbnz	r3, 800c49e <_printf_float+0x1b6>
 800c498:	6822      	ldr	r2, [r4, #0]
 800c49a:	07d2      	lsls	r2, r2, #31
 800c49c:	d501      	bpl.n	800c4a2 <_printf_float+0x1ba>
 800c49e:	3302      	adds	r3, #2
 800c4a0:	e7f4      	b.n	800c48c <_printf_float+0x1a4>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e7f2      	b.n	800c48c <_printf_float+0x1a4>
 800c4a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ac:	4299      	cmp	r1, r3
 800c4ae:	db05      	blt.n	800c4bc <_printf_float+0x1d4>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	6121      	str	r1, [r4, #16]
 800c4b4:	07d8      	lsls	r0, r3, #31
 800c4b6:	d5ea      	bpl.n	800c48e <_printf_float+0x1a6>
 800c4b8:	1c4b      	adds	r3, r1, #1
 800c4ba:	e7e7      	b.n	800c48c <_printf_float+0x1a4>
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	bfd4      	ite	le
 800c4c0:	f1c1 0202 	rsble	r2, r1, #2
 800c4c4:	2201      	movgt	r2, #1
 800c4c6:	4413      	add	r3, r2
 800c4c8:	e7e0      	b.n	800c48c <_printf_float+0x1a4>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	055a      	lsls	r2, r3, #21
 800c4ce:	d407      	bmi.n	800c4e0 <_printf_float+0x1f8>
 800c4d0:	6923      	ldr	r3, [r4, #16]
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	d12c      	bne.n	800c538 <_printf_float+0x250>
 800c4de:	e764      	b.n	800c3aa <_printf_float+0xc2>
 800c4e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4e4:	f240 80e0 	bls.w	800c6a8 <_printf_float+0x3c0>
 800c4e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f7f4 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d034      	beq.n	800c562 <_printf_float+0x27a>
 800c4f8:	4a37      	ldr	r2, [pc, #220]	; (800c5d8 <_printf_float+0x2f0>)
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4631      	mov	r1, r6
 800c4fe:	4628      	mov	r0, r5
 800c500:	47b8      	blx	r7
 800c502:	3001      	adds	r0, #1
 800c504:	f43f af51 	beq.w	800c3aa <_printf_float+0xc2>
 800c508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c50c:	429a      	cmp	r2, r3
 800c50e:	db02      	blt.n	800c516 <_printf_float+0x22e>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	07d8      	lsls	r0, r3, #31
 800c514:	d510      	bpl.n	800c538 <_printf_float+0x250>
 800c516:	ee18 3a10 	vmov	r3, s16
 800c51a:	4652      	mov	r2, sl
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	f43f af41 	beq.w	800c3aa <_printf_float+0xc2>
 800c528:	f04f 0800 	mov.w	r8, #0
 800c52c:	f104 091a 	add.w	r9, r4, #26
 800c530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c532:	3b01      	subs	r3, #1
 800c534:	4543      	cmp	r3, r8
 800c536:	dc09      	bgt.n	800c54c <_printf_float+0x264>
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	079b      	lsls	r3, r3, #30
 800c53c:	f100 8105 	bmi.w	800c74a <_printf_float+0x462>
 800c540:	68e0      	ldr	r0, [r4, #12]
 800c542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c544:	4298      	cmp	r0, r3
 800c546:	bfb8      	it	lt
 800c548:	4618      	movlt	r0, r3
 800c54a:	e730      	b.n	800c3ae <_printf_float+0xc6>
 800c54c:	2301      	movs	r3, #1
 800c54e:	464a      	mov	r2, r9
 800c550:	4631      	mov	r1, r6
 800c552:	4628      	mov	r0, r5
 800c554:	47b8      	blx	r7
 800c556:	3001      	adds	r0, #1
 800c558:	f43f af27 	beq.w	800c3aa <_printf_float+0xc2>
 800c55c:	f108 0801 	add.w	r8, r8, #1
 800c560:	e7e6      	b.n	800c530 <_printf_float+0x248>
 800c562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c564:	2b00      	cmp	r3, #0
 800c566:	dc39      	bgt.n	800c5dc <_printf_float+0x2f4>
 800c568:	4a1b      	ldr	r2, [pc, #108]	; (800c5d8 <_printf_float+0x2f0>)
 800c56a:	2301      	movs	r3, #1
 800c56c:	4631      	mov	r1, r6
 800c56e:	4628      	mov	r0, r5
 800c570:	47b8      	blx	r7
 800c572:	3001      	adds	r0, #1
 800c574:	f43f af19 	beq.w	800c3aa <_printf_float+0xc2>
 800c578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c57c:	4313      	orrs	r3, r2
 800c57e:	d102      	bne.n	800c586 <_printf_float+0x29e>
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	07d9      	lsls	r1, r3, #31
 800c584:	d5d8      	bpl.n	800c538 <_printf_float+0x250>
 800c586:	ee18 3a10 	vmov	r3, s16
 800c58a:	4652      	mov	r2, sl
 800c58c:	4631      	mov	r1, r6
 800c58e:	4628      	mov	r0, r5
 800c590:	47b8      	blx	r7
 800c592:	3001      	adds	r0, #1
 800c594:	f43f af09 	beq.w	800c3aa <_printf_float+0xc2>
 800c598:	f04f 0900 	mov.w	r9, #0
 800c59c:	f104 0a1a 	add.w	sl, r4, #26
 800c5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a2:	425b      	negs	r3, r3
 800c5a4:	454b      	cmp	r3, r9
 800c5a6:	dc01      	bgt.n	800c5ac <_printf_float+0x2c4>
 800c5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5aa:	e792      	b.n	800c4d2 <_printf_float+0x1ea>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	4652      	mov	r2, sl
 800c5b0:	4631      	mov	r1, r6
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	47b8      	blx	r7
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	f43f aef7 	beq.w	800c3aa <_printf_float+0xc2>
 800c5bc:	f109 0901 	add.w	r9, r9, #1
 800c5c0:	e7ee      	b.n	800c5a0 <_printf_float+0x2b8>
 800c5c2:	bf00      	nop
 800c5c4:	7fefffff 	.word	0x7fefffff
 800c5c8:	08011d90 	.word	0x08011d90
 800c5cc:	08011d94 	.word	0x08011d94
 800c5d0:	08011d9c 	.word	0x08011d9c
 800c5d4:	08011d98 	.word	0x08011d98
 800c5d8:	08011da0 	.word	0x08011da0
 800c5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	bfa8      	it	ge
 800c5e4:	461a      	movge	r2, r3
 800c5e6:	2a00      	cmp	r2, #0
 800c5e8:	4691      	mov	r9, r2
 800c5ea:	dc37      	bgt.n	800c65c <_printf_float+0x374>
 800c5ec:	f04f 0b00 	mov.w	fp, #0
 800c5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5f4:	f104 021a 	add.w	r2, r4, #26
 800c5f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5fa:	9305      	str	r3, [sp, #20]
 800c5fc:	eba3 0309 	sub.w	r3, r3, r9
 800c600:	455b      	cmp	r3, fp
 800c602:	dc33      	bgt.n	800c66c <_printf_float+0x384>
 800c604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c608:	429a      	cmp	r2, r3
 800c60a:	db3b      	blt.n	800c684 <_printf_float+0x39c>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	07da      	lsls	r2, r3, #31
 800c610:	d438      	bmi.n	800c684 <_printf_float+0x39c>
 800c612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c614:	9a05      	ldr	r2, [sp, #20]
 800c616:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c618:	1a9a      	subs	r2, r3, r2
 800c61a:	eba3 0901 	sub.w	r9, r3, r1
 800c61e:	4591      	cmp	r9, r2
 800c620:	bfa8      	it	ge
 800c622:	4691      	movge	r9, r2
 800c624:	f1b9 0f00 	cmp.w	r9, #0
 800c628:	dc35      	bgt.n	800c696 <_printf_float+0x3ae>
 800c62a:	f04f 0800 	mov.w	r8, #0
 800c62e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c632:	f104 0a1a 	add.w	sl, r4, #26
 800c636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	eba3 0309 	sub.w	r3, r3, r9
 800c640:	4543      	cmp	r3, r8
 800c642:	f77f af79 	ble.w	800c538 <_printf_float+0x250>
 800c646:	2301      	movs	r3, #1
 800c648:	4652      	mov	r2, sl
 800c64a:	4631      	mov	r1, r6
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b8      	blx	r7
 800c650:	3001      	adds	r0, #1
 800c652:	f43f aeaa 	beq.w	800c3aa <_printf_float+0xc2>
 800c656:	f108 0801 	add.w	r8, r8, #1
 800c65a:	e7ec      	b.n	800c636 <_printf_float+0x34e>
 800c65c:	4613      	mov	r3, r2
 800c65e:	4631      	mov	r1, r6
 800c660:	4642      	mov	r2, r8
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	d1c0      	bne.n	800c5ec <_printf_float+0x304>
 800c66a:	e69e      	b.n	800c3aa <_printf_float+0xc2>
 800c66c:	2301      	movs	r3, #1
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	9205      	str	r2, [sp, #20]
 800c674:	47b8      	blx	r7
 800c676:	3001      	adds	r0, #1
 800c678:	f43f ae97 	beq.w	800c3aa <_printf_float+0xc2>
 800c67c:	9a05      	ldr	r2, [sp, #20]
 800c67e:	f10b 0b01 	add.w	fp, fp, #1
 800c682:	e7b9      	b.n	800c5f8 <_printf_float+0x310>
 800c684:	ee18 3a10 	vmov	r3, s16
 800c688:	4652      	mov	r2, sl
 800c68a:	4631      	mov	r1, r6
 800c68c:	4628      	mov	r0, r5
 800c68e:	47b8      	blx	r7
 800c690:	3001      	adds	r0, #1
 800c692:	d1be      	bne.n	800c612 <_printf_float+0x32a>
 800c694:	e689      	b.n	800c3aa <_printf_float+0xc2>
 800c696:	9a05      	ldr	r2, [sp, #20]
 800c698:	464b      	mov	r3, r9
 800c69a:	4442      	add	r2, r8
 800c69c:	4631      	mov	r1, r6
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b8      	blx	r7
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d1c1      	bne.n	800c62a <_printf_float+0x342>
 800c6a6:	e680      	b.n	800c3aa <_printf_float+0xc2>
 800c6a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6aa:	2a01      	cmp	r2, #1
 800c6ac:	dc01      	bgt.n	800c6b2 <_printf_float+0x3ca>
 800c6ae:	07db      	lsls	r3, r3, #31
 800c6b0:	d538      	bpl.n	800c724 <_printf_float+0x43c>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4642      	mov	r2, r8
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	f43f ae74 	beq.w	800c3aa <_printf_float+0xc2>
 800c6c2:	ee18 3a10 	vmov	r3, s16
 800c6c6:	4652      	mov	r2, sl
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f43f ae6b 	beq.w	800c3aa <_printf_float+0xc2>
 800c6d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f7f4 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6e0:	b9d8      	cbnz	r0, 800c71a <_printf_float+0x432>
 800c6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e4:	f108 0201 	add.w	r2, r8, #1
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b8      	blx	r7
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	d10e      	bne.n	800c712 <_printf_float+0x42a>
 800c6f4:	e659      	b.n	800c3aa <_printf_float+0xc2>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	47b8      	blx	r7
 800c700:	3001      	adds	r0, #1
 800c702:	f43f ae52 	beq.w	800c3aa <_printf_float+0xc2>
 800c706:	f108 0801 	add.w	r8, r8, #1
 800c70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70c:	3b01      	subs	r3, #1
 800c70e:	4543      	cmp	r3, r8
 800c710:	dcf1      	bgt.n	800c6f6 <_printf_float+0x40e>
 800c712:	464b      	mov	r3, r9
 800c714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c718:	e6dc      	b.n	800c4d4 <_printf_float+0x1ec>
 800c71a:	f04f 0800 	mov.w	r8, #0
 800c71e:	f104 0a1a 	add.w	sl, r4, #26
 800c722:	e7f2      	b.n	800c70a <_printf_float+0x422>
 800c724:	2301      	movs	r3, #1
 800c726:	4642      	mov	r2, r8
 800c728:	e7df      	b.n	800c6ea <_printf_float+0x402>
 800c72a:	2301      	movs	r3, #1
 800c72c:	464a      	mov	r2, r9
 800c72e:	4631      	mov	r1, r6
 800c730:	4628      	mov	r0, r5
 800c732:	47b8      	blx	r7
 800c734:	3001      	adds	r0, #1
 800c736:	f43f ae38 	beq.w	800c3aa <_printf_float+0xc2>
 800c73a:	f108 0801 	add.w	r8, r8, #1
 800c73e:	68e3      	ldr	r3, [r4, #12]
 800c740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c742:	1a5b      	subs	r3, r3, r1
 800c744:	4543      	cmp	r3, r8
 800c746:	dcf0      	bgt.n	800c72a <_printf_float+0x442>
 800c748:	e6fa      	b.n	800c540 <_printf_float+0x258>
 800c74a:	f04f 0800 	mov.w	r8, #0
 800c74e:	f104 0919 	add.w	r9, r4, #25
 800c752:	e7f4      	b.n	800c73e <_printf_float+0x456>

0800c754 <_printf_common>:
 800c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c758:	4616      	mov	r6, r2
 800c75a:	4699      	mov	r9, r3
 800c75c:	688a      	ldr	r2, [r1, #8]
 800c75e:	690b      	ldr	r3, [r1, #16]
 800c760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c764:	4293      	cmp	r3, r2
 800c766:	bfb8      	it	lt
 800c768:	4613      	movlt	r3, r2
 800c76a:	6033      	str	r3, [r6, #0]
 800c76c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c770:	4607      	mov	r7, r0
 800c772:	460c      	mov	r4, r1
 800c774:	b10a      	cbz	r2, 800c77a <_printf_common+0x26>
 800c776:	3301      	adds	r3, #1
 800c778:	6033      	str	r3, [r6, #0]
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	0699      	lsls	r1, r3, #26
 800c77e:	bf42      	ittt	mi
 800c780:	6833      	ldrmi	r3, [r6, #0]
 800c782:	3302      	addmi	r3, #2
 800c784:	6033      	strmi	r3, [r6, #0]
 800c786:	6825      	ldr	r5, [r4, #0]
 800c788:	f015 0506 	ands.w	r5, r5, #6
 800c78c:	d106      	bne.n	800c79c <_printf_common+0x48>
 800c78e:	f104 0a19 	add.w	sl, r4, #25
 800c792:	68e3      	ldr	r3, [r4, #12]
 800c794:	6832      	ldr	r2, [r6, #0]
 800c796:	1a9b      	subs	r3, r3, r2
 800c798:	42ab      	cmp	r3, r5
 800c79a:	dc26      	bgt.n	800c7ea <_printf_common+0x96>
 800c79c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7a0:	1e13      	subs	r3, r2, #0
 800c7a2:	6822      	ldr	r2, [r4, #0]
 800c7a4:	bf18      	it	ne
 800c7a6:	2301      	movne	r3, #1
 800c7a8:	0692      	lsls	r2, r2, #26
 800c7aa:	d42b      	bmi.n	800c804 <_printf_common+0xb0>
 800c7ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	47c0      	blx	r8
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	d01e      	beq.n	800c7f8 <_printf_common+0xa4>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	68e5      	ldr	r5, [r4, #12]
 800c7be:	6832      	ldr	r2, [r6, #0]
 800c7c0:	f003 0306 	and.w	r3, r3, #6
 800c7c4:	2b04      	cmp	r3, #4
 800c7c6:	bf08      	it	eq
 800c7c8:	1aad      	subeq	r5, r5, r2
 800c7ca:	68a3      	ldr	r3, [r4, #8]
 800c7cc:	6922      	ldr	r2, [r4, #16]
 800c7ce:	bf0c      	ite	eq
 800c7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7d4:	2500      	movne	r5, #0
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	bfc4      	itt	gt
 800c7da:	1a9b      	subgt	r3, r3, r2
 800c7dc:	18ed      	addgt	r5, r5, r3
 800c7de:	2600      	movs	r6, #0
 800c7e0:	341a      	adds	r4, #26
 800c7e2:	42b5      	cmp	r5, r6
 800c7e4:	d11a      	bne.n	800c81c <_printf_common+0xc8>
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	e008      	b.n	800c7fc <_printf_common+0xa8>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	4652      	mov	r2, sl
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	47c0      	blx	r8
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d103      	bne.n	800c800 <_printf_common+0xac>
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c800:	3501      	adds	r5, #1
 800c802:	e7c6      	b.n	800c792 <_printf_common+0x3e>
 800c804:	18e1      	adds	r1, r4, r3
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	2030      	movs	r0, #48	; 0x30
 800c80a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c80e:	4422      	add	r2, r4
 800c810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c818:	3302      	adds	r3, #2
 800c81a:	e7c7      	b.n	800c7ac <_printf_common+0x58>
 800c81c:	2301      	movs	r3, #1
 800c81e:	4622      	mov	r2, r4
 800c820:	4649      	mov	r1, r9
 800c822:	4638      	mov	r0, r7
 800c824:	47c0      	blx	r8
 800c826:	3001      	adds	r0, #1
 800c828:	d0e6      	beq.n	800c7f8 <_printf_common+0xa4>
 800c82a:	3601      	adds	r6, #1
 800c82c:	e7d9      	b.n	800c7e2 <_printf_common+0x8e>
	...

0800c830 <_printf_i>:
 800c830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c834:	7e0f      	ldrb	r7, [r1, #24]
 800c836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c838:	2f78      	cmp	r7, #120	; 0x78
 800c83a:	4691      	mov	r9, r2
 800c83c:	4680      	mov	r8, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	469a      	mov	sl, r3
 800c842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c846:	d807      	bhi.n	800c858 <_printf_i+0x28>
 800c848:	2f62      	cmp	r7, #98	; 0x62
 800c84a:	d80a      	bhi.n	800c862 <_printf_i+0x32>
 800c84c:	2f00      	cmp	r7, #0
 800c84e:	f000 80d8 	beq.w	800ca02 <_printf_i+0x1d2>
 800c852:	2f58      	cmp	r7, #88	; 0x58
 800c854:	f000 80a3 	beq.w	800c99e <_printf_i+0x16e>
 800c858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c85c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c860:	e03a      	b.n	800c8d8 <_printf_i+0xa8>
 800c862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c866:	2b15      	cmp	r3, #21
 800c868:	d8f6      	bhi.n	800c858 <_printf_i+0x28>
 800c86a:	a101      	add	r1, pc, #4	; (adr r1, 800c870 <_printf_i+0x40>)
 800c86c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c870:	0800c8c9 	.word	0x0800c8c9
 800c874:	0800c8dd 	.word	0x0800c8dd
 800c878:	0800c859 	.word	0x0800c859
 800c87c:	0800c859 	.word	0x0800c859
 800c880:	0800c859 	.word	0x0800c859
 800c884:	0800c859 	.word	0x0800c859
 800c888:	0800c8dd 	.word	0x0800c8dd
 800c88c:	0800c859 	.word	0x0800c859
 800c890:	0800c859 	.word	0x0800c859
 800c894:	0800c859 	.word	0x0800c859
 800c898:	0800c859 	.word	0x0800c859
 800c89c:	0800c9e9 	.word	0x0800c9e9
 800c8a0:	0800c90d 	.word	0x0800c90d
 800c8a4:	0800c9cb 	.word	0x0800c9cb
 800c8a8:	0800c859 	.word	0x0800c859
 800c8ac:	0800c859 	.word	0x0800c859
 800c8b0:	0800ca0b 	.word	0x0800ca0b
 800c8b4:	0800c859 	.word	0x0800c859
 800c8b8:	0800c90d 	.word	0x0800c90d
 800c8bc:	0800c859 	.word	0x0800c859
 800c8c0:	0800c859 	.word	0x0800c859
 800c8c4:	0800c9d3 	.word	0x0800c9d3
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	1d1a      	adds	r2, r3, #4
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	602a      	str	r2, [r5, #0]
 800c8d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e0a3      	b.n	800ca24 <_printf_i+0x1f4>
 800c8dc:	6820      	ldr	r0, [r4, #0]
 800c8de:	6829      	ldr	r1, [r5, #0]
 800c8e0:	0606      	lsls	r6, r0, #24
 800c8e2:	f101 0304 	add.w	r3, r1, #4
 800c8e6:	d50a      	bpl.n	800c8fe <_printf_i+0xce>
 800c8e8:	680e      	ldr	r6, [r1, #0]
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	2e00      	cmp	r6, #0
 800c8ee:	da03      	bge.n	800c8f8 <_printf_i+0xc8>
 800c8f0:	232d      	movs	r3, #45	; 0x2d
 800c8f2:	4276      	negs	r6, r6
 800c8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f8:	485e      	ldr	r0, [pc, #376]	; (800ca74 <_printf_i+0x244>)
 800c8fa:	230a      	movs	r3, #10
 800c8fc:	e019      	b.n	800c932 <_printf_i+0x102>
 800c8fe:	680e      	ldr	r6, [r1, #0]
 800c900:	602b      	str	r3, [r5, #0]
 800c902:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c906:	bf18      	it	ne
 800c908:	b236      	sxthne	r6, r6
 800c90a:	e7ef      	b.n	800c8ec <_printf_i+0xbc>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	6820      	ldr	r0, [r4, #0]
 800c910:	1d19      	adds	r1, r3, #4
 800c912:	6029      	str	r1, [r5, #0]
 800c914:	0601      	lsls	r1, r0, #24
 800c916:	d501      	bpl.n	800c91c <_printf_i+0xec>
 800c918:	681e      	ldr	r6, [r3, #0]
 800c91a:	e002      	b.n	800c922 <_printf_i+0xf2>
 800c91c:	0646      	lsls	r6, r0, #25
 800c91e:	d5fb      	bpl.n	800c918 <_printf_i+0xe8>
 800c920:	881e      	ldrh	r6, [r3, #0]
 800c922:	4854      	ldr	r0, [pc, #336]	; (800ca74 <_printf_i+0x244>)
 800c924:	2f6f      	cmp	r7, #111	; 0x6f
 800c926:	bf0c      	ite	eq
 800c928:	2308      	moveq	r3, #8
 800c92a:	230a      	movne	r3, #10
 800c92c:	2100      	movs	r1, #0
 800c92e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c932:	6865      	ldr	r5, [r4, #4]
 800c934:	60a5      	str	r5, [r4, #8]
 800c936:	2d00      	cmp	r5, #0
 800c938:	bfa2      	ittt	ge
 800c93a:	6821      	ldrge	r1, [r4, #0]
 800c93c:	f021 0104 	bicge.w	r1, r1, #4
 800c940:	6021      	strge	r1, [r4, #0]
 800c942:	b90e      	cbnz	r6, 800c948 <_printf_i+0x118>
 800c944:	2d00      	cmp	r5, #0
 800c946:	d04d      	beq.n	800c9e4 <_printf_i+0x1b4>
 800c948:	4615      	mov	r5, r2
 800c94a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c94e:	fb03 6711 	mls	r7, r3, r1, r6
 800c952:	5dc7      	ldrb	r7, [r0, r7]
 800c954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c958:	4637      	mov	r7, r6
 800c95a:	42bb      	cmp	r3, r7
 800c95c:	460e      	mov	r6, r1
 800c95e:	d9f4      	bls.n	800c94a <_printf_i+0x11a>
 800c960:	2b08      	cmp	r3, #8
 800c962:	d10b      	bne.n	800c97c <_printf_i+0x14c>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	07de      	lsls	r6, r3, #31
 800c968:	d508      	bpl.n	800c97c <_printf_i+0x14c>
 800c96a:	6923      	ldr	r3, [r4, #16]
 800c96c:	6861      	ldr	r1, [r4, #4]
 800c96e:	4299      	cmp	r1, r3
 800c970:	bfde      	ittt	le
 800c972:	2330      	movle	r3, #48	; 0x30
 800c974:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c97c:	1b52      	subs	r2, r2, r5
 800c97e:	6122      	str	r2, [r4, #16]
 800c980:	f8cd a000 	str.w	sl, [sp]
 800c984:	464b      	mov	r3, r9
 800c986:	aa03      	add	r2, sp, #12
 800c988:	4621      	mov	r1, r4
 800c98a:	4640      	mov	r0, r8
 800c98c:	f7ff fee2 	bl	800c754 <_printf_common>
 800c990:	3001      	adds	r0, #1
 800c992:	d14c      	bne.n	800ca2e <_printf_i+0x1fe>
 800c994:	f04f 30ff 	mov.w	r0, #4294967295
 800c998:	b004      	add	sp, #16
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	4835      	ldr	r0, [pc, #212]	; (800ca74 <_printf_i+0x244>)
 800c9a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9a4:	6829      	ldr	r1, [r5, #0]
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9ac:	6029      	str	r1, [r5, #0]
 800c9ae:	061d      	lsls	r5, r3, #24
 800c9b0:	d514      	bpl.n	800c9dc <_printf_i+0x1ac>
 800c9b2:	07df      	lsls	r7, r3, #31
 800c9b4:	bf44      	itt	mi
 800c9b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c9ba:	6023      	strmi	r3, [r4, #0]
 800c9bc:	b91e      	cbnz	r6, 800c9c6 <_printf_i+0x196>
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	f023 0320 	bic.w	r3, r3, #32
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	2310      	movs	r3, #16
 800c9c8:	e7b0      	b.n	800c92c <_printf_i+0xfc>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	f043 0320 	orr.w	r3, r3, #32
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	2378      	movs	r3, #120	; 0x78
 800c9d4:	4828      	ldr	r0, [pc, #160]	; (800ca78 <_printf_i+0x248>)
 800c9d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9da:	e7e3      	b.n	800c9a4 <_printf_i+0x174>
 800c9dc:	0659      	lsls	r1, r3, #25
 800c9de:	bf48      	it	mi
 800c9e0:	b2b6      	uxthmi	r6, r6
 800c9e2:	e7e6      	b.n	800c9b2 <_printf_i+0x182>
 800c9e4:	4615      	mov	r5, r2
 800c9e6:	e7bb      	b.n	800c960 <_printf_i+0x130>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	6826      	ldr	r6, [r4, #0]
 800c9ec:	6961      	ldr	r1, [r4, #20]
 800c9ee:	1d18      	adds	r0, r3, #4
 800c9f0:	6028      	str	r0, [r5, #0]
 800c9f2:	0635      	lsls	r5, r6, #24
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	d501      	bpl.n	800c9fc <_printf_i+0x1cc>
 800c9f8:	6019      	str	r1, [r3, #0]
 800c9fa:	e002      	b.n	800ca02 <_printf_i+0x1d2>
 800c9fc:	0670      	lsls	r0, r6, #25
 800c9fe:	d5fb      	bpl.n	800c9f8 <_printf_i+0x1c8>
 800ca00:	8019      	strh	r1, [r3, #0]
 800ca02:	2300      	movs	r3, #0
 800ca04:	6123      	str	r3, [r4, #16]
 800ca06:	4615      	mov	r5, r2
 800ca08:	e7ba      	b.n	800c980 <_printf_i+0x150>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	1d1a      	adds	r2, r3, #4
 800ca0e:	602a      	str	r2, [r5, #0]
 800ca10:	681d      	ldr	r5, [r3, #0]
 800ca12:	6862      	ldr	r2, [r4, #4]
 800ca14:	2100      	movs	r1, #0
 800ca16:	4628      	mov	r0, r5
 800ca18:	f7f3 fbe2 	bl	80001e0 <memchr>
 800ca1c:	b108      	cbz	r0, 800ca22 <_printf_i+0x1f2>
 800ca1e:	1b40      	subs	r0, r0, r5
 800ca20:	6060      	str	r0, [r4, #4]
 800ca22:	6863      	ldr	r3, [r4, #4]
 800ca24:	6123      	str	r3, [r4, #16]
 800ca26:	2300      	movs	r3, #0
 800ca28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca2c:	e7a8      	b.n	800c980 <_printf_i+0x150>
 800ca2e:	6923      	ldr	r3, [r4, #16]
 800ca30:	462a      	mov	r2, r5
 800ca32:	4649      	mov	r1, r9
 800ca34:	4640      	mov	r0, r8
 800ca36:	47d0      	blx	sl
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d0ab      	beq.n	800c994 <_printf_i+0x164>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	079b      	lsls	r3, r3, #30
 800ca40:	d413      	bmi.n	800ca6a <_printf_i+0x23a>
 800ca42:	68e0      	ldr	r0, [r4, #12]
 800ca44:	9b03      	ldr	r3, [sp, #12]
 800ca46:	4298      	cmp	r0, r3
 800ca48:	bfb8      	it	lt
 800ca4a:	4618      	movlt	r0, r3
 800ca4c:	e7a4      	b.n	800c998 <_printf_i+0x168>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4632      	mov	r2, r6
 800ca52:	4649      	mov	r1, r9
 800ca54:	4640      	mov	r0, r8
 800ca56:	47d0      	blx	sl
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d09b      	beq.n	800c994 <_printf_i+0x164>
 800ca5c:	3501      	adds	r5, #1
 800ca5e:	68e3      	ldr	r3, [r4, #12]
 800ca60:	9903      	ldr	r1, [sp, #12]
 800ca62:	1a5b      	subs	r3, r3, r1
 800ca64:	42ab      	cmp	r3, r5
 800ca66:	dcf2      	bgt.n	800ca4e <_printf_i+0x21e>
 800ca68:	e7eb      	b.n	800ca42 <_printf_i+0x212>
 800ca6a:	2500      	movs	r5, #0
 800ca6c:	f104 0619 	add.w	r6, r4, #25
 800ca70:	e7f5      	b.n	800ca5e <_printf_i+0x22e>
 800ca72:	bf00      	nop
 800ca74:	08011da2 	.word	0x08011da2
 800ca78:	08011db3 	.word	0x08011db3

0800ca7c <siprintf>:
 800ca7c:	b40e      	push	{r1, r2, r3}
 800ca7e:	b500      	push	{lr}
 800ca80:	b09c      	sub	sp, #112	; 0x70
 800ca82:	ab1d      	add	r3, sp, #116	; 0x74
 800ca84:	9002      	str	r0, [sp, #8]
 800ca86:	9006      	str	r0, [sp, #24]
 800ca88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca8c:	4809      	ldr	r0, [pc, #36]	; (800cab4 <siprintf+0x38>)
 800ca8e:	9107      	str	r1, [sp, #28]
 800ca90:	9104      	str	r1, [sp, #16]
 800ca92:	4909      	ldr	r1, [pc, #36]	; (800cab8 <siprintf+0x3c>)
 800ca94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca98:	9105      	str	r1, [sp, #20]
 800ca9a:	6800      	ldr	r0, [r0, #0]
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	a902      	add	r1, sp, #8
 800caa0:	f001 fb6a 	bl	800e178 <_svfiprintf_r>
 800caa4:	9b02      	ldr	r3, [sp, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	b01c      	add	sp, #112	; 0x70
 800caac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cab0:	b003      	add	sp, #12
 800cab2:	4770      	bx	lr
 800cab4:	200000b8 	.word	0x200000b8
 800cab8:	ffff0208 	.word	0xffff0208

0800cabc <quorem>:
 800cabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	6903      	ldr	r3, [r0, #16]
 800cac2:	690c      	ldr	r4, [r1, #16]
 800cac4:	42a3      	cmp	r3, r4
 800cac6:	4607      	mov	r7, r0
 800cac8:	f2c0 8081 	blt.w	800cbce <quorem+0x112>
 800cacc:	3c01      	subs	r4, #1
 800cace:	f101 0814 	add.w	r8, r1, #20
 800cad2:	f100 0514 	add.w	r5, r0, #20
 800cad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cada:	9301      	str	r3, [sp, #4]
 800cadc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cae4:	3301      	adds	r3, #1
 800cae6:	429a      	cmp	r2, r3
 800cae8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800caec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800caf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800caf4:	d331      	bcc.n	800cb5a <quorem+0x9e>
 800caf6:	f04f 0e00 	mov.w	lr, #0
 800cafa:	4640      	mov	r0, r8
 800cafc:	46ac      	mov	ip, r5
 800cafe:	46f2      	mov	sl, lr
 800cb00:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb04:	b293      	uxth	r3, r2
 800cb06:	fb06 e303 	mla	r3, r6, r3, lr
 800cb0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	ebaa 0303 	sub.w	r3, sl, r3
 800cb14:	f8dc a000 	ldr.w	sl, [ip]
 800cb18:	0c12      	lsrs	r2, r2, #16
 800cb1a:	fa13 f38a 	uxtah	r3, r3, sl
 800cb1e:	fb06 e202 	mla	r2, r6, r2, lr
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	9b00      	ldr	r3, [sp, #0]
 800cb26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb2a:	b292      	uxth	r2, r2
 800cb2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb34:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb38:	4581      	cmp	r9, r0
 800cb3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb3e:	f84c 3b04 	str.w	r3, [ip], #4
 800cb42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb46:	d2db      	bcs.n	800cb00 <quorem+0x44>
 800cb48:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb4c:	b92b      	cbnz	r3, 800cb5a <quorem+0x9e>
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	3b04      	subs	r3, #4
 800cb52:	429d      	cmp	r5, r3
 800cb54:	461a      	mov	r2, r3
 800cb56:	d32e      	bcc.n	800cbb6 <quorem+0xfa>
 800cb58:	613c      	str	r4, [r7, #16]
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f001 f8b8 	bl	800dcd0 <__mcmp>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	db24      	blt.n	800cbae <quorem+0xf2>
 800cb64:	3601      	adds	r6, #1
 800cb66:	4628      	mov	r0, r5
 800cb68:	f04f 0c00 	mov.w	ip, #0
 800cb6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb70:	f8d0 e000 	ldr.w	lr, [r0]
 800cb74:	b293      	uxth	r3, r2
 800cb76:	ebac 0303 	sub.w	r3, ip, r3
 800cb7a:	0c12      	lsrs	r2, r2, #16
 800cb7c:	fa13 f38e 	uxtah	r3, r3, lr
 800cb80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb8e:	45c1      	cmp	r9, r8
 800cb90:	f840 3b04 	str.w	r3, [r0], #4
 800cb94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb98:	d2e8      	bcs.n	800cb6c <quorem+0xb0>
 800cb9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cba2:	b922      	cbnz	r2, 800cbae <quorem+0xf2>
 800cba4:	3b04      	subs	r3, #4
 800cba6:	429d      	cmp	r5, r3
 800cba8:	461a      	mov	r2, r3
 800cbaa:	d30a      	bcc.n	800cbc2 <quorem+0x106>
 800cbac:	613c      	str	r4, [r7, #16]
 800cbae:	4630      	mov	r0, r6
 800cbb0:	b003      	add	sp, #12
 800cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb6:	6812      	ldr	r2, [r2, #0]
 800cbb8:	3b04      	subs	r3, #4
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	d1cc      	bne.n	800cb58 <quorem+0x9c>
 800cbbe:	3c01      	subs	r4, #1
 800cbc0:	e7c7      	b.n	800cb52 <quorem+0x96>
 800cbc2:	6812      	ldr	r2, [r2, #0]
 800cbc4:	3b04      	subs	r3, #4
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	d1f0      	bne.n	800cbac <quorem+0xf0>
 800cbca:	3c01      	subs	r4, #1
 800cbcc:	e7eb      	b.n	800cba6 <quorem+0xea>
 800cbce:	2000      	movs	r0, #0
 800cbd0:	e7ee      	b.n	800cbb0 <quorem+0xf4>
 800cbd2:	0000      	movs	r0, r0
 800cbd4:	0000      	movs	r0, r0
	...

0800cbd8 <_dtoa_r>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	ed2d 8b04 	vpush	{d8-d9}
 800cbe0:	ec57 6b10 	vmov	r6, r7, d0
 800cbe4:	b093      	sub	sp, #76	; 0x4c
 800cbe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbec:	9106      	str	r1, [sp, #24]
 800cbee:	ee10 aa10 	vmov	sl, s0
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbf6:	930c      	str	r3, [sp, #48]	; 0x30
 800cbf8:	46bb      	mov	fp, r7
 800cbfa:	b975      	cbnz	r5, 800cc1a <_dtoa_r+0x42>
 800cbfc:	2010      	movs	r0, #16
 800cbfe:	f000 fddd 	bl	800d7bc <malloc>
 800cc02:	4602      	mov	r2, r0
 800cc04:	6260      	str	r0, [r4, #36]	; 0x24
 800cc06:	b920      	cbnz	r0, 800cc12 <_dtoa_r+0x3a>
 800cc08:	4ba7      	ldr	r3, [pc, #668]	; (800cea8 <_dtoa_r+0x2d0>)
 800cc0a:	21ea      	movs	r1, #234	; 0xea
 800cc0c:	48a7      	ldr	r0, [pc, #668]	; (800ceac <_dtoa_r+0x2d4>)
 800cc0e:	f001 fbc3 	bl	800e398 <__assert_func>
 800cc12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc16:	6005      	str	r5, [r0, #0]
 800cc18:	60c5      	str	r5, [r0, #12]
 800cc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc1c:	6819      	ldr	r1, [r3, #0]
 800cc1e:	b151      	cbz	r1, 800cc36 <_dtoa_r+0x5e>
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	604a      	str	r2, [r1, #4]
 800cc24:	2301      	movs	r3, #1
 800cc26:	4093      	lsls	r3, r2
 800cc28:	608b      	str	r3, [r1, #8]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fe0e 	bl	800d84c <_Bfree>
 800cc30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	1e3b      	subs	r3, r7, #0
 800cc38:	bfaa      	itet	ge
 800cc3a:	2300      	movge	r3, #0
 800cc3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc40:	f8c8 3000 	strge.w	r3, [r8]
 800cc44:	4b9a      	ldr	r3, [pc, #616]	; (800ceb0 <_dtoa_r+0x2d8>)
 800cc46:	bfbc      	itt	lt
 800cc48:	2201      	movlt	r2, #1
 800cc4a:	f8c8 2000 	strlt.w	r2, [r8]
 800cc4e:	ea33 030b 	bics.w	r3, r3, fp
 800cc52:	d11b      	bne.n	800cc8c <_dtoa_r+0xb4>
 800cc54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc56:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc60:	4333      	orrs	r3, r6
 800cc62:	f000 8592 	beq.w	800d78a <_dtoa_r+0xbb2>
 800cc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc68:	b963      	cbnz	r3, 800cc84 <_dtoa_r+0xac>
 800cc6a:	4b92      	ldr	r3, [pc, #584]	; (800ceb4 <_dtoa_r+0x2dc>)
 800cc6c:	e022      	b.n	800ccb4 <_dtoa_r+0xdc>
 800cc6e:	4b92      	ldr	r3, [pc, #584]	; (800ceb8 <_dtoa_r+0x2e0>)
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	3308      	adds	r3, #8
 800cc74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	9801      	ldr	r0, [sp, #4]
 800cc7a:	b013      	add	sp, #76	; 0x4c
 800cc7c:	ecbd 8b04 	vpop	{d8-d9}
 800cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc84:	4b8b      	ldr	r3, [pc, #556]	; (800ceb4 <_dtoa_r+0x2dc>)
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	3303      	adds	r3, #3
 800cc8a:	e7f3      	b.n	800cc74 <_dtoa_r+0x9c>
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4650      	mov	r0, sl
 800cc92:	4659      	mov	r1, fp
 800cc94:	f7f3 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc98:	ec4b ab19 	vmov	d9, sl, fp
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	b158      	cbz	r0, 800ccb8 <_dtoa_r+0xe0>
 800cca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cca2:	2301      	movs	r3, #1
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 856b 	beq.w	800d784 <_dtoa_r+0xbac>
 800ccae:	4883      	ldr	r0, [pc, #524]	; (800cebc <_dtoa_r+0x2e4>)
 800ccb0:	6018      	str	r0, [r3, #0]
 800ccb2:	1e43      	subs	r3, r0, #1
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	e7df      	b.n	800cc78 <_dtoa_r+0xa0>
 800ccb8:	ec4b ab10 	vmov	d0, sl, fp
 800ccbc:	aa10      	add	r2, sp, #64	; 0x40
 800ccbe:	a911      	add	r1, sp, #68	; 0x44
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f001 f8ab 	bl	800de1c <__d2b>
 800ccc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ccca:	ee08 0a10 	vmov	s16, r0
 800ccce:	2d00      	cmp	r5, #0
 800ccd0:	f000 8084 	beq.w	800cddc <_dtoa_r+0x204>
 800ccd4:	ee19 3a90 	vmov	r3, s19
 800ccd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cce0:	4656      	mov	r6, sl
 800cce2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ccee:	4b74      	ldr	r3, [pc, #464]	; (800cec0 <_dtoa_r+0x2e8>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	f7f3 fac7 	bl	8000288 <__aeabi_dsub>
 800ccfa:	a365      	add	r3, pc, #404	; (adr r3, 800ce90 <_dtoa_r+0x2b8>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	f7f3 fc7a 	bl	80005f8 <__aeabi_dmul>
 800cd04:	a364      	add	r3, pc, #400	; (adr r3, 800ce98 <_dtoa_r+0x2c0>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	f7f3 fabf 	bl	800028c <__adddf3>
 800cd0e:	4606      	mov	r6, r0
 800cd10:	4628      	mov	r0, r5
 800cd12:	460f      	mov	r7, r1
 800cd14:	f7f3 fc06 	bl	8000524 <__aeabi_i2d>
 800cd18:	a361      	add	r3, pc, #388	; (adr r3, 800cea0 <_dtoa_r+0x2c8>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7f3 fc6b 	bl	80005f8 <__aeabi_dmul>
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	4630      	mov	r0, r6
 800cd28:	4639      	mov	r1, r7
 800cd2a:	f7f3 faaf 	bl	800028c <__adddf3>
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	f7f3 ff11 	bl	8000b58 <__aeabi_d2iz>
 800cd36:	2200      	movs	r2, #0
 800cd38:	9000      	str	r0, [sp, #0]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	4639      	mov	r1, r7
 800cd40:	f7f3 fecc 	bl	8000adc <__aeabi_dcmplt>
 800cd44:	b150      	cbz	r0, 800cd5c <_dtoa_r+0x184>
 800cd46:	9800      	ldr	r0, [sp, #0]
 800cd48:	f7f3 fbec 	bl	8000524 <__aeabi_i2d>
 800cd4c:	4632      	mov	r2, r6
 800cd4e:	463b      	mov	r3, r7
 800cd50:	f7f3 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd54:	b910      	cbnz	r0, 800cd5c <_dtoa_r+0x184>
 800cd56:	9b00      	ldr	r3, [sp, #0]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	9b00      	ldr	r3, [sp, #0]
 800cd5e:	2b16      	cmp	r3, #22
 800cd60:	d85a      	bhi.n	800ce18 <_dtoa_r+0x240>
 800cd62:	9a00      	ldr	r2, [sp, #0]
 800cd64:	4b57      	ldr	r3, [pc, #348]	; (800cec4 <_dtoa_r+0x2ec>)
 800cd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	ec51 0b19 	vmov	r0, r1, d9
 800cd72:	f7f3 feb3 	bl	8000adc <__aeabi_dcmplt>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d050      	beq.n	800ce1c <_dtoa_r+0x244>
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	2300      	movs	r3, #0
 800cd82:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd86:	1b5d      	subs	r5, r3, r5
 800cd88:	1e6b      	subs	r3, r5, #1
 800cd8a:	9305      	str	r3, [sp, #20]
 800cd8c:	bf45      	ittet	mi
 800cd8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd92:	9304      	strmi	r3, [sp, #16]
 800cd94:	2300      	movpl	r3, #0
 800cd96:	2300      	movmi	r3, #0
 800cd98:	bf4c      	ite	mi
 800cd9a:	9305      	strmi	r3, [sp, #20]
 800cd9c:	9304      	strpl	r3, [sp, #16]
 800cd9e:	9b00      	ldr	r3, [sp, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	db3d      	blt.n	800ce20 <_dtoa_r+0x248>
 800cda4:	9b05      	ldr	r3, [sp, #20]
 800cda6:	9a00      	ldr	r2, [sp, #0]
 800cda8:	920a      	str	r2, [sp, #40]	; 0x28
 800cdaa:	4413      	add	r3, r2
 800cdac:	9305      	str	r3, [sp, #20]
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9307      	str	r3, [sp, #28]
 800cdb2:	9b06      	ldr	r3, [sp, #24]
 800cdb4:	2b09      	cmp	r3, #9
 800cdb6:	f200 8089 	bhi.w	800cecc <_dtoa_r+0x2f4>
 800cdba:	2b05      	cmp	r3, #5
 800cdbc:	bfc4      	itt	gt
 800cdbe:	3b04      	subgt	r3, #4
 800cdc0:	9306      	strgt	r3, [sp, #24]
 800cdc2:	9b06      	ldr	r3, [sp, #24]
 800cdc4:	f1a3 0302 	sub.w	r3, r3, #2
 800cdc8:	bfcc      	ite	gt
 800cdca:	2500      	movgt	r5, #0
 800cdcc:	2501      	movle	r5, #1
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	f200 8087 	bhi.w	800cee2 <_dtoa_r+0x30a>
 800cdd4:	e8df f003 	tbb	[pc, r3]
 800cdd8:	59383a2d 	.word	0x59383a2d
 800cddc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cde0:	441d      	add	r5, r3
 800cde2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	bfc1      	itttt	gt
 800cdea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cdf2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cdf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cdfa:	bfda      	itte	le
 800cdfc:	f1c3 0320 	rsble	r3, r3, #32
 800ce00:	fa06 f003 	lslle.w	r0, r6, r3
 800ce04:	4318      	orrgt	r0, r3
 800ce06:	f7f3 fb7d 	bl	8000504 <__aeabi_ui2d>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce12:	3d01      	subs	r5, #1
 800ce14:	930e      	str	r3, [sp, #56]	; 0x38
 800ce16:	e76a      	b.n	800ccee <_dtoa_r+0x116>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e7b2      	b.n	800cd82 <_dtoa_r+0x1aa>
 800ce1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce1e:	e7b1      	b.n	800cd84 <_dtoa_r+0x1ac>
 800ce20:	9b04      	ldr	r3, [sp, #16]
 800ce22:	9a00      	ldr	r2, [sp, #0]
 800ce24:	1a9b      	subs	r3, r3, r2
 800ce26:	9304      	str	r3, [sp, #16]
 800ce28:	4253      	negs	r3, r2
 800ce2a:	9307      	str	r3, [sp, #28]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce30:	e7bf      	b.n	800cdb2 <_dtoa_r+0x1da>
 800ce32:	2300      	movs	r3, #0
 800ce34:	9308      	str	r3, [sp, #32]
 800ce36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc55      	bgt.n	800cee8 <_dtoa_r+0x310>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce42:	461a      	mov	r2, r3
 800ce44:	9209      	str	r2, [sp, #36]	; 0x24
 800ce46:	e00c      	b.n	800ce62 <_dtoa_r+0x28a>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7f3      	b.n	800ce34 <_dtoa_r+0x25c>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce50:	9308      	str	r3, [sp, #32]
 800ce52:	9b00      	ldr	r3, [sp, #0]
 800ce54:	4413      	add	r3, r2
 800ce56:	9302      	str	r3, [sp, #8]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	9303      	str	r3, [sp, #12]
 800ce5e:	bfb8      	it	lt
 800ce60:	2301      	movlt	r3, #1
 800ce62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce64:	2200      	movs	r2, #0
 800ce66:	6042      	str	r2, [r0, #4]
 800ce68:	2204      	movs	r2, #4
 800ce6a:	f102 0614 	add.w	r6, r2, #20
 800ce6e:	429e      	cmp	r6, r3
 800ce70:	6841      	ldr	r1, [r0, #4]
 800ce72:	d93d      	bls.n	800cef0 <_dtoa_r+0x318>
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 fca9 	bl	800d7cc <_Balloc>
 800ce7a:	9001      	str	r0, [sp, #4]
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d13b      	bne.n	800cef8 <_dtoa_r+0x320>
 800ce80:	4b11      	ldr	r3, [pc, #68]	; (800cec8 <_dtoa_r+0x2f0>)
 800ce82:	4602      	mov	r2, r0
 800ce84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce88:	e6c0      	b.n	800cc0c <_dtoa_r+0x34>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e7df      	b.n	800ce4e <_dtoa_r+0x276>
 800ce8e:	bf00      	nop
 800ce90:	636f4361 	.word	0x636f4361
 800ce94:	3fd287a7 	.word	0x3fd287a7
 800ce98:	8b60c8b3 	.word	0x8b60c8b3
 800ce9c:	3fc68a28 	.word	0x3fc68a28
 800cea0:	509f79fb 	.word	0x509f79fb
 800cea4:	3fd34413 	.word	0x3fd34413
 800cea8:	08011dd1 	.word	0x08011dd1
 800ceac:	08011de8 	.word	0x08011de8
 800ceb0:	7ff00000 	.word	0x7ff00000
 800ceb4:	08011dcd 	.word	0x08011dcd
 800ceb8:	08011dc4 	.word	0x08011dc4
 800cebc:	08011da1 	.word	0x08011da1
 800cec0:	3ff80000 	.word	0x3ff80000
 800cec4:	08011ed8 	.word	0x08011ed8
 800cec8:	08011e43 	.word	0x08011e43
 800cecc:	2501      	movs	r5, #1
 800cece:	2300      	movs	r3, #0
 800ced0:	9306      	str	r3, [sp, #24]
 800ced2:	9508      	str	r5, [sp, #32]
 800ced4:	f04f 33ff 	mov.w	r3, #4294967295
 800ced8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cedc:	2200      	movs	r2, #0
 800cede:	2312      	movs	r3, #18
 800cee0:	e7b0      	b.n	800ce44 <_dtoa_r+0x26c>
 800cee2:	2301      	movs	r3, #1
 800cee4:	9308      	str	r3, [sp, #32]
 800cee6:	e7f5      	b.n	800ced4 <_dtoa_r+0x2fc>
 800cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceee:	e7b8      	b.n	800ce62 <_dtoa_r+0x28a>
 800cef0:	3101      	adds	r1, #1
 800cef2:	6041      	str	r1, [r0, #4]
 800cef4:	0052      	lsls	r2, r2, #1
 800cef6:	e7b8      	b.n	800ce6a <_dtoa_r+0x292>
 800cef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cefa:	9a01      	ldr	r2, [sp, #4]
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	9b03      	ldr	r3, [sp, #12]
 800cf00:	2b0e      	cmp	r3, #14
 800cf02:	f200 809d 	bhi.w	800d040 <_dtoa_r+0x468>
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	f000 809a 	beq.w	800d040 <_dtoa_r+0x468>
 800cf0c:	9b00      	ldr	r3, [sp, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dd32      	ble.n	800cf78 <_dtoa_r+0x3a0>
 800cf12:	4ab7      	ldr	r2, [pc, #732]	; (800d1f0 <_dtoa_r+0x618>)
 800cf14:	f003 030f 	and.w	r3, r3, #15
 800cf18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf20:	9b00      	ldr	r3, [sp, #0]
 800cf22:	05d8      	lsls	r0, r3, #23
 800cf24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf28:	d516      	bpl.n	800cf58 <_dtoa_r+0x380>
 800cf2a:	4bb2      	ldr	r3, [pc, #712]	; (800d1f4 <_dtoa_r+0x61c>)
 800cf2c:	ec51 0b19 	vmov	r0, r1, d9
 800cf30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf34:	f7f3 fc8a 	bl	800084c <__aeabi_ddiv>
 800cf38:	f007 070f 	and.w	r7, r7, #15
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	468b      	mov	fp, r1
 800cf40:	2503      	movs	r5, #3
 800cf42:	4eac      	ldr	r6, [pc, #688]	; (800d1f4 <_dtoa_r+0x61c>)
 800cf44:	b957      	cbnz	r7, 800cf5c <_dtoa_r+0x384>
 800cf46:	4642      	mov	r2, r8
 800cf48:	464b      	mov	r3, r9
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	4659      	mov	r1, fp
 800cf4e:	f7f3 fc7d 	bl	800084c <__aeabi_ddiv>
 800cf52:	4682      	mov	sl, r0
 800cf54:	468b      	mov	fp, r1
 800cf56:	e028      	b.n	800cfaa <_dtoa_r+0x3d2>
 800cf58:	2502      	movs	r5, #2
 800cf5a:	e7f2      	b.n	800cf42 <_dtoa_r+0x36a>
 800cf5c:	07f9      	lsls	r1, r7, #31
 800cf5e:	d508      	bpl.n	800cf72 <_dtoa_r+0x39a>
 800cf60:	4640      	mov	r0, r8
 800cf62:	4649      	mov	r1, r9
 800cf64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf68:	f7f3 fb46 	bl	80005f8 <__aeabi_dmul>
 800cf6c:	3501      	adds	r5, #1
 800cf6e:	4680      	mov	r8, r0
 800cf70:	4689      	mov	r9, r1
 800cf72:	107f      	asrs	r7, r7, #1
 800cf74:	3608      	adds	r6, #8
 800cf76:	e7e5      	b.n	800cf44 <_dtoa_r+0x36c>
 800cf78:	f000 809b 	beq.w	800d0b2 <_dtoa_r+0x4da>
 800cf7c:	9b00      	ldr	r3, [sp, #0]
 800cf7e:	4f9d      	ldr	r7, [pc, #628]	; (800d1f4 <_dtoa_r+0x61c>)
 800cf80:	425e      	negs	r6, r3
 800cf82:	4b9b      	ldr	r3, [pc, #620]	; (800d1f0 <_dtoa_r+0x618>)
 800cf84:	f006 020f 	and.w	r2, r6, #15
 800cf88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	ec51 0b19 	vmov	r0, r1, d9
 800cf94:	f7f3 fb30 	bl	80005f8 <__aeabi_dmul>
 800cf98:	1136      	asrs	r6, r6, #4
 800cf9a:	4682      	mov	sl, r0
 800cf9c:	468b      	mov	fp, r1
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2502      	movs	r5, #2
 800cfa2:	2e00      	cmp	r6, #0
 800cfa4:	d17a      	bne.n	800d09c <_dtoa_r+0x4c4>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1d3      	bne.n	800cf52 <_dtoa_r+0x37a>
 800cfaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f000 8082 	beq.w	800d0b6 <_dtoa_r+0x4de>
 800cfb2:	4b91      	ldr	r3, [pc, #580]	; (800d1f8 <_dtoa_r+0x620>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4650      	mov	r0, sl
 800cfb8:	4659      	mov	r1, fp
 800cfba:	f7f3 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d079      	beq.n	800d0b6 <_dtoa_r+0x4de>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d076      	beq.n	800d0b6 <_dtoa_r+0x4de>
 800cfc8:	9b02      	ldr	r3, [sp, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	dd36      	ble.n	800d03c <_dtoa_r+0x464>
 800cfce:	9b00      	ldr	r3, [sp, #0]
 800cfd0:	4650      	mov	r0, sl
 800cfd2:	4659      	mov	r1, fp
 800cfd4:	1e5f      	subs	r7, r3, #1
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	4b88      	ldr	r3, [pc, #544]	; (800d1fc <_dtoa_r+0x624>)
 800cfda:	f7f3 fb0d 	bl	80005f8 <__aeabi_dmul>
 800cfde:	9e02      	ldr	r6, [sp, #8]
 800cfe0:	4682      	mov	sl, r0
 800cfe2:	468b      	mov	fp, r1
 800cfe4:	3501      	adds	r5, #1
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f7f3 fa9c 	bl	8000524 <__aeabi_i2d>
 800cfec:	4652      	mov	r2, sl
 800cfee:	465b      	mov	r3, fp
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	4b82      	ldr	r3, [pc, #520]	; (800d200 <_dtoa_r+0x628>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	f7f3 f948 	bl	800028c <__adddf3>
 800cffc:	46d0      	mov	r8, sl
 800cffe:	46d9      	mov	r9, fp
 800d000:	4682      	mov	sl, r0
 800d002:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d006:	2e00      	cmp	r6, #0
 800d008:	d158      	bne.n	800d0bc <_dtoa_r+0x4e4>
 800d00a:	4b7e      	ldr	r3, [pc, #504]	; (800d204 <_dtoa_r+0x62c>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	4640      	mov	r0, r8
 800d010:	4649      	mov	r1, r9
 800d012:	f7f3 f939 	bl	8000288 <__aeabi_dsub>
 800d016:	4652      	mov	r2, sl
 800d018:	465b      	mov	r3, fp
 800d01a:	4680      	mov	r8, r0
 800d01c:	4689      	mov	r9, r1
 800d01e:	f7f3 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 800d022:	2800      	cmp	r0, #0
 800d024:	f040 8295 	bne.w	800d552 <_dtoa_r+0x97a>
 800d028:	4652      	mov	r2, sl
 800d02a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d02e:	4640      	mov	r0, r8
 800d030:	4649      	mov	r1, r9
 800d032:	f7f3 fd53 	bl	8000adc <__aeabi_dcmplt>
 800d036:	2800      	cmp	r0, #0
 800d038:	f040 8289 	bne.w	800d54e <_dtoa_r+0x976>
 800d03c:	ec5b ab19 	vmov	sl, fp, d9
 800d040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d042:	2b00      	cmp	r3, #0
 800d044:	f2c0 8148 	blt.w	800d2d8 <_dtoa_r+0x700>
 800d048:	9a00      	ldr	r2, [sp, #0]
 800d04a:	2a0e      	cmp	r2, #14
 800d04c:	f300 8144 	bgt.w	800d2d8 <_dtoa_r+0x700>
 800d050:	4b67      	ldr	r3, [pc, #412]	; (800d1f0 <_dtoa_r+0x618>)
 800d052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d056:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f280 80d5 	bge.w	800d20c <_dtoa_r+0x634>
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	f300 80d1 	bgt.w	800d20c <_dtoa_r+0x634>
 800d06a:	f040 826f 	bne.w	800d54c <_dtoa_r+0x974>
 800d06e:	4b65      	ldr	r3, [pc, #404]	; (800d204 <_dtoa_r+0x62c>)
 800d070:	2200      	movs	r2, #0
 800d072:	4640      	mov	r0, r8
 800d074:	4649      	mov	r1, r9
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	4652      	mov	r2, sl
 800d07c:	465b      	mov	r3, fp
 800d07e:	f7f3 fd41 	bl	8000b04 <__aeabi_dcmpge>
 800d082:	9e03      	ldr	r6, [sp, #12]
 800d084:	4637      	mov	r7, r6
 800d086:	2800      	cmp	r0, #0
 800d088:	f040 8245 	bne.w	800d516 <_dtoa_r+0x93e>
 800d08c:	9d01      	ldr	r5, [sp, #4]
 800d08e:	2331      	movs	r3, #49	; 0x31
 800d090:	f805 3b01 	strb.w	r3, [r5], #1
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	e240      	b.n	800d51e <_dtoa_r+0x946>
 800d09c:	07f2      	lsls	r2, r6, #31
 800d09e:	d505      	bpl.n	800d0ac <_dtoa_r+0x4d4>
 800d0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a4:	f7f3 faa8 	bl	80005f8 <__aeabi_dmul>
 800d0a8:	3501      	adds	r5, #1
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	1076      	asrs	r6, r6, #1
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	e777      	b.n	800cfa2 <_dtoa_r+0x3ca>
 800d0b2:	2502      	movs	r5, #2
 800d0b4:	e779      	b.n	800cfaa <_dtoa_r+0x3d2>
 800d0b6:	9f00      	ldr	r7, [sp, #0]
 800d0b8:	9e03      	ldr	r6, [sp, #12]
 800d0ba:	e794      	b.n	800cfe6 <_dtoa_r+0x40e>
 800d0bc:	9901      	ldr	r1, [sp, #4]
 800d0be:	4b4c      	ldr	r3, [pc, #304]	; (800d1f0 <_dtoa_r+0x618>)
 800d0c0:	4431      	add	r1, r6
 800d0c2:	910d      	str	r1, [sp, #52]	; 0x34
 800d0c4:	9908      	ldr	r1, [sp, #32]
 800d0c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0ce:	2900      	cmp	r1, #0
 800d0d0:	d043      	beq.n	800d15a <_dtoa_r+0x582>
 800d0d2:	494d      	ldr	r1, [pc, #308]	; (800d208 <_dtoa_r+0x630>)
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	f7f3 fbb9 	bl	800084c <__aeabi_ddiv>
 800d0da:	4652      	mov	r2, sl
 800d0dc:	465b      	mov	r3, fp
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	9d01      	ldr	r5, [sp, #4]
 800d0e4:	4682      	mov	sl, r0
 800d0e6:	468b      	mov	fp, r1
 800d0e8:	4649      	mov	r1, r9
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	f7f3 fd34 	bl	8000b58 <__aeabi_d2iz>
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	f7f3 fa17 	bl	8000524 <__aeabi_i2d>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	4640      	mov	r0, r8
 800d0fc:	4649      	mov	r1, r9
 800d0fe:	f7f3 f8c3 	bl	8000288 <__aeabi_dsub>
 800d102:	3630      	adds	r6, #48	; 0x30
 800d104:	f805 6b01 	strb.w	r6, [r5], #1
 800d108:	4652      	mov	r2, sl
 800d10a:	465b      	mov	r3, fp
 800d10c:	4680      	mov	r8, r0
 800d10e:	4689      	mov	r9, r1
 800d110:	f7f3 fce4 	bl	8000adc <__aeabi_dcmplt>
 800d114:	2800      	cmp	r0, #0
 800d116:	d163      	bne.n	800d1e0 <_dtoa_r+0x608>
 800d118:	4642      	mov	r2, r8
 800d11a:	464b      	mov	r3, r9
 800d11c:	4936      	ldr	r1, [pc, #216]	; (800d1f8 <_dtoa_r+0x620>)
 800d11e:	2000      	movs	r0, #0
 800d120:	f7f3 f8b2 	bl	8000288 <__aeabi_dsub>
 800d124:	4652      	mov	r2, sl
 800d126:	465b      	mov	r3, fp
 800d128:	f7f3 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f040 80b5 	bne.w	800d29c <_dtoa_r+0x6c4>
 800d132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d134:	429d      	cmp	r5, r3
 800d136:	d081      	beq.n	800d03c <_dtoa_r+0x464>
 800d138:	4b30      	ldr	r3, [pc, #192]	; (800d1fc <_dtoa_r+0x624>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	4650      	mov	r0, sl
 800d13e:	4659      	mov	r1, fp
 800d140:	f7f3 fa5a 	bl	80005f8 <__aeabi_dmul>
 800d144:	4b2d      	ldr	r3, [pc, #180]	; (800d1fc <_dtoa_r+0x624>)
 800d146:	4682      	mov	sl, r0
 800d148:	468b      	mov	fp, r1
 800d14a:	4640      	mov	r0, r8
 800d14c:	4649      	mov	r1, r9
 800d14e:	2200      	movs	r2, #0
 800d150:	f7f3 fa52 	bl	80005f8 <__aeabi_dmul>
 800d154:	4680      	mov	r8, r0
 800d156:	4689      	mov	r9, r1
 800d158:	e7c6      	b.n	800d0e8 <_dtoa_r+0x510>
 800d15a:	4650      	mov	r0, sl
 800d15c:	4659      	mov	r1, fp
 800d15e:	f7f3 fa4b 	bl	80005f8 <__aeabi_dmul>
 800d162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d164:	9d01      	ldr	r5, [sp, #4]
 800d166:	930f      	str	r3, [sp, #60]	; 0x3c
 800d168:	4682      	mov	sl, r0
 800d16a:	468b      	mov	fp, r1
 800d16c:	4649      	mov	r1, r9
 800d16e:	4640      	mov	r0, r8
 800d170:	f7f3 fcf2 	bl	8000b58 <__aeabi_d2iz>
 800d174:	4606      	mov	r6, r0
 800d176:	f7f3 f9d5 	bl	8000524 <__aeabi_i2d>
 800d17a:	3630      	adds	r6, #48	; 0x30
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 f880 	bl	8000288 <__aeabi_dsub>
 800d188:	f805 6b01 	strb.w	r6, [r5], #1
 800d18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d18e:	429d      	cmp	r5, r3
 800d190:	4680      	mov	r8, r0
 800d192:	4689      	mov	r9, r1
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	d124      	bne.n	800d1e4 <_dtoa_r+0x60c>
 800d19a:	4b1b      	ldr	r3, [pc, #108]	; (800d208 <_dtoa_r+0x630>)
 800d19c:	4650      	mov	r0, sl
 800d19e:	4659      	mov	r1, fp
 800d1a0:	f7f3 f874 	bl	800028c <__adddf3>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	f7f3 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d173      	bne.n	800d29c <_dtoa_r+0x6c4>
 800d1b4:	4652      	mov	r2, sl
 800d1b6:	465b      	mov	r3, fp
 800d1b8:	4913      	ldr	r1, [pc, #76]	; (800d208 <_dtoa_r+0x630>)
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	f7f3 f864 	bl	8000288 <__aeabi_dsub>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	f7f3 fc88 	bl	8000adc <__aeabi_dcmplt>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f43f af35 	beq.w	800d03c <_dtoa_r+0x464>
 800d1d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1d4:	1e6b      	subs	r3, r5, #1
 800d1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1dc:	2b30      	cmp	r3, #48	; 0x30
 800d1de:	d0f8      	beq.n	800d1d2 <_dtoa_r+0x5fa>
 800d1e0:	9700      	str	r7, [sp, #0]
 800d1e2:	e049      	b.n	800d278 <_dtoa_r+0x6a0>
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <_dtoa_r+0x624>)
 800d1e6:	f7f3 fa07 	bl	80005f8 <__aeabi_dmul>
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4689      	mov	r9, r1
 800d1ee:	e7bd      	b.n	800d16c <_dtoa_r+0x594>
 800d1f0:	08011ed8 	.word	0x08011ed8
 800d1f4:	08011eb0 	.word	0x08011eb0
 800d1f8:	3ff00000 	.word	0x3ff00000
 800d1fc:	40240000 	.word	0x40240000
 800d200:	401c0000 	.word	0x401c0000
 800d204:	40140000 	.word	0x40140000
 800d208:	3fe00000 	.word	0x3fe00000
 800d20c:	9d01      	ldr	r5, [sp, #4]
 800d20e:	4656      	mov	r6, sl
 800d210:	465f      	mov	r7, fp
 800d212:	4642      	mov	r2, r8
 800d214:	464b      	mov	r3, r9
 800d216:	4630      	mov	r0, r6
 800d218:	4639      	mov	r1, r7
 800d21a:	f7f3 fb17 	bl	800084c <__aeabi_ddiv>
 800d21e:	f7f3 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800d222:	4682      	mov	sl, r0
 800d224:	f7f3 f97e 	bl	8000524 <__aeabi_i2d>
 800d228:	4642      	mov	r2, r8
 800d22a:	464b      	mov	r3, r9
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4630      	mov	r0, r6
 800d236:	4639      	mov	r1, r7
 800d238:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d23c:	f7f3 f824 	bl	8000288 <__aeabi_dsub>
 800d240:	f805 6b01 	strb.w	r6, [r5], #1
 800d244:	9e01      	ldr	r6, [sp, #4]
 800d246:	9f03      	ldr	r7, [sp, #12]
 800d248:	1bae      	subs	r6, r5, r6
 800d24a:	42b7      	cmp	r7, r6
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	d135      	bne.n	800d2be <_dtoa_r+0x6e6>
 800d252:	f7f3 f81b 	bl	800028c <__adddf3>
 800d256:	4642      	mov	r2, r8
 800d258:	464b      	mov	r3, r9
 800d25a:	4606      	mov	r6, r0
 800d25c:	460f      	mov	r7, r1
 800d25e:	f7f3 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 800d262:	b9d0      	cbnz	r0, 800d29a <_dtoa_r+0x6c2>
 800d264:	4642      	mov	r2, r8
 800d266:	464b      	mov	r3, r9
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f3 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d270:	b110      	cbz	r0, 800d278 <_dtoa_r+0x6a0>
 800d272:	f01a 0f01 	tst.w	sl, #1
 800d276:	d110      	bne.n	800d29a <_dtoa_r+0x6c2>
 800d278:	4620      	mov	r0, r4
 800d27a:	ee18 1a10 	vmov	r1, s16
 800d27e:	f000 fae5 	bl	800d84c <_Bfree>
 800d282:	2300      	movs	r3, #0
 800d284:	9800      	ldr	r0, [sp, #0]
 800d286:	702b      	strb	r3, [r5, #0]
 800d288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d28a:	3001      	adds	r0, #1
 800d28c:	6018      	str	r0, [r3, #0]
 800d28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d290:	2b00      	cmp	r3, #0
 800d292:	f43f acf1 	beq.w	800cc78 <_dtoa_r+0xa0>
 800d296:	601d      	str	r5, [r3, #0]
 800d298:	e4ee      	b.n	800cc78 <_dtoa_r+0xa0>
 800d29a:	9f00      	ldr	r7, [sp, #0]
 800d29c:	462b      	mov	r3, r5
 800d29e:	461d      	mov	r5, r3
 800d2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2a4:	2a39      	cmp	r2, #57	; 0x39
 800d2a6:	d106      	bne.n	800d2b6 <_dtoa_r+0x6de>
 800d2a8:	9a01      	ldr	r2, [sp, #4]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d1f7      	bne.n	800d29e <_dtoa_r+0x6c6>
 800d2ae:	9901      	ldr	r1, [sp, #4]
 800d2b0:	2230      	movs	r2, #48	; 0x30
 800d2b2:	3701      	adds	r7, #1
 800d2b4:	700a      	strb	r2, [r1, #0]
 800d2b6:	781a      	ldrb	r2, [r3, #0]
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e790      	b.n	800d1e0 <_dtoa_r+0x608>
 800d2be:	4ba6      	ldr	r3, [pc, #664]	; (800d558 <_dtoa_r+0x980>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f7f3 f999 	bl	80005f8 <__aeabi_dmul>
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	460f      	mov	r7, r1
 800d2ce:	f7f3 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d09d      	beq.n	800d212 <_dtoa_r+0x63a>
 800d2d6:	e7cf      	b.n	800d278 <_dtoa_r+0x6a0>
 800d2d8:	9a08      	ldr	r2, [sp, #32]
 800d2da:	2a00      	cmp	r2, #0
 800d2dc:	f000 80d7 	beq.w	800d48e <_dtoa_r+0x8b6>
 800d2e0:	9a06      	ldr	r2, [sp, #24]
 800d2e2:	2a01      	cmp	r2, #1
 800d2e4:	f300 80ba 	bgt.w	800d45c <_dtoa_r+0x884>
 800d2e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	f000 80b2 	beq.w	800d454 <_dtoa_r+0x87c>
 800d2f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2f4:	9e07      	ldr	r6, [sp, #28]
 800d2f6:	9d04      	ldr	r5, [sp, #16]
 800d2f8:	9a04      	ldr	r2, [sp, #16]
 800d2fa:	441a      	add	r2, r3
 800d2fc:	9204      	str	r2, [sp, #16]
 800d2fe:	9a05      	ldr	r2, [sp, #20]
 800d300:	2101      	movs	r1, #1
 800d302:	441a      	add	r2, r3
 800d304:	4620      	mov	r0, r4
 800d306:	9205      	str	r2, [sp, #20]
 800d308:	f000 fb58 	bl	800d9bc <__i2b>
 800d30c:	4607      	mov	r7, r0
 800d30e:	2d00      	cmp	r5, #0
 800d310:	dd0c      	ble.n	800d32c <_dtoa_r+0x754>
 800d312:	9b05      	ldr	r3, [sp, #20]
 800d314:	2b00      	cmp	r3, #0
 800d316:	dd09      	ble.n	800d32c <_dtoa_r+0x754>
 800d318:	42ab      	cmp	r3, r5
 800d31a:	9a04      	ldr	r2, [sp, #16]
 800d31c:	bfa8      	it	ge
 800d31e:	462b      	movge	r3, r5
 800d320:	1ad2      	subs	r2, r2, r3
 800d322:	9204      	str	r2, [sp, #16]
 800d324:	9a05      	ldr	r2, [sp, #20]
 800d326:	1aed      	subs	r5, r5, r3
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	9305      	str	r3, [sp, #20]
 800d32c:	9b07      	ldr	r3, [sp, #28]
 800d32e:	b31b      	cbz	r3, 800d378 <_dtoa_r+0x7a0>
 800d330:	9b08      	ldr	r3, [sp, #32]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 80af 	beq.w	800d496 <_dtoa_r+0x8be>
 800d338:	2e00      	cmp	r6, #0
 800d33a:	dd13      	ble.n	800d364 <_dtoa_r+0x78c>
 800d33c:	4639      	mov	r1, r7
 800d33e:	4632      	mov	r2, r6
 800d340:	4620      	mov	r0, r4
 800d342:	f000 fbfb 	bl	800db3c <__pow5mult>
 800d346:	ee18 2a10 	vmov	r2, s16
 800d34a:	4601      	mov	r1, r0
 800d34c:	4607      	mov	r7, r0
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 fb4a 	bl	800d9e8 <__multiply>
 800d354:	ee18 1a10 	vmov	r1, s16
 800d358:	4680      	mov	r8, r0
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 fa76 	bl	800d84c <_Bfree>
 800d360:	ee08 8a10 	vmov	s16, r8
 800d364:	9b07      	ldr	r3, [sp, #28]
 800d366:	1b9a      	subs	r2, r3, r6
 800d368:	d006      	beq.n	800d378 <_dtoa_r+0x7a0>
 800d36a:	ee18 1a10 	vmov	r1, s16
 800d36e:	4620      	mov	r0, r4
 800d370:	f000 fbe4 	bl	800db3c <__pow5mult>
 800d374:	ee08 0a10 	vmov	s16, r0
 800d378:	2101      	movs	r1, #1
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 fb1e 	bl	800d9bc <__i2b>
 800d380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d382:	2b00      	cmp	r3, #0
 800d384:	4606      	mov	r6, r0
 800d386:	f340 8088 	ble.w	800d49a <_dtoa_r+0x8c2>
 800d38a:	461a      	mov	r2, r3
 800d38c:	4601      	mov	r1, r0
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fbd4 	bl	800db3c <__pow5mult>
 800d394:	9b06      	ldr	r3, [sp, #24]
 800d396:	2b01      	cmp	r3, #1
 800d398:	4606      	mov	r6, r0
 800d39a:	f340 8081 	ble.w	800d4a0 <_dtoa_r+0x8c8>
 800d39e:	f04f 0800 	mov.w	r8, #0
 800d3a2:	6933      	ldr	r3, [r6, #16]
 800d3a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3a8:	6918      	ldr	r0, [r3, #16]
 800d3aa:	f000 fab7 	bl	800d91c <__hi0bits>
 800d3ae:	f1c0 0020 	rsb	r0, r0, #32
 800d3b2:	9b05      	ldr	r3, [sp, #20]
 800d3b4:	4418      	add	r0, r3
 800d3b6:	f010 001f 	ands.w	r0, r0, #31
 800d3ba:	f000 8092 	beq.w	800d4e2 <_dtoa_r+0x90a>
 800d3be:	f1c0 0320 	rsb	r3, r0, #32
 800d3c2:	2b04      	cmp	r3, #4
 800d3c4:	f340 808a 	ble.w	800d4dc <_dtoa_r+0x904>
 800d3c8:	f1c0 001c 	rsb	r0, r0, #28
 800d3cc:	9b04      	ldr	r3, [sp, #16]
 800d3ce:	4403      	add	r3, r0
 800d3d0:	9304      	str	r3, [sp, #16]
 800d3d2:	9b05      	ldr	r3, [sp, #20]
 800d3d4:	4403      	add	r3, r0
 800d3d6:	4405      	add	r5, r0
 800d3d8:	9305      	str	r3, [sp, #20]
 800d3da:	9b04      	ldr	r3, [sp, #16]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	dd07      	ble.n	800d3f0 <_dtoa_r+0x818>
 800d3e0:	ee18 1a10 	vmov	r1, s16
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 fc02 	bl	800dbf0 <__lshift>
 800d3ec:	ee08 0a10 	vmov	s16, r0
 800d3f0:	9b05      	ldr	r3, [sp, #20]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dd05      	ble.n	800d402 <_dtoa_r+0x82a>
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f000 fbf8 	bl	800dbf0 <__lshift>
 800d400:	4606      	mov	r6, r0
 800d402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d404:	2b00      	cmp	r3, #0
 800d406:	d06e      	beq.n	800d4e6 <_dtoa_r+0x90e>
 800d408:	ee18 0a10 	vmov	r0, s16
 800d40c:	4631      	mov	r1, r6
 800d40e:	f000 fc5f 	bl	800dcd0 <__mcmp>
 800d412:	2800      	cmp	r0, #0
 800d414:	da67      	bge.n	800d4e6 <_dtoa_r+0x90e>
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	3b01      	subs	r3, #1
 800d41a:	ee18 1a10 	vmov	r1, s16
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	220a      	movs	r2, #10
 800d422:	2300      	movs	r3, #0
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fa33 	bl	800d890 <__multadd>
 800d42a:	9b08      	ldr	r3, [sp, #32]
 800d42c:	ee08 0a10 	vmov	s16, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	f000 81b1 	beq.w	800d798 <_dtoa_r+0xbc0>
 800d436:	2300      	movs	r3, #0
 800d438:	4639      	mov	r1, r7
 800d43a:	220a      	movs	r2, #10
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fa27 	bl	800d890 <__multadd>
 800d442:	9b02      	ldr	r3, [sp, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	4607      	mov	r7, r0
 800d448:	f300 808e 	bgt.w	800d568 <_dtoa_r+0x990>
 800d44c:	9b06      	ldr	r3, [sp, #24]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	dc51      	bgt.n	800d4f6 <_dtoa_r+0x91e>
 800d452:	e089      	b.n	800d568 <_dtoa_r+0x990>
 800d454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d45a:	e74b      	b.n	800d2f4 <_dtoa_r+0x71c>
 800d45c:	9b03      	ldr	r3, [sp, #12]
 800d45e:	1e5e      	subs	r6, r3, #1
 800d460:	9b07      	ldr	r3, [sp, #28]
 800d462:	42b3      	cmp	r3, r6
 800d464:	bfbf      	itttt	lt
 800d466:	9b07      	ldrlt	r3, [sp, #28]
 800d468:	9607      	strlt	r6, [sp, #28]
 800d46a:	1af2      	sublt	r2, r6, r3
 800d46c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d46e:	bfb6      	itet	lt
 800d470:	189b      	addlt	r3, r3, r2
 800d472:	1b9e      	subge	r6, r3, r6
 800d474:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	bfb8      	it	lt
 800d47a:	2600      	movlt	r6, #0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bfb7      	itett	lt
 800d480:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d484:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d488:	1a9d      	sublt	r5, r3, r2
 800d48a:	2300      	movlt	r3, #0
 800d48c:	e734      	b.n	800d2f8 <_dtoa_r+0x720>
 800d48e:	9e07      	ldr	r6, [sp, #28]
 800d490:	9d04      	ldr	r5, [sp, #16]
 800d492:	9f08      	ldr	r7, [sp, #32]
 800d494:	e73b      	b.n	800d30e <_dtoa_r+0x736>
 800d496:	9a07      	ldr	r2, [sp, #28]
 800d498:	e767      	b.n	800d36a <_dtoa_r+0x792>
 800d49a:	9b06      	ldr	r3, [sp, #24]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	dc18      	bgt.n	800d4d2 <_dtoa_r+0x8fa>
 800d4a0:	f1ba 0f00 	cmp.w	sl, #0
 800d4a4:	d115      	bne.n	800d4d2 <_dtoa_r+0x8fa>
 800d4a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4aa:	b993      	cbnz	r3, 800d4d2 <_dtoa_r+0x8fa>
 800d4ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4b0:	0d1b      	lsrs	r3, r3, #20
 800d4b2:	051b      	lsls	r3, r3, #20
 800d4b4:	b183      	cbz	r3, 800d4d8 <_dtoa_r+0x900>
 800d4b6:	9b04      	ldr	r3, [sp, #16]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	9304      	str	r3, [sp, #16]
 800d4bc:	9b05      	ldr	r3, [sp, #20]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	9305      	str	r3, [sp, #20]
 800d4c2:	f04f 0801 	mov.w	r8, #1
 800d4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f47f af6a 	bne.w	800d3a2 <_dtoa_r+0x7ca>
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	e76f      	b.n	800d3b2 <_dtoa_r+0x7da>
 800d4d2:	f04f 0800 	mov.w	r8, #0
 800d4d6:	e7f6      	b.n	800d4c6 <_dtoa_r+0x8ee>
 800d4d8:	4698      	mov	r8, r3
 800d4da:	e7f4      	b.n	800d4c6 <_dtoa_r+0x8ee>
 800d4dc:	f43f af7d 	beq.w	800d3da <_dtoa_r+0x802>
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	301c      	adds	r0, #28
 800d4e4:	e772      	b.n	800d3cc <_dtoa_r+0x7f4>
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dc37      	bgt.n	800d55c <_dtoa_r+0x984>
 800d4ec:	9b06      	ldr	r3, [sp, #24]
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	dd34      	ble.n	800d55c <_dtoa_r+0x984>
 800d4f2:	9b03      	ldr	r3, [sp, #12]
 800d4f4:	9302      	str	r3, [sp, #8]
 800d4f6:	9b02      	ldr	r3, [sp, #8]
 800d4f8:	b96b      	cbnz	r3, 800d516 <_dtoa_r+0x93e>
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	2205      	movs	r2, #5
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 f9c6 	bl	800d890 <__multadd>
 800d504:	4601      	mov	r1, r0
 800d506:	4606      	mov	r6, r0
 800d508:	ee18 0a10 	vmov	r0, s16
 800d50c:	f000 fbe0 	bl	800dcd0 <__mcmp>
 800d510:	2800      	cmp	r0, #0
 800d512:	f73f adbb 	bgt.w	800d08c <_dtoa_r+0x4b4>
 800d516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d518:	9d01      	ldr	r5, [sp, #4]
 800d51a:	43db      	mvns	r3, r3
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	f04f 0800 	mov.w	r8, #0
 800d522:	4631      	mov	r1, r6
 800d524:	4620      	mov	r0, r4
 800d526:	f000 f991 	bl	800d84c <_Bfree>
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	f43f aea4 	beq.w	800d278 <_dtoa_r+0x6a0>
 800d530:	f1b8 0f00 	cmp.w	r8, #0
 800d534:	d005      	beq.n	800d542 <_dtoa_r+0x96a>
 800d536:	45b8      	cmp	r8, r7
 800d538:	d003      	beq.n	800d542 <_dtoa_r+0x96a>
 800d53a:	4641      	mov	r1, r8
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 f985 	bl	800d84c <_Bfree>
 800d542:	4639      	mov	r1, r7
 800d544:	4620      	mov	r0, r4
 800d546:	f000 f981 	bl	800d84c <_Bfree>
 800d54a:	e695      	b.n	800d278 <_dtoa_r+0x6a0>
 800d54c:	2600      	movs	r6, #0
 800d54e:	4637      	mov	r7, r6
 800d550:	e7e1      	b.n	800d516 <_dtoa_r+0x93e>
 800d552:	9700      	str	r7, [sp, #0]
 800d554:	4637      	mov	r7, r6
 800d556:	e599      	b.n	800d08c <_dtoa_r+0x4b4>
 800d558:	40240000 	.word	0x40240000
 800d55c:	9b08      	ldr	r3, [sp, #32]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 80ca 	beq.w	800d6f8 <_dtoa_r+0xb20>
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	9302      	str	r3, [sp, #8]
 800d568:	2d00      	cmp	r5, #0
 800d56a:	dd05      	ble.n	800d578 <_dtoa_r+0x9a0>
 800d56c:	4639      	mov	r1, r7
 800d56e:	462a      	mov	r2, r5
 800d570:	4620      	mov	r0, r4
 800d572:	f000 fb3d 	bl	800dbf0 <__lshift>
 800d576:	4607      	mov	r7, r0
 800d578:	f1b8 0f00 	cmp.w	r8, #0
 800d57c:	d05b      	beq.n	800d636 <_dtoa_r+0xa5e>
 800d57e:	6879      	ldr	r1, [r7, #4]
 800d580:	4620      	mov	r0, r4
 800d582:	f000 f923 	bl	800d7cc <_Balloc>
 800d586:	4605      	mov	r5, r0
 800d588:	b928      	cbnz	r0, 800d596 <_dtoa_r+0x9be>
 800d58a:	4b87      	ldr	r3, [pc, #540]	; (800d7a8 <_dtoa_r+0xbd0>)
 800d58c:	4602      	mov	r2, r0
 800d58e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d592:	f7ff bb3b 	b.w	800cc0c <_dtoa_r+0x34>
 800d596:	693a      	ldr	r2, [r7, #16]
 800d598:	3202      	adds	r2, #2
 800d59a:	0092      	lsls	r2, r2, #2
 800d59c:	f107 010c 	add.w	r1, r7, #12
 800d5a0:	300c      	adds	r0, #12
 800d5a2:	f7fe fdeb 	bl	800c17c <memcpy>
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 fb20 	bl	800dbf0 <__lshift>
 800d5b0:	9b01      	ldr	r3, [sp, #4]
 800d5b2:	f103 0901 	add.w	r9, r3, #1
 800d5b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	f00a 0301 	and.w	r3, sl, #1
 800d5c2:	46b8      	mov	r8, r7
 800d5c4:	9304      	str	r3, [sp, #16]
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	ee18 0a10 	vmov	r0, s16
 800d5ce:	f7ff fa75 	bl	800cabc <quorem>
 800d5d2:	4641      	mov	r1, r8
 800d5d4:	9002      	str	r0, [sp, #8]
 800d5d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5da:	ee18 0a10 	vmov	r0, s16
 800d5de:	f000 fb77 	bl	800dcd0 <__mcmp>
 800d5e2:	463a      	mov	r2, r7
 800d5e4:	9003      	str	r0, [sp, #12]
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f000 fb8d 	bl	800dd08 <__mdiff>
 800d5ee:	68c2      	ldr	r2, [r0, #12]
 800d5f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	bb02      	cbnz	r2, 800d63a <_dtoa_r+0xa62>
 800d5f8:	4601      	mov	r1, r0
 800d5fa:	ee18 0a10 	vmov	r0, s16
 800d5fe:	f000 fb67 	bl	800dcd0 <__mcmp>
 800d602:	4602      	mov	r2, r0
 800d604:	4629      	mov	r1, r5
 800d606:	4620      	mov	r0, r4
 800d608:	9207      	str	r2, [sp, #28]
 800d60a:	f000 f91f 	bl	800d84c <_Bfree>
 800d60e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d612:	ea43 0102 	orr.w	r1, r3, r2
 800d616:	9b04      	ldr	r3, [sp, #16]
 800d618:	430b      	orrs	r3, r1
 800d61a:	464d      	mov	r5, r9
 800d61c:	d10f      	bne.n	800d63e <_dtoa_r+0xa66>
 800d61e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d622:	d02a      	beq.n	800d67a <_dtoa_r+0xaa2>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	dd02      	ble.n	800d630 <_dtoa_r+0xa58>
 800d62a:	9b02      	ldr	r3, [sp, #8]
 800d62c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d630:	f88b a000 	strb.w	sl, [fp]
 800d634:	e775      	b.n	800d522 <_dtoa_r+0x94a>
 800d636:	4638      	mov	r0, r7
 800d638:	e7ba      	b.n	800d5b0 <_dtoa_r+0x9d8>
 800d63a:	2201      	movs	r2, #1
 800d63c:	e7e2      	b.n	800d604 <_dtoa_r+0xa2c>
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	db04      	blt.n	800d64e <_dtoa_r+0xa76>
 800d644:	9906      	ldr	r1, [sp, #24]
 800d646:	430b      	orrs	r3, r1
 800d648:	9904      	ldr	r1, [sp, #16]
 800d64a:	430b      	orrs	r3, r1
 800d64c:	d122      	bne.n	800d694 <_dtoa_r+0xabc>
 800d64e:	2a00      	cmp	r2, #0
 800d650:	ddee      	ble.n	800d630 <_dtoa_r+0xa58>
 800d652:	ee18 1a10 	vmov	r1, s16
 800d656:	2201      	movs	r2, #1
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 fac9 	bl	800dbf0 <__lshift>
 800d65e:	4631      	mov	r1, r6
 800d660:	ee08 0a10 	vmov	s16, r0
 800d664:	f000 fb34 	bl	800dcd0 <__mcmp>
 800d668:	2800      	cmp	r0, #0
 800d66a:	dc03      	bgt.n	800d674 <_dtoa_r+0xa9c>
 800d66c:	d1e0      	bne.n	800d630 <_dtoa_r+0xa58>
 800d66e:	f01a 0f01 	tst.w	sl, #1
 800d672:	d0dd      	beq.n	800d630 <_dtoa_r+0xa58>
 800d674:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d678:	d1d7      	bne.n	800d62a <_dtoa_r+0xa52>
 800d67a:	2339      	movs	r3, #57	; 0x39
 800d67c:	f88b 3000 	strb.w	r3, [fp]
 800d680:	462b      	mov	r3, r5
 800d682:	461d      	mov	r5, r3
 800d684:	3b01      	subs	r3, #1
 800d686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d68a:	2a39      	cmp	r2, #57	; 0x39
 800d68c:	d071      	beq.n	800d772 <_dtoa_r+0xb9a>
 800d68e:	3201      	adds	r2, #1
 800d690:	701a      	strb	r2, [r3, #0]
 800d692:	e746      	b.n	800d522 <_dtoa_r+0x94a>
 800d694:	2a00      	cmp	r2, #0
 800d696:	dd07      	ble.n	800d6a8 <_dtoa_r+0xad0>
 800d698:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d69c:	d0ed      	beq.n	800d67a <_dtoa_r+0xaa2>
 800d69e:	f10a 0301 	add.w	r3, sl, #1
 800d6a2:	f88b 3000 	strb.w	r3, [fp]
 800d6a6:	e73c      	b.n	800d522 <_dtoa_r+0x94a>
 800d6a8:	9b05      	ldr	r3, [sp, #20]
 800d6aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d6ae:	4599      	cmp	r9, r3
 800d6b0:	d047      	beq.n	800d742 <_dtoa_r+0xb6a>
 800d6b2:	ee18 1a10 	vmov	r1, s16
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	220a      	movs	r2, #10
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f000 f8e8 	bl	800d890 <__multadd>
 800d6c0:	45b8      	cmp	r8, r7
 800d6c2:	ee08 0a10 	vmov	s16, r0
 800d6c6:	f04f 0300 	mov.w	r3, #0
 800d6ca:	f04f 020a 	mov.w	r2, #10
 800d6ce:	4641      	mov	r1, r8
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	d106      	bne.n	800d6e2 <_dtoa_r+0xb0a>
 800d6d4:	f000 f8dc 	bl	800d890 <__multadd>
 800d6d8:	4680      	mov	r8, r0
 800d6da:	4607      	mov	r7, r0
 800d6dc:	f109 0901 	add.w	r9, r9, #1
 800d6e0:	e772      	b.n	800d5c8 <_dtoa_r+0x9f0>
 800d6e2:	f000 f8d5 	bl	800d890 <__multadd>
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	4680      	mov	r8, r0
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	220a      	movs	r2, #10
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 f8ce 	bl	800d890 <__multadd>
 800d6f4:	4607      	mov	r7, r0
 800d6f6:	e7f1      	b.n	800d6dc <_dtoa_r+0xb04>
 800d6f8:	9b03      	ldr	r3, [sp, #12]
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	9d01      	ldr	r5, [sp, #4]
 800d6fe:	ee18 0a10 	vmov	r0, s16
 800d702:	4631      	mov	r1, r6
 800d704:	f7ff f9da 	bl	800cabc <quorem>
 800d708:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d70c:	9b01      	ldr	r3, [sp, #4]
 800d70e:	f805 ab01 	strb.w	sl, [r5], #1
 800d712:	1aea      	subs	r2, r5, r3
 800d714:	9b02      	ldr	r3, [sp, #8]
 800d716:	4293      	cmp	r3, r2
 800d718:	dd09      	ble.n	800d72e <_dtoa_r+0xb56>
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	2300      	movs	r3, #0
 800d720:	220a      	movs	r2, #10
 800d722:	4620      	mov	r0, r4
 800d724:	f000 f8b4 	bl	800d890 <__multadd>
 800d728:	ee08 0a10 	vmov	s16, r0
 800d72c:	e7e7      	b.n	800d6fe <_dtoa_r+0xb26>
 800d72e:	9b02      	ldr	r3, [sp, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	bfc8      	it	gt
 800d734:	461d      	movgt	r5, r3
 800d736:	9b01      	ldr	r3, [sp, #4]
 800d738:	bfd8      	it	le
 800d73a:	2501      	movle	r5, #1
 800d73c:	441d      	add	r5, r3
 800d73e:	f04f 0800 	mov.w	r8, #0
 800d742:	ee18 1a10 	vmov	r1, s16
 800d746:	2201      	movs	r2, #1
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 fa51 	bl	800dbf0 <__lshift>
 800d74e:	4631      	mov	r1, r6
 800d750:	ee08 0a10 	vmov	s16, r0
 800d754:	f000 fabc 	bl	800dcd0 <__mcmp>
 800d758:	2800      	cmp	r0, #0
 800d75a:	dc91      	bgt.n	800d680 <_dtoa_r+0xaa8>
 800d75c:	d102      	bne.n	800d764 <_dtoa_r+0xb8c>
 800d75e:	f01a 0f01 	tst.w	sl, #1
 800d762:	d18d      	bne.n	800d680 <_dtoa_r+0xaa8>
 800d764:	462b      	mov	r3, r5
 800d766:	461d      	mov	r5, r3
 800d768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d76c:	2a30      	cmp	r2, #48	; 0x30
 800d76e:	d0fa      	beq.n	800d766 <_dtoa_r+0xb8e>
 800d770:	e6d7      	b.n	800d522 <_dtoa_r+0x94a>
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	429a      	cmp	r2, r3
 800d776:	d184      	bne.n	800d682 <_dtoa_r+0xaaa>
 800d778:	9b00      	ldr	r3, [sp, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	2331      	movs	r3, #49	; 0x31
 800d780:	7013      	strb	r3, [r2, #0]
 800d782:	e6ce      	b.n	800d522 <_dtoa_r+0x94a>
 800d784:	4b09      	ldr	r3, [pc, #36]	; (800d7ac <_dtoa_r+0xbd4>)
 800d786:	f7ff ba95 	b.w	800ccb4 <_dtoa_r+0xdc>
 800d78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f47f aa6e 	bne.w	800cc6e <_dtoa_r+0x96>
 800d792:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <_dtoa_r+0xbd8>)
 800d794:	f7ff ba8e 	b.w	800ccb4 <_dtoa_r+0xdc>
 800d798:	9b02      	ldr	r3, [sp, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dcae      	bgt.n	800d6fc <_dtoa_r+0xb24>
 800d79e:	9b06      	ldr	r3, [sp, #24]
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	f73f aea8 	bgt.w	800d4f6 <_dtoa_r+0x91e>
 800d7a6:	e7a9      	b.n	800d6fc <_dtoa_r+0xb24>
 800d7a8:	08011e43 	.word	0x08011e43
 800d7ac:	08011da0 	.word	0x08011da0
 800d7b0:	08011dc4 	.word	0x08011dc4

0800d7b4 <_localeconv_r>:
 800d7b4:	4800      	ldr	r0, [pc, #0]	; (800d7b8 <_localeconv_r+0x4>)
 800d7b6:	4770      	bx	lr
 800d7b8:	2000020c 	.word	0x2000020c

0800d7bc <malloc>:
 800d7bc:	4b02      	ldr	r3, [pc, #8]	; (800d7c8 <malloc+0xc>)
 800d7be:	4601      	mov	r1, r0
 800d7c0:	6818      	ldr	r0, [r3, #0]
 800d7c2:	f000 bc09 	b.w	800dfd8 <_malloc_r>
 800d7c6:	bf00      	nop
 800d7c8:	200000b8 	.word	0x200000b8

0800d7cc <_Balloc>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	460d      	mov	r5, r1
 800d7d4:	b976      	cbnz	r6, 800d7f4 <_Balloc+0x28>
 800d7d6:	2010      	movs	r0, #16
 800d7d8:	f7ff fff0 	bl	800d7bc <malloc>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	6260      	str	r0, [r4, #36]	; 0x24
 800d7e0:	b920      	cbnz	r0, 800d7ec <_Balloc+0x20>
 800d7e2:	4b18      	ldr	r3, [pc, #96]	; (800d844 <_Balloc+0x78>)
 800d7e4:	4818      	ldr	r0, [pc, #96]	; (800d848 <_Balloc+0x7c>)
 800d7e6:	2166      	movs	r1, #102	; 0x66
 800d7e8:	f000 fdd6 	bl	800e398 <__assert_func>
 800d7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7f0:	6006      	str	r6, [r0, #0]
 800d7f2:	60c6      	str	r6, [r0, #12]
 800d7f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d7f6:	68f3      	ldr	r3, [r6, #12]
 800d7f8:	b183      	cbz	r3, 800d81c <_Balloc+0x50>
 800d7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d802:	b9b8      	cbnz	r0, 800d834 <_Balloc+0x68>
 800d804:	2101      	movs	r1, #1
 800d806:	fa01 f605 	lsl.w	r6, r1, r5
 800d80a:	1d72      	adds	r2, r6, #5
 800d80c:	0092      	lsls	r2, r2, #2
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 fb60 	bl	800ded4 <_calloc_r>
 800d814:	b160      	cbz	r0, 800d830 <_Balloc+0x64>
 800d816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d81a:	e00e      	b.n	800d83a <_Balloc+0x6e>
 800d81c:	2221      	movs	r2, #33	; 0x21
 800d81e:	2104      	movs	r1, #4
 800d820:	4620      	mov	r0, r4
 800d822:	f000 fb57 	bl	800ded4 <_calloc_r>
 800d826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d828:	60f0      	str	r0, [r6, #12]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e4      	bne.n	800d7fa <_Balloc+0x2e>
 800d830:	2000      	movs	r0, #0
 800d832:	bd70      	pop	{r4, r5, r6, pc}
 800d834:	6802      	ldr	r2, [r0, #0]
 800d836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d83a:	2300      	movs	r3, #0
 800d83c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d840:	e7f7      	b.n	800d832 <_Balloc+0x66>
 800d842:	bf00      	nop
 800d844:	08011dd1 	.word	0x08011dd1
 800d848:	08011e54 	.word	0x08011e54

0800d84c <_Bfree>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d850:	4605      	mov	r5, r0
 800d852:	460c      	mov	r4, r1
 800d854:	b976      	cbnz	r6, 800d874 <_Bfree+0x28>
 800d856:	2010      	movs	r0, #16
 800d858:	f7ff ffb0 	bl	800d7bc <malloc>
 800d85c:	4602      	mov	r2, r0
 800d85e:	6268      	str	r0, [r5, #36]	; 0x24
 800d860:	b920      	cbnz	r0, 800d86c <_Bfree+0x20>
 800d862:	4b09      	ldr	r3, [pc, #36]	; (800d888 <_Bfree+0x3c>)
 800d864:	4809      	ldr	r0, [pc, #36]	; (800d88c <_Bfree+0x40>)
 800d866:	218a      	movs	r1, #138	; 0x8a
 800d868:	f000 fd96 	bl	800e398 <__assert_func>
 800d86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d870:	6006      	str	r6, [r0, #0]
 800d872:	60c6      	str	r6, [r0, #12]
 800d874:	b13c      	cbz	r4, 800d886 <_Bfree+0x3a>
 800d876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d878:	6862      	ldr	r2, [r4, #4]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d880:	6021      	str	r1, [r4, #0]
 800d882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d886:	bd70      	pop	{r4, r5, r6, pc}
 800d888:	08011dd1 	.word	0x08011dd1
 800d88c:	08011e54 	.word	0x08011e54

0800d890 <__multadd>:
 800d890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d894:	690d      	ldr	r5, [r1, #16]
 800d896:	4607      	mov	r7, r0
 800d898:	460c      	mov	r4, r1
 800d89a:	461e      	mov	r6, r3
 800d89c:	f101 0c14 	add.w	ip, r1, #20
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f8dc 3000 	ldr.w	r3, [ip]
 800d8a6:	b299      	uxth	r1, r3
 800d8a8:	fb02 6101 	mla	r1, r2, r1, r6
 800d8ac:	0c1e      	lsrs	r6, r3, #16
 800d8ae:	0c0b      	lsrs	r3, r1, #16
 800d8b0:	fb02 3306 	mla	r3, r2, r6, r3
 800d8b4:	b289      	uxth	r1, r1
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8bc:	4285      	cmp	r5, r0
 800d8be:	f84c 1b04 	str.w	r1, [ip], #4
 800d8c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d8c6:	dcec      	bgt.n	800d8a2 <__multadd+0x12>
 800d8c8:	b30e      	cbz	r6, 800d90e <__multadd+0x7e>
 800d8ca:	68a3      	ldr	r3, [r4, #8]
 800d8cc:	42ab      	cmp	r3, r5
 800d8ce:	dc19      	bgt.n	800d904 <__multadd+0x74>
 800d8d0:	6861      	ldr	r1, [r4, #4]
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	3101      	adds	r1, #1
 800d8d6:	f7ff ff79 	bl	800d7cc <_Balloc>
 800d8da:	4680      	mov	r8, r0
 800d8dc:	b928      	cbnz	r0, 800d8ea <__multadd+0x5a>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <__multadd+0x84>)
 800d8e2:	480d      	ldr	r0, [pc, #52]	; (800d918 <__multadd+0x88>)
 800d8e4:	21b5      	movs	r1, #181	; 0xb5
 800d8e6:	f000 fd57 	bl	800e398 <__assert_func>
 800d8ea:	6922      	ldr	r2, [r4, #16]
 800d8ec:	3202      	adds	r2, #2
 800d8ee:	f104 010c 	add.w	r1, r4, #12
 800d8f2:	0092      	lsls	r2, r2, #2
 800d8f4:	300c      	adds	r0, #12
 800d8f6:	f7fe fc41 	bl	800c17c <memcpy>
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f7ff ffa5 	bl	800d84c <_Bfree>
 800d902:	4644      	mov	r4, r8
 800d904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d908:	3501      	adds	r5, #1
 800d90a:	615e      	str	r6, [r3, #20]
 800d90c:	6125      	str	r5, [r4, #16]
 800d90e:	4620      	mov	r0, r4
 800d910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d914:	08011e43 	.word	0x08011e43
 800d918:	08011e54 	.word	0x08011e54

0800d91c <__hi0bits>:
 800d91c:	0c03      	lsrs	r3, r0, #16
 800d91e:	041b      	lsls	r3, r3, #16
 800d920:	b9d3      	cbnz	r3, 800d958 <__hi0bits+0x3c>
 800d922:	0400      	lsls	r0, r0, #16
 800d924:	2310      	movs	r3, #16
 800d926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d92a:	bf04      	itt	eq
 800d92c:	0200      	lsleq	r0, r0, #8
 800d92e:	3308      	addeq	r3, #8
 800d930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d934:	bf04      	itt	eq
 800d936:	0100      	lsleq	r0, r0, #4
 800d938:	3304      	addeq	r3, #4
 800d93a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d93e:	bf04      	itt	eq
 800d940:	0080      	lsleq	r0, r0, #2
 800d942:	3302      	addeq	r3, #2
 800d944:	2800      	cmp	r0, #0
 800d946:	db05      	blt.n	800d954 <__hi0bits+0x38>
 800d948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d94c:	f103 0301 	add.w	r3, r3, #1
 800d950:	bf08      	it	eq
 800d952:	2320      	moveq	r3, #32
 800d954:	4618      	mov	r0, r3
 800d956:	4770      	bx	lr
 800d958:	2300      	movs	r3, #0
 800d95a:	e7e4      	b.n	800d926 <__hi0bits+0xa>

0800d95c <__lo0bits>:
 800d95c:	6803      	ldr	r3, [r0, #0]
 800d95e:	f013 0207 	ands.w	r2, r3, #7
 800d962:	4601      	mov	r1, r0
 800d964:	d00b      	beq.n	800d97e <__lo0bits+0x22>
 800d966:	07da      	lsls	r2, r3, #31
 800d968:	d423      	bmi.n	800d9b2 <__lo0bits+0x56>
 800d96a:	0798      	lsls	r0, r3, #30
 800d96c:	bf49      	itett	mi
 800d96e:	085b      	lsrmi	r3, r3, #1
 800d970:	089b      	lsrpl	r3, r3, #2
 800d972:	2001      	movmi	r0, #1
 800d974:	600b      	strmi	r3, [r1, #0]
 800d976:	bf5c      	itt	pl
 800d978:	600b      	strpl	r3, [r1, #0]
 800d97a:	2002      	movpl	r0, #2
 800d97c:	4770      	bx	lr
 800d97e:	b298      	uxth	r0, r3
 800d980:	b9a8      	cbnz	r0, 800d9ae <__lo0bits+0x52>
 800d982:	0c1b      	lsrs	r3, r3, #16
 800d984:	2010      	movs	r0, #16
 800d986:	b2da      	uxtb	r2, r3
 800d988:	b90a      	cbnz	r2, 800d98e <__lo0bits+0x32>
 800d98a:	3008      	adds	r0, #8
 800d98c:	0a1b      	lsrs	r3, r3, #8
 800d98e:	071a      	lsls	r2, r3, #28
 800d990:	bf04      	itt	eq
 800d992:	091b      	lsreq	r3, r3, #4
 800d994:	3004      	addeq	r0, #4
 800d996:	079a      	lsls	r2, r3, #30
 800d998:	bf04      	itt	eq
 800d99a:	089b      	lsreq	r3, r3, #2
 800d99c:	3002      	addeq	r0, #2
 800d99e:	07da      	lsls	r2, r3, #31
 800d9a0:	d403      	bmi.n	800d9aa <__lo0bits+0x4e>
 800d9a2:	085b      	lsrs	r3, r3, #1
 800d9a4:	f100 0001 	add.w	r0, r0, #1
 800d9a8:	d005      	beq.n	800d9b6 <__lo0bits+0x5a>
 800d9aa:	600b      	str	r3, [r1, #0]
 800d9ac:	4770      	bx	lr
 800d9ae:	4610      	mov	r0, r2
 800d9b0:	e7e9      	b.n	800d986 <__lo0bits+0x2a>
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	4770      	bx	lr
 800d9b6:	2020      	movs	r0, #32
 800d9b8:	4770      	bx	lr
	...

0800d9bc <__i2b>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	460c      	mov	r4, r1
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	f7ff ff03 	bl	800d7cc <_Balloc>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	b928      	cbnz	r0, 800d9d6 <__i2b+0x1a>
 800d9ca:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <__i2b+0x24>)
 800d9cc:	4805      	ldr	r0, [pc, #20]	; (800d9e4 <__i2b+0x28>)
 800d9ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d9d2:	f000 fce1 	bl	800e398 <__assert_func>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	6144      	str	r4, [r0, #20]
 800d9da:	6103      	str	r3, [r0, #16]
 800d9dc:	bd10      	pop	{r4, pc}
 800d9de:	bf00      	nop
 800d9e0:	08011e43 	.word	0x08011e43
 800d9e4:	08011e54 	.word	0x08011e54

0800d9e8 <__multiply>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	4691      	mov	r9, r2
 800d9ee:	690a      	ldr	r2, [r1, #16]
 800d9f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	bfb8      	it	lt
 800d9f8:	460b      	movlt	r3, r1
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	bfbc      	itt	lt
 800d9fe:	464c      	movlt	r4, r9
 800da00:	4699      	movlt	r9, r3
 800da02:	6927      	ldr	r7, [r4, #16]
 800da04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da08:	68a3      	ldr	r3, [r4, #8]
 800da0a:	6861      	ldr	r1, [r4, #4]
 800da0c:	eb07 060a 	add.w	r6, r7, sl
 800da10:	42b3      	cmp	r3, r6
 800da12:	b085      	sub	sp, #20
 800da14:	bfb8      	it	lt
 800da16:	3101      	addlt	r1, #1
 800da18:	f7ff fed8 	bl	800d7cc <_Balloc>
 800da1c:	b930      	cbnz	r0, 800da2c <__multiply+0x44>
 800da1e:	4602      	mov	r2, r0
 800da20:	4b44      	ldr	r3, [pc, #272]	; (800db34 <__multiply+0x14c>)
 800da22:	4845      	ldr	r0, [pc, #276]	; (800db38 <__multiply+0x150>)
 800da24:	f240 115d 	movw	r1, #349	; 0x15d
 800da28:	f000 fcb6 	bl	800e398 <__assert_func>
 800da2c:	f100 0514 	add.w	r5, r0, #20
 800da30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da34:	462b      	mov	r3, r5
 800da36:	2200      	movs	r2, #0
 800da38:	4543      	cmp	r3, r8
 800da3a:	d321      	bcc.n	800da80 <__multiply+0x98>
 800da3c:	f104 0314 	add.w	r3, r4, #20
 800da40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da44:	f109 0314 	add.w	r3, r9, #20
 800da48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da4c:	9202      	str	r2, [sp, #8]
 800da4e:	1b3a      	subs	r2, r7, r4
 800da50:	3a15      	subs	r2, #21
 800da52:	f022 0203 	bic.w	r2, r2, #3
 800da56:	3204      	adds	r2, #4
 800da58:	f104 0115 	add.w	r1, r4, #21
 800da5c:	428f      	cmp	r7, r1
 800da5e:	bf38      	it	cc
 800da60:	2204      	movcc	r2, #4
 800da62:	9201      	str	r2, [sp, #4]
 800da64:	9a02      	ldr	r2, [sp, #8]
 800da66:	9303      	str	r3, [sp, #12]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d80c      	bhi.n	800da86 <__multiply+0x9e>
 800da6c:	2e00      	cmp	r6, #0
 800da6e:	dd03      	ble.n	800da78 <__multiply+0x90>
 800da70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da74:	2b00      	cmp	r3, #0
 800da76:	d05a      	beq.n	800db2e <__multiply+0x146>
 800da78:	6106      	str	r6, [r0, #16]
 800da7a:	b005      	add	sp, #20
 800da7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da80:	f843 2b04 	str.w	r2, [r3], #4
 800da84:	e7d8      	b.n	800da38 <__multiply+0x50>
 800da86:	f8b3 a000 	ldrh.w	sl, [r3]
 800da8a:	f1ba 0f00 	cmp.w	sl, #0
 800da8e:	d024      	beq.n	800dada <__multiply+0xf2>
 800da90:	f104 0e14 	add.w	lr, r4, #20
 800da94:	46a9      	mov	r9, r5
 800da96:	f04f 0c00 	mov.w	ip, #0
 800da9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da9e:	f8d9 1000 	ldr.w	r1, [r9]
 800daa2:	fa1f fb82 	uxth.w	fp, r2
 800daa6:	b289      	uxth	r1, r1
 800daa8:	fb0a 110b 	mla	r1, sl, fp, r1
 800daac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dab0:	f8d9 2000 	ldr.w	r2, [r9]
 800dab4:	4461      	add	r1, ip
 800dab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800daba:	fb0a c20b 	mla	r2, sl, fp, ip
 800dabe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dac2:	b289      	uxth	r1, r1
 800dac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dac8:	4577      	cmp	r7, lr
 800daca:	f849 1b04 	str.w	r1, [r9], #4
 800dace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dad2:	d8e2      	bhi.n	800da9a <__multiply+0xb2>
 800dad4:	9a01      	ldr	r2, [sp, #4]
 800dad6:	f845 c002 	str.w	ip, [r5, r2]
 800dada:	9a03      	ldr	r2, [sp, #12]
 800dadc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dae0:	3304      	adds	r3, #4
 800dae2:	f1b9 0f00 	cmp.w	r9, #0
 800dae6:	d020      	beq.n	800db2a <__multiply+0x142>
 800dae8:	6829      	ldr	r1, [r5, #0]
 800daea:	f104 0c14 	add.w	ip, r4, #20
 800daee:	46ae      	mov	lr, r5
 800daf0:	f04f 0a00 	mov.w	sl, #0
 800daf4:	f8bc b000 	ldrh.w	fp, [ip]
 800daf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dafc:	fb09 220b 	mla	r2, r9, fp, r2
 800db00:	4492      	add	sl, r2
 800db02:	b289      	uxth	r1, r1
 800db04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db08:	f84e 1b04 	str.w	r1, [lr], #4
 800db0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db10:	f8be 1000 	ldrh.w	r1, [lr]
 800db14:	0c12      	lsrs	r2, r2, #16
 800db16:	fb09 1102 	mla	r1, r9, r2, r1
 800db1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800db1e:	4567      	cmp	r7, ip
 800db20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db24:	d8e6      	bhi.n	800daf4 <__multiply+0x10c>
 800db26:	9a01      	ldr	r2, [sp, #4]
 800db28:	50a9      	str	r1, [r5, r2]
 800db2a:	3504      	adds	r5, #4
 800db2c:	e79a      	b.n	800da64 <__multiply+0x7c>
 800db2e:	3e01      	subs	r6, #1
 800db30:	e79c      	b.n	800da6c <__multiply+0x84>
 800db32:	bf00      	nop
 800db34:	08011e43 	.word	0x08011e43
 800db38:	08011e54 	.word	0x08011e54

0800db3c <__pow5mult>:
 800db3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db40:	4615      	mov	r5, r2
 800db42:	f012 0203 	ands.w	r2, r2, #3
 800db46:	4606      	mov	r6, r0
 800db48:	460f      	mov	r7, r1
 800db4a:	d007      	beq.n	800db5c <__pow5mult+0x20>
 800db4c:	4c25      	ldr	r4, [pc, #148]	; (800dbe4 <__pow5mult+0xa8>)
 800db4e:	3a01      	subs	r2, #1
 800db50:	2300      	movs	r3, #0
 800db52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db56:	f7ff fe9b 	bl	800d890 <__multadd>
 800db5a:	4607      	mov	r7, r0
 800db5c:	10ad      	asrs	r5, r5, #2
 800db5e:	d03d      	beq.n	800dbdc <__pow5mult+0xa0>
 800db60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db62:	b97c      	cbnz	r4, 800db84 <__pow5mult+0x48>
 800db64:	2010      	movs	r0, #16
 800db66:	f7ff fe29 	bl	800d7bc <malloc>
 800db6a:	4602      	mov	r2, r0
 800db6c:	6270      	str	r0, [r6, #36]	; 0x24
 800db6e:	b928      	cbnz	r0, 800db7c <__pow5mult+0x40>
 800db70:	4b1d      	ldr	r3, [pc, #116]	; (800dbe8 <__pow5mult+0xac>)
 800db72:	481e      	ldr	r0, [pc, #120]	; (800dbec <__pow5mult+0xb0>)
 800db74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db78:	f000 fc0e 	bl	800e398 <__assert_func>
 800db7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db80:	6004      	str	r4, [r0, #0]
 800db82:	60c4      	str	r4, [r0, #12]
 800db84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db8c:	b94c      	cbnz	r4, 800dba2 <__pow5mult+0x66>
 800db8e:	f240 2171 	movw	r1, #625	; 0x271
 800db92:	4630      	mov	r0, r6
 800db94:	f7ff ff12 	bl	800d9bc <__i2b>
 800db98:	2300      	movs	r3, #0
 800db9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db9e:	4604      	mov	r4, r0
 800dba0:	6003      	str	r3, [r0, #0]
 800dba2:	f04f 0900 	mov.w	r9, #0
 800dba6:	07eb      	lsls	r3, r5, #31
 800dba8:	d50a      	bpl.n	800dbc0 <__pow5mult+0x84>
 800dbaa:	4639      	mov	r1, r7
 800dbac:	4622      	mov	r2, r4
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7ff ff1a 	bl	800d9e8 <__multiply>
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	4680      	mov	r8, r0
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f7ff fe47 	bl	800d84c <_Bfree>
 800dbbe:	4647      	mov	r7, r8
 800dbc0:	106d      	asrs	r5, r5, #1
 800dbc2:	d00b      	beq.n	800dbdc <__pow5mult+0xa0>
 800dbc4:	6820      	ldr	r0, [r4, #0]
 800dbc6:	b938      	cbnz	r0, 800dbd8 <__pow5mult+0x9c>
 800dbc8:	4622      	mov	r2, r4
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f7ff ff0b 	bl	800d9e8 <__multiply>
 800dbd2:	6020      	str	r0, [r4, #0]
 800dbd4:	f8c0 9000 	str.w	r9, [r0]
 800dbd8:	4604      	mov	r4, r0
 800dbda:	e7e4      	b.n	800dba6 <__pow5mult+0x6a>
 800dbdc:	4638      	mov	r0, r7
 800dbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbe2:	bf00      	nop
 800dbe4:	08011fa0 	.word	0x08011fa0
 800dbe8:	08011dd1 	.word	0x08011dd1
 800dbec:	08011e54 	.word	0x08011e54

0800dbf0 <__lshift>:
 800dbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	6849      	ldr	r1, [r1, #4]
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	4607      	mov	r7, r0
 800dc02:	4691      	mov	r9, r2
 800dc04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc08:	f108 0601 	add.w	r6, r8, #1
 800dc0c:	42b3      	cmp	r3, r6
 800dc0e:	db0b      	blt.n	800dc28 <__lshift+0x38>
 800dc10:	4638      	mov	r0, r7
 800dc12:	f7ff fddb 	bl	800d7cc <_Balloc>
 800dc16:	4605      	mov	r5, r0
 800dc18:	b948      	cbnz	r0, 800dc2e <__lshift+0x3e>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	4b2a      	ldr	r3, [pc, #168]	; (800dcc8 <__lshift+0xd8>)
 800dc1e:	482b      	ldr	r0, [pc, #172]	; (800dccc <__lshift+0xdc>)
 800dc20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dc24:	f000 fbb8 	bl	800e398 <__assert_func>
 800dc28:	3101      	adds	r1, #1
 800dc2a:	005b      	lsls	r3, r3, #1
 800dc2c:	e7ee      	b.n	800dc0c <__lshift+0x1c>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f100 0114 	add.w	r1, r0, #20
 800dc34:	f100 0210 	add.w	r2, r0, #16
 800dc38:	4618      	mov	r0, r3
 800dc3a:	4553      	cmp	r3, sl
 800dc3c:	db37      	blt.n	800dcae <__lshift+0xbe>
 800dc3e:	6920      	ldr	r0, [r4, #16]
 800dc40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc44:	f104 0314 	add.w	r3, r4, #20
 800dc48:	f019 091f 	ands.w	r9, r9, #31
 800dc4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc54:	d02f      	beq.n	800dcb6 <__lshift+0xc6>
 800dc56:	f1c9 0e20 	rsb	lr, r9, #32
 800dc5a:	468a      	mov	sl, r1
 800dc5c:	f04f 0c00 	mov.w	ip, #0
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	fa02 f209 	lsl.w	r2, r2, r9
 800dc66:	ea42 020c 	orr.w	r2, r2, ip
 800dc6a:	f84a 2b04 	str.w	r2, [sl], #4
 800dc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc72:	4298      	cmp	r0, r3
 800dc74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc78:	d8f2      	bhi.n	800dc60 <__lshift+0x70>
 800dc7a:	1b03      	subs	r3, r0, r4
 800dc7c:	3b15      	subs	r3, #21
 800dc7e:	f023 0303 	bic.w	r3, r3, #3
 800dc82:	3304      	adds	r3, #4
 800dc84:	f104 0215 	add.w	r2, r4, #21
 800dc88:	4290      	cmp	r0, r2
 800dc8a:	bf38      	it	cc
 800dc8c:	2304      	movcc	r3, #4
 800dc8e:	f841 c003 	str.w	ip, [r1, r3]
 800dc92:	f1bc 0f00 	cmp.w	ip, #0
 800dc96:	d001      	beq.n	800dc9c <__lshift+0xac>
 800dc98:	f108 0602 	add.w	r6, r8, #2
 800dc9c:	3e01      	subs	r6, #1
 800dc9e:	4638      	mov	r0, r7
 800dca0:	612e      	str	r6, [r5, #16]
 800dca2:	4621      	mov	r1, r4
 800dca4:	f7ff fdd2 	bl	800d84c <_Bfree>
 800dca8:	4628      	mov	r0, r5
 800dcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcae:	f842 0f04 	str.w	r0, [r2, #4]!
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	e7c1      	b.n	800dc3a <__lshift+0x4a>
 800dcb6:	3904      	subs	r1, #4
 800dcb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dcc0:	4298      	cmp	r0, r3
 800dcc2:	d8f9      	bhi.n	800dcb8 <__lshift+0xc8>
 800dcc4:	e7ea      	b.n	800dc9c <__lshift+0xac>
 800dcc6:	bf00      	nop
 800dcc8:	08011e43 	.word	0x08011e43
 800dccc:	08011e54 	.word	0x08011e54

0800dcd0 <__mcmp>:
 800dcd0:	b530      	push	{r4, r5, lr}
 800dcd2:	6902      	ldr	r2, [r0, #16]
 800dcd4:	690c      	ldr	r4, [r1, #16]
 800dcd6:	1b12      	subs	r2, r2, r4
 800dcd8:	d10e      	bne.n	800dcf8 <__mcmp+0x28>
 800dcda:	f100 0314 	add.w	r3, r0, #20
 800dcde:	3114      	adds	r1, #20
 800dce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dcec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dcf0:	42a5      	cmp	r5, r4
 800dcf2:	d003      	beq.n	800dcfc <__mcmp+0x2c>
 800dcf4:	d305      	bcc.n	800dd02 <__mcmp+0x32>
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	bd30      	pop	{r4, r5, pc}
 800dcfc:	4283      	cmp	r3, r0
 800dcfe:	d3f3      	bcc.n	800dce8 <__mcmp+0x18>
 800dd00:	e7fa      	b.n	800dcf8 <__mcmp+0x28>
 800dd02:	f04f 32ff 	mov.w	r2, #4294967295
 800dd06:	e7f7      	b.n	800dcf8 <__mcmp+0x28>

0800dd08 <__mdiff>:
 800dd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	4606      	mov	r6, r0
 800dd10:	4611      	mov	r1, r2
 800dd12:	4620      	mov	r0, r4
 800dd14:	4690      	mov	r8, r2
 800dd16:	f7ff ffdb 	bl	800dcd0 <__mcmp>
 800dd1a:	1e05      	subs	r5, r0, #0
 800dd1c:	d110      	bne.n	800dd40 <__mdiff+0x38>
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7ff fd53 	bl	800d7cc <_Balloc>
 800dd26:	b930      	cbnz	r0, 800dd36 <__mdiff+0x2e>
 800dd28:	4b3a      	ldr	r3, [pc, #232]	; (800de14 <__mdiff+0x10c>)
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	f240 2132 	movw	r1, #562	; 0x232
 800dd30:	4839      	ldr	r0, [pc, #228]	; (800de18 <__mdiff+0x110>)
 800dd32:	f000 fb31 	bl	800e398 <__assert_func>
 800dd36:	2301      	movs	r3, #1
 800dd38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	bfa4      	itt	ge
 800dd42:	4643      	movge	r3, r8
 800dd44:	46a0      	movge	r8, r4
 800dd46:	4630      	mov	r0, r6
 800dd48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd4c:	bfa6      	itte	ge
 800dd4e:	461c      	movge	r4, r3
 800dd50:	2500      	movge	r5, #0
 800dd52:	2501      	movlt	r5, #1
 800dd54:	f7ff fd3a 	bl	800d7cc <_Balloc>
 800dd58:	b920      	cbnz	r0, 800dd64 <__mdiff+0x5c>
 800dd5a:	4b2e      	ldr	r3, [pc, #184]	; (800de14 <__mdiff+0x10c>)
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd62:	e7e5      	b.n	800dd30 <__mdiff+0x28>
 800dd64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd68:	6926      	ldr	r6, [r4, #16]
 800dd6a:	60c5      	str	r5, [r0, #12]
 800dd6c:	f104 0914 	add.w	r9, r4, #20
 800dd70:	f108 0514 	add.w	r5, r8, #20
 800dd74:	f100 0e14 	add.w	lr, r0, #20
 800dd78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd80:	f108 0210 	add.w	r2, r8, #16
 800dd84:	46f2      	mov	sl, lr
 800dd86:	2100      	movs	r1, #0
 800dd88:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd90:	fa1f f883 	uxth.w	r8, r3
 800dd94:	fa11 f18b 	uxtah	r1, r1, fp
 800dd98:	0c1b      	lsrs	r3, r3, #16
 800dd9a:	eba1 0808 	sub.w	r8, r1, r8
 800dd9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dda2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dda6:	fa1f f888 	uxth.w	r8, r8
 800ddaa:	1419      	asrs	r1, r3, #16
 800ddac:	454e      	cmp	r6, r9
 800ddae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ddb2:	f84a 3b04 	str.w	r3, [sl], #4
 800ddb6:	d8e7      	bhi.n	800dd88 <__mdiff+0x80>
 800ddb8:	1b33      	subs	r3, r6, r4
 800ddba:	3b15      	subs	r3, #21
 800ddbc:	f023 0303 	bic.w	r3, r3, #3
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	3415      	adds	r4, #21
 800ddc4:	42a6      	cmp	r6, r4
 800ddc6:	bf38      	it	cc
 800ddc8:	2304      	movcc	r3, #4
 800ddca:	441d      	add	r5, r3
 800ddcc:	4473      	add	r3, lr
 800ddce:	469e      	mov	lr, r3
 800ddd0:	462e      	mov	r6, r5
 800ddd2:	4566      	cmp	r6, ip
 800ddd4:	d30e      	bcc.n	800ddf4 <__mdiff+0xec>
 800ddd6:	f10c 0203 	add.w	r2, ip, #3
 800ddda:	1b52      	subs	r2, r2, r5
 800dddc:	f022 0203 	bic.w	r2, r2, #3
 800dde0:	3d03      	subs	r5, #3
 800dde2:	45ac      	cmp	ip, r5
 800dde4:	bf38      	it	cc
 800dde6:	2200      	movcc	r2, #0
 800dde8:	441a      	add	r2, r3
 800ddea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ddee:	b17b      	cbz	r3, 800de10 <__mdiff+0x108>
 800ddf0:	6107      	str	r7, [r0, #16]
 800ddf2:	e7a3      	b.n	800dd3c <__mdiff+0x34>
 800ddf4:	f856 8b04 	ldr.w	r8, [r6], #4
 800ddf8:	fa11 f288 	uxtah	r2, r1, r8
 800ddfc:	1414      	asrs	r4, r2, #16
 800ddfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de02:	b292      	uxth	r2, r2
 800de04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de08:	f84e 2b04 	str.w	r2, [lr], #4
 800de0c:	1421      	asrs	r1, r4, #16
 800de0e:	e7e0      	b.n	800ddd2 <__mdiff+0xca>
 800de10:	3f01      	subs	r7, #1
 800de12:	e7ea      	b.n	800ddea <__mdiff+0xe2>
 800de14:	08011e43 	.word	0x08011e43
 800de18:	08011e54 	.word	0x08011e54

0800de1c <__d2b>:
 800de1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de20:	4689      	mov	r9, r1
 800de22:	2101      	movs	r1, #1
 800de24:	ec57 6b10 	vmov	r6, r7, d0
 800de28:	4690      	mov	r8, r2
 800de2a:	f7ff fccf 	bl	800d7cc <_Balloc>
 800de2e:	4604      	mov	r4, r0
 800de30:	b930      	cbnz	r0, 800de40 <__d2b+0x24>
 800de32:	4602      	mov	r2, r0
 800de34:	4b25      	ldr	r3, [pc, #148]	; (800decc <__d2b+0xb0>)
 800de36:	4826      	ldr	r0, [pc, #152]	; (800ded0 <__d2b+0xb4>)
 800de38:	f240 310a 	movw	r1, #778	; 0x30a
 800de3c:	f000 faac 	bl	800e398 <__assert_func>
 800de40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de48:	bb35      	cbnz	r5, 800de98 <__d2b+0x7c>
 800de4a:	2e00      	cmp	r6, #0
 800de4c:	9301      	str	r3, [sp, #4]
 800de4e:	d028      	beq.n	800dea2 <__d2b+0x86>
 800de50:	4668      	mov	r0, sp
 800de52:	9600      	str	r6, [sp, #0]
 800de54:	f7ff fd82 	bl	800d95c <__lo0bits>
 800de58:	9900      	ldr	r1, [sp, #0]
 800de5a:	b300      	cbz	r0, 800de9e <__d2b+0x82>
 800de5c:	9a01      	ldr	r2, [sp, #4]
 800de5e:	f1c0 0320 	rsb	r3, r0, #32
 800de62:	fa02 f303 	lsl.w	r3, r2, r3
 800de66:	430b      	orrs	r3, r1
 800de68:	40c2      	lsrs	r2, r0
 800de6a:	6163      	str	r3, [r4, #20]
 800de6c:	9201      	str	r2, [sp, #4]
 800de6e:	9b01      	ldr	r3, [sp, #4]
 800de70:	61a3      	str	r3, [r4, #24]
 800de72:	2b00      	cmp	r3, #0
 800de74:	bf14      	ite	ne
 800de76:	2202      	movne	r2, #2
 800de78:	2201      	moveq	r2, #1
 800de7a:	6122      	str	r2, [r4, #16]
 800de7c:	b1d5      	cbz	r5, 800deb4 <__d2b+0x98>
 800de7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de82:	4405      	add	r5, r0
 800de84:	f8c9 5000 	str.w	r5, [r9]
 800de88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de8c:	f8c8 0000 	str.w	r0, [r8]
 800de90:	4620      	mov	r0, r4
 800de92:	b003      	add	sp, #12
 800de94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de9c:	e7d5      	b.n	800de4a <__d2b+0x2e>
 800de9e:	6161      	str	r1, [r4, #20]
 800dea0:	e7e5      	b.n	800de6e <__d2b+0x52>
 800dea2:	a801      	add	r0, sp, #4
 800dea4:	f7ff fd5a 	bl	800d95c <__lo0bits>
 800dea8:	9b01      	ldr	r3, [sp, #4]
 800deaa:	6163      	str	r3, [r4, #20]
 800deac:	2201      	movs	r2, #1
 800deae:	6122      	str	r2, [r4, #16]
 800deb0:	3020      	adds	r0, #32
 800deb2:	e7e3      	b.n	800de7c <__d2b+0x60>
 800deb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800deb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800debc:	f8c9 0000 	str.w	r0, [r9]
 800dec0:	6918      	ldr	r0, [r3, #16]
 800dec2:	f7ff fd2b 	bl	800d91c <__hi0bits>
 800dec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800deca:	e7df      	b.n	800de8c <__d2b+0x70>
 800decc:	08011e43 	.word	0x08011e43
 800ded0:	08011e54 	.word	0x08011e54

0800ded4 <_calloc_r>:
 800ded4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ded6:	fba1 2402 	umull	r2, r4, r1, r2
 800deda:	b94c      	cbnz	r4, 800def0 <_calloc_r+0x1c>
 800dedc:	4611      	mov	r1, r2
 800dede:	9201      	str	r2, [sp, #4]
 800dee0:	f000 f87a 	bl	800dfd8 <_malloc_r>
 800dee4:	9a01      	ldr	r2, [sp, #4]
 800dee6:	4605      	mov	r5, r0
 800dee8:	b930      	cbnz	r0, 800def8 <_calloc_r+0x24>
 800deea:	4628      	mov	r0, r5
 800deec:	b003      	add	sp, #12
 800deee:	bd30      	pop	{r4, r5, pc}
 800def0:	220c      	movs	r2, #12
 800def2:	6002      	str	r2, [r0, #0]
 800def4:	2500      	movs	r5, #0
 800def6:	e7f8      	b.n	800deea <_calloc_r+0x16>
 800def8:	4621      	mov	r1, r4
 800defa:	f7fe f94d 	bl	800c198 <memset>
 800defe:	e7f4      	b.n	800deea <_calloc_r+0x16>

0800df00 <_free_r>:
 800df00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df02:	2900      	cmp	r1, #0
 800df04:	d044      	beq.n	800df90 <_free_r+0x90>
 800df06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df0a:	9001      	str	r0, [sp, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f1a1 0404 	sub.w	r4, r1, #4
 800df12:	bfb8      	it	lt
 800df14:	18e4      	addlt	r4, r4, r3
 800df16:	f000 fa9b 	bl	800e450 <__malloc_lock>
 800df1a:	4a1e      	ldr	r2, [pc, #120]	; (800df94 <_free_r+0x94>)
 800df1c:	9801      	ldr	r0, [sp, #4]
 800df1e:	6813      	ldr	r3, [r2, #0]
 800df20:	b933      	cbnz	r3, 800df30 <_free_r+0x30>
 800df22:	6063      	str	r3, [r4, #4]
 800df24:	6014      	str	r4, [r2, #0]
 800df26:	b003      	add	sp, #12
 800df28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df2c:	f000 ba96 	b.w	800e45c <__malloc_unlock>
 800df30:	42a3      	cmp	r3, r4
 800df32:	d908      	bls.n	800df46 <_free_r+0x46>
 800df34:	6825      	ldr	r5, [r4, #0]
 800df36:	1961      	adds	r1, r4, r5
 800df38:	428b      	cmp	r3, r1
 800df3a:	bf01      	itttt	eq
 800df3c:	6819      	ldreq	r1, [r3, #0]
 800df3e:	685b      	ldreq	r3, [r3, #4]
 800df40:	1949      	addeq	r1, r1, r5
 800df42:	6021      	streq	r1, [r4, #0]
 800df44:	e7ed      	b.n	800df22 <_free_r+0x22>
 800df46:	461a      	mov	r2, r3
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	b10b      	cbz	r3, 800df50 <_free_r+0x50>
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	d9fa      	bls.n	800df46 <_free_r+0x46>
 800df50:	6811      	ldr	r1, [r2, #0]
 800df52:	1855      	adds	r5, r2, r1
 800df54:	42a5      	cmp	r5, r4
 800df56:	d10b      	bne.n	800df70 <_free_r+0x70>
 800df58:	6824      	ldr	r4, [r4, #0]
 800df5a:	4421      	add	r1, r4
 800df5c:	1854      	adds	r4, r2, r1
 800df5e:	42a3      	cmp	r3, r4
 800df60:	6011      	str	r1, [r2, #0]
 800df62:	d1e0      	bne.n	800df26 <_free_r+0x26>
 800df64:	681c      	ldr	r4, [r3, #0]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	6053      	str	r3, [r2, #4]
 800df6a:	4421      	add	r1, r4
 800df6c:	6011      	str	r1, [r2, #0]
 800df6e:	e7da      	b.n	800df26 <_free_r+0x26>
 800df70:	d902      	bls.n	800df78 <_free_r+0x78>
 800df72:	230c      	movs	r3, #12
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	e7d6      	b.n	800df26 <_free_r+0x26>
 800df78:	6825      	ldr	r5, [r4, #0]
 800df7a:	1961      	adds	r1, r4, r5
 800df7c:	428b      	cmp	r3, r1
 800df7e:	bf04      	itt	eq
 800df80:	6819      	ldreq	r1, [r3, #0]
 800df82:	685b      	ldreq	r3, [r3, #4]
 800df84:	6063      	str	r3, [r4, #4]
 800df86:	bf04      	itt	eq
 800df88:	1949      	addeq	r1, r1, r5
 800df8a:	6021      	streq	r1, [r4, #0]
 800df8c:	6054      	str	r4, [r2, #4]
 800df8e:	e7ca      	b.n	800df26 <_free_r+0x26>
 800df90:	b003      	add	sp, #12
 800df92:	bd30      	pop	{r4, r5, pc}
 800df94:	20000a18 	.word	0x20000a18

0800df98 <sbrk_aligned>:
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	4e0e      	ldr	r6, [pc, #56]	; (800dfd4 <sbrk_aligned+0x3c>)
 800df9c:	460c      	mov	r4, r1
 800df9e:	6831      	ldr	r1, [r6, #0]
 800dfa0:	4605      	mov	r5, r0
 800dfa2:	b911      	cbnz	r1, 800dfaa <sbrk_aligned+0x12>
 800dfa4:	f000 f9e8 	bl	800e378 <_sbrk_r>
 800dfa8:	6030      	str	r0, [r6, #0]
 800dfaa:	4621      	mov	r1, r4
 800dfac:	4628      	mov	r0, r5
 800dfae:	f000 f9e3 	bl	800e378 <_sbrk_r>
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	d00a      	beq.n	800dfcc <sbrk_aligned+0x34>
 800dfb6:	1cc4      	adds	r4, r0, #3
 800dfb8:	f024 0403 	bic.w	r4, r4, #3
 800dfbc:	42a0      	cmp	r0, r4
 800dfbe:	d007      	beq.n	800dfd0 <sbrk_aligned+0x38>
 800dfc0:	1a21      	subs	r1, r4, r0
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f000 f9d8 	bl	800e378 <_sbrk_r>
 800dfc8:	3001      	adds	r0, #1
 800dfca:	d101      	bne.n	800dfd0 <sbrk_aligned+0x38>
 800dfcc:	f04f 34ff 	mov.w	r4, #4294967295
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
 800dfd4:	20000a1c 	.word	0x20000a1c

0800dfd8 <_malloc_r>:
 800dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfdc:	1ccd      	adds	r5, r1, #3
 800dfde:	f025 0503 	bic.w	r5, r5, #3
 800dfe2:	3508      	adds	r5, #8
 800dfe4:	2d0c      	cmp	r5, #12
 800dfe6:	bf38      	it	cc
 800dfe8:	250c      	movcc	r5, #12
 800dfea:	2d00      	cmp	r5, #0
 800dfec:	4607      	mov	r7, r0
 800dfee:	db01      	blt.n	800dff4 <_malloc_r+0x1c>
 800dff0:	42a9      	cmp	r1, r5
 800dff2:	d905      	bls.n	800e000 <_malloc_r+0x28>
 800dff4:	230c      	movs	r3, #12
 800dff6:	603b      	str	r3, [r7, #0]
 800dff8:	2600      	movs	r6, #0
 800dffa:	4630      	mov	r0, r6
 800dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e000:	4e2e      	ldr	r6, [pc, #184]	; (800e0bc <_malloc_r+0xe4>)
 800e002:	f000 fa25 	bl	800e450 <__malloc_lock>
 800e006:	6833      	ldr	r3, [r6, #0]
 800e008:	461c      	mov	r4, r3
 800e00a:	bb34      	cbnz	r4, 800e05a <_malloc_r+0x82>
 800e00c:	4629      	mov	r1, r5
 800e00e:	4638      	mov	r0, r7
 800e010:	f7ff ffc2 	bl	800df98 <sbrk_aligned>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	4604      	mov	r4, r0
 800e018:	d14d      	bne.n	800e0b6 <_malloc_r+0xde>
 800e01a:	6834      	ldr	r4, [r6, #0]
 800e01c:	4626      	mov	r6, r4
 800e01e:	2e00      	cmp	r6, #0
 800e020:	d140      	bne.n	800e0a4 <_malloc_r+0xcc>
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	4631      	mov	r1, r6
 800e026:	4638      	mov	r0, r7
 800e028:	eb04 0803 	add.w	r8, r4, r3
 800e02c:	f000 f9a4 	bl	800e378 <_sbrk_r>
 800e030:	4580      	cmp	r8, r0
 800e032:	d13a      	bne.n	800e0aa <_malloc_r+0xd2>
 800e034:	6821      	ldr	r1, [r4, #0]
 800e036:	3503      	adds	r5, #3
 800e038:	1a6d      	subs	r5, r5, r1
 800e03a:	f025 0503 	bic.w	r5, r5, #3
 800e03e:	3508      	adds	r5, #8
 800e040:	2d0c      	cmp	r5, #12
 800e042:	bf38      	it	cc
 800e044:	250c      	movcc	r5, #12
 800e046:	4629      	mov	r1, r5
 800e048:	4638      	mov	r0, r7
 800e04a:	f7ff ffa5 	bl	800df98 <sbrk_aligned>
 800e04e:	3001      	adds	r0, #1
 800e050:	d02b      	beq.n	800e0aa <_malloc_r+0xd2>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	442b      	add	r3, r5
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	e00e      	b.n	800e078 <_malloc_r+0xa0>
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	1b52      	subs	r2, r2, r5
 800e05e:	d41e      	bmi.n	800e09e <_malloc_r+0xc6>
 800e060:	2a0b      	cmp	r2, #11
 800e062:	d916      	bls.n	800e092 <_malloc_r+0xba>
 800e064:	1961      	adds	r1, r4, r5
 800e066:	42a3      	cmp	r3, r4
 800e068:	6025      	str	r5, [r4, #0]
 800e06a:	bf18      	it	ne
 800e06c:	6059      	strne	r1, [r3, #4]
 800e06e:	6863      	ldr	r3, [r4, #4]
 800e070:	bf08      	it	eq
 800e072:	6031      	streq	r1, [r6, #0]
 800e074:	5162      	str	r2, [r4, r5]
 800e076:	604b      	str	r3, [r1, #4]
 800e078:	4638      	mov	r0, r7
 800e07a:	f104 060b 	add.w	r6, r4, #11
 800e07e:	f000 f9ed 	bl	800e45c <__malloc_unlock>
 800e082:	f026 0607 	bic.w	r6, r6, #7
 800e086:	1d23      	adds	r3, r4, #4
 800e088:	1af2      	subs	r2, r6, r3
 800e08a:	d0b6      	beq.n	800dffa <_malloc_r+0x22>
 800e08c:	1b9b      	subs	r3, r3, r6
 800e08e:	50a3      	str	r3, [r4, r2]
 800e090:	e7b3      	b.n	800dffa <_malloc_r+0x22>
 800e092:	6862      	ldr	r2, [r4, #4]
 800e094:	42a3      	cmp	r3, r4
 800e096:	bf0c      	ite	eq
 800e098:	6032      	streq	r2, [r6, #0]
 800e09a:	605a      	strne	r2, [r3, #4]
 800e09c:	e7ec      	b.n	800e078 <_malloc_r+0xa0>
 800e09e:	4623      	mov	r3, r4
 800e0a0:	6864      	ldr	r4, [r4, #4]
 800e0a2:	e7b2      	b.n	800e00a <_malloc_r+0x32>
 800e0a4:	4634      	mov	r4, r6
 800e0a6:	6876      	ldr	r6, [r6, #4]
 800e0a8:	e7b9      	b.n	800e01e <_malloc_r+0x46>
 800e0aa:	230c      	movs	r3, #12
 800e0ac:	603b      	str	r3, [r7, #0]
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	f000 f9d4 	bl	800e45c <__malloc_unlock>
 800e0b4:	e7a1      	b.n	800dffa <_malloc_r+0x22>
 800e0b6:	6025      	str	r5, [r4, #0]
 800e0b8:	e7de      	b.n	800e078 <_malloc_r+0xa0>
 800e0ba:	bf00      	nop
 800e0bc:	20000a18 	.word	0x20000a18

0800e0c0 <__ssputs_r>:
 800e0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c4:	688e      	ldr	r6, [r1, #8]
 800e0c6:	429e      	cmp	r6, r3
 800e0c8:	4682      	mov	sl, r0
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	4690      	mov	r8, r2
 800e0ce:	461f      	mov	r7, r3
 800e0d0:	d838      	bhi.n	800e144 <__ssputs_r+0x84>
 800e0d2:	898a      	ldrh	r2, [r1, #12]
 800e0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0d8:	d032      	beq.n	800e140 <__ssputs_r+0x80>
 800e0da:	6825      	ldr	r5, [r4, #0]
 800e0dc:	6909      	ldr	r1, [r1, #16]
 800e0de:	eba5 0901 	sub.w	r9, r5, r1
 800e0e2:	6965      	ldr	r5, [r4, #20]
 800e0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	444b      	add	r3, r9
 800e0f0:	106d      	asrs	r5, r5, #1
 800e0f2:	429d      	cmp	r5, r3
 800e0f4:	bf38      	it	cc
 800e0f6:	461d      	movcc	r5, r3
 800e0f8:	0553      	lsls	r3, r2, #21
 800e0fa:	d531      	bpl.n	800e160 <__ssputs_r+0xa0>
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	f7ff ff6b 	bl	800dfd8 <_malloc_r>
 800e102:	4606      	mov	r6, r0
 800e104:	b950      	cbnz	r0, 800e11c <__ssputs_r+0x5c>
 800e106:	230c      	movs	r3, #12
 800e108:	f8ca 3000 	str.w	r3, [sl]
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e112:	81a3      	strh	r3, [r4, #12]
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e11c:	6921      	ldr	r1, [r4, #16]
 800e11e:	464a      	mov	r2, r9
 800e120:	f7fe f82c 	bl	800c17c <memcpy>
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e12e:	81a3      	strh	r3, [r4, #12]
 800e130:	6126      	str	r6, [r4, #16]
 800e132:	6165      	str	r5, [r4, #20]
 800e134:	444e      	add	r6, r9
 800e136:	eba5 0509 	sub.w	r5, r5, r9
 800e13a:	6026      	str	r6, [r4, #0]
 800e13c:	60a5      	str	r5, [r4, #8]
 800e13e:	463e      	mov	r6, r7
 800e140:	42be      	cmp	r6, r7
 800e142:	d900      	bls.n	800e146 <__ssputs_r+0x86>
 800e144:	463e      	mov	r6, r7
 800e146:	6820      	ldr	r0, [r4, #0]
 800e148:	4632      	mov	r2, r6
 800e14a:	4641      	mov	r1, r8
 800e14c:	f000 f966 	bl	800e41c <memmove>
 800e150:	68a3      	ldr	r3, [r4, #8]
 800e152:	1b9b      	subs	r3, r3, r6
 800e154:	60a3      	str	r3, [r4, #8]
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	4433      	add	r3, r6
 800e15a:	6023      	str	r3, [r4, #0]
 800e15c:	2000      	movs	r0, #0
 800e15e:	e7db      	b.n	800e118 <__ssputs_r+0x58>
 800e160:	462a      	mov	r2, r5
 800e162:	f000 f981 	bl	800e468 <_realloc_r>
 800e166:	4606      	mov	r6, r0
 800e168:	2800      	cmp	r0, #0
 800e16a:	d1e1      	bne.n	800e130 <__ssputs_r+0x70>
 800e16c:	6921      	ldr	r1, [r4, #16]
 800e16e:	4650      	mov	r0, sl
 800e170:	f7ff fec6 	bl	800df00 <_free_r>
 800e174:	e7c7      	b.n	800e106 <__ssputs_r+0x46>
	...

0800e178 <_svfiprintf_r>:
 800e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	4698      	mov	r8, r3
 800e17e:	898b      	ldrh	r3, [r1, #12]
 800e180:	061b      	lsls	r3, r3, #24
 800e182:	b09d      	sub	sp, #116	; 0x74
 800e184:	4607      	mov	r7, r0
 800e186:	460d      	mov	r5, r1
 800e188:	4614      	mov	r4, r2
 800e18a:	d50e      	bpl.n	800e1aa <_svfiprintf_r+0x32>
 800e18c:	690b      	ldr	r3, [r1, #16]
 800e18e:	b963      	cbnz	r3, 800e1aa <_svfiprintf_r+0x32>
 800e190:	2140      	movs	r1, #64	; 0x40
 800e192:	f7ff ff21 	bl	800dfd8 <_malloc_r>
 800e196:	6028      	str	r0, [r5, #0]
 800e198:	6128      	str	r0, [r5, #16]
 800e19a:	b920      	cbnz	r0, 800e1a6 <_svfiprintf_r+0x2e>
 800e19c:	230c      	movs	r3, #12
 800e19e:	603b      	str	r3, [r7, #0]
 800e1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a4:	e0d1      	b.n	800e34a <_svfiprintf_r+0x1d2>
 800e1a6:	2340      	movs	r3, #64	; 0x40
 800e1a8:	616b      	str	r3, [r5, #20]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ae:	2320      	movs	r3, #32
 800e1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b8:	2330      	movs	r3, #48	; 0x30
 800e1ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e364 <_svfiprintf_r+0x1ec>
 800e1be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1c2:	f04f 0901 	mov.w	r9, #1
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	469a      	mov	sl, r3
 800e1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ce:	b10a      	cbz	r2, 800e1d4 <_svfiprintf_r+0x5c>
 800e1d0:	2a25      	cmp	r2, #37	; 0x25
 800e1d2:	d1f9      	bne.n	800e1c8 <_svfiprintf_r+0x50>
 800e1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1d8:	d00b      	beq.n	800e1f2 <_svfiprintf_r+0x7a>
 800e1da:	465b      	mov	r3, fp
 800e1dc:	4622      	mov	r2, r4
 800e1de:	4629      	mov	r1, r5
 800e1e0:	4638      	mov	r0, r7
 800e1e2:	f7ff ff6d 	bl	800e0c0 <__ssputs_r>
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	f000 80aa 	beq.w	800e340 <_svfiprintf_r+0x1c8>
 800e1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1ee:	445a      	add	r2, fp
 800e1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800e1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f000 80a2 	beq.w	800e340 <_svfiprintf_r+0x1c8>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e206:	f10a 0a01 	add.w	sl, sl, #1
 800e20a:	9304      	str	r3, [sp, #16]
 800e20c:	9307      	str	r3, [sp, #28]
 800e20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e212:	931a      	str	r3, [sp, #104]	; 0x68
 800e214:	4654      	mov	r4, sl
 800e216:	2205      	movs	r2, #5
 800e218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e21c:	4851      	ldr	r0, [pc, #324]	; (800e364 <_svfiprintf_r+0x1ec>)
 800e21e:	f7f1 ffdf 	bl	80001e0 <memchr>
 800e222:	9a04      	ldr	r2, [sp, #16]
 800e224:	b9d8      	cbnz	r0, 800e25e <_svfiprintf_r+0xe6>
 800e226:	06d0      	lsls	r0, r2, #27
 800e228:	bf44      	itt	mi
 800e22a:	2320      	movmi	r3, #32
 800e22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e230:	0711      	lsls	r1, r2, #28
 800e232:	bf44      	itt	mi
 800e234:	232b      	movmi	r3, #43	; 0x2b
 800e236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e23a:	f89a 3000 	ldrb.w	r3, [sl]
 800e23e:	2b2a      	cmp	r3, #42	; 0x2a
 800e240:	d015      	beq.n	800e26e <_svfiprintf_r+0xf6>
 800e242:	9a07      	ldr	r2, [sp, #28]
 800e244:	4654      	mov	r4, sl
 800e246:	2000      	movs	r0, #0
 800e248:	f04f 0c0a 	mov.w	ip, #10
 800e24c:	4621      	mov	r1, r4
 800e24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e252:	3b30      	subs	r3, #48	; 0x30
 800e254:	2b09      	cmp	r3, #9
 800e256:	d94e      	bls.n	800e2f6 <_svfiprintf_r+0x17e>
 800e258:	b1b0      	cbz	r0, 800e288 <_svfiprintf_r+0x110>
 800e25a:	9207      	str	r2, [sp, #28]
 800e25c:	e014      	b.n	800e288 <_svfiprintf_r+0x110>
 800e25e:	eba0 0308 	sub.w	r3, r0, r8
 800e262:	fa09 f303 	lsl.w	r3, r9, r3
 800e266:	4313      	orrs	r3, r2
 800e268:	9304      	str	r3, [sp, #16]
 800e26a:	46a2      	mov	sl, r4
 800e26c:	e7d2      	b.n	800e214 <_svfiprintf_r+0x9c>
 800e26e:	9b03      	ldr	r3, [sp, #12]
 800e270:	1d19      	adds	r1, r3, #4
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	9103      	str	r1, [sp, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	bfbb      	ittet	lt
 800e27a:	425b      	neglt	r3, r3
 800e27c:	f042 0202 	orrlt.w	r2, r2, #2
 800e280:	9307      	strge	r3, [sp, #28]
 800e282:	9307      	strlt	r3, [sp, #28]
 800e284:	bfb8      	it	lt
 800e286:	9204      	strlt	r2, [sp, #16]
 800e288:	7823      	ldrb	r3, [r4, #0]
 800e28a:	2b2e      	cmp	r3, #46	; 0x2e
 800e28c:	d10c      	bne.n	800e2a8 <_svfiprintf_r+0x130>
 800e28e:	7863      	ldrb	r3, [r4, #1]
 800e290:	2b2a      	cmp	r3, #42	; 0x2a
 800e292:	d135      	bne.n	800e300 <_svfiprintf_r+0x188>
 800e294:	9b03      	ldr	r3, [sp, #12]
 800e296:	1d1a      	adds	r2, r3, #4
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	9203      	str	r2, [sp, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	bfb8      	it	lt
 800e2a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2a4:	3402      	adds	r4, #2
 800e2a6:	9305      	str	r3, [sp, #20]
 800e2a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e374 <_svfiprintf_r+0x1fc>
 800e2ac:	7821      	ldrb	r1, [r4, #0]
 800e2ae:	2203      	movs	r2, #3
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	f7f1 ff95 	bl	80001e0 <memchr>
 800e2b6:	b140      	cbz	r0, 800e2ca <_svfiprintf_r+0x152>
 800e2b8:	2340      	movs	r3, #64	; 0x40
 800e2ba:	eba0 000a 	sub.w	r0, r0, sl
 800e2be:	fa03 f000 	lsl.w	r0, r3, r0
 800e2c2:	9b04      	ldr	r3, [sp, #16]
 800e2c4:	4303      	orrs	r3, r0
 800e2c6:	3401      	adds	r4, #1
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ce:	4826      	ldr	r0, [pc, #152]	; (800e368 <_svfiprintf_r+0x1f0>)
 800e2d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2d4:	2206      	movs	r2, #6
 800e2d6:	f7f1 ff83 	bl	80001e0 <memchr>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d038      	beq.n	800e350 <_svfiprintf_r+0x1d8>
 800e2de:	4b23      	ldr	r3, [pc, #140]	; (800e36c <_svfiprintf_r+0x1f4>)
 800e2e0:	bb1b      	cbnz	r3, 800e32a <_svfiprintf_r+0x1b2>
 800e2e2:	9b03      	ldr	r3, [sp, #12]
 800e2e4:	3307      	adds	r3, #7
 800e2e6:	f023 0307 	bic.w	r3, r3, #7
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	9303      	str	r3, [sp, #12]
 800e2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f0:	4433      	add	r3, r6
 800e2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f4:	e767      	b.n	800e1c6 <_svfiprintf_r+0x4e>
 800e2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	2001      	movs	r0, #1
 800e2fe:	e7a5      	b.n	800e24c <_svfiprintf_r+0xd4>
 800e300:	2300      	movs	r3, #0
 800e302:	3401      	adds	r4, #1
 800e304:	9305      	str	r3, [sp, #20]
 800e306:	4619      	mov	r1, r3
 800e308:	f04f 0c0a 	mov.w	ip, #10
 800e30c:	4620      	mov	r0, r4
 800e30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e312:	3a30      	subs	r2, #48	; 0x30
 800e314:	2a09      	cmp	r2, #9
 800e316:	d903      	bls.n	800e320 <_svfiprintf_r+0x1a8>
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d0c5      	beq.n	800e2a8 <_svfiprintf_r+0x130>
 800e31c:	9105      	str	r1, [sp, #20]
 800e31e:	e7c3      	b.n	800e2a8 <_svfiprintf_r+0x130>
 800e320:	fb0c 2101 	mla	r1, ip, r1, r2
 800e324:	4604      	mov	r4, r0
 800e326:	2301      	movs	r3, #1
 800e328:	e7f0      	b.n	800e30c <_svfiprintf_r+0x194>
 800e32a:	ab03      	add	r3, sp, #12
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	462a      	mov	r2, r5
 800e330:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <_svfiprintf_r+0x1f8>)
 800e332:	a904      	add	r1, sp, #16
 800e334:	4638      	mov	r0, r7
 800e336:	f7fd ffd7 	bl	800c2e8 <_printf_float>
 800e33a:	1c42      	adds	r2, r0, #1
 800e33c:	4606      	mov	r6, r0
 800e33e:	d1d6      	bne.n	800e2ee <_svfiprintf_r+0x176>
 800e340:	89ab      	ldrh	r3, [r5, #12]
 800e342:	065b      	lsls	r3, r3, #25
 800e344:	f53f af2c 	bmi.w	800e1a0 <_svfiprintf_r+0x28>
 800e348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e34a:	b01d      	add	sp, #116	; 0x74
 800e34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e350:	ab03      	add	r3, sp, #12
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	462a      	mov	r2, r5
 800e356:	4b06      	ldr	r3, [pc, #24]	; (800e370 <_svfiprintf_r+0x1f8>)
 800e358:	a904      	add	r1, sp, #16
 800e35a:	4638      	mov	r0, r7
 800e35c:	f7fe fa68 	bl	800c830 <_printf_i>
 800e360:	e7eb      	b.n	800e33a <_svfiprintf_r+0x1c2>
 800e362:	bf00      	nop
 800e364:	08011fac 	.word	0x08011fac
 800e368:	08011fb6 	.word	0x08011fb6
 800e36c:	0800c2e9 	.word	0x0800c2e9
 800e370:	0800e0c1 	.word	0x0800e0c1
 800e374:	08011fb2 	.word	0x08011fb2

0800e378 <_sbrk_r>:
 800e378:	b538      	push	{r3, r4, r5, lr}
 800e37a:	4d06      	ldr	r5, [pc, #24]	; (800e394 <_sbrk_r+0x1c>)
 800e37c:	2300      	movs	r3, #0
 800e37e:	4604      	mov	r4, r0
 800e380:	4608      	mov	r0, r1
 800e382:	602b      	str	r3, [r5, #0]
 800e384:	f7f4 fb12 	bl	80029ac <_sbrk>
 800e388:	1c43      	adds	r3, r0, #1
 800e38a:	d102      	bne.n	800e392 <_sbrk_r+0x1a>
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	b103      	cbz	r3, 800e392 <_sbrk_r+0x1a>
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	bd38      	pop	{r3, r4, r5, pc}
 800e394:	20000a20 	.word	0x20000a20

0800e398 <__assert_func>:
 800e398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e39a:	4614      	mov	r4, r2
 800e39c:	461a      	mov	r2, r3
 800e39e:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <__assert_func+0x2c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4605      	mov	r5, r0
 800e3a4:	68d8      	ldr	r0, [r3, #12]
 800e3a6:	b14c      	cbz	r4, 800e3bc <__assert_func+0x24>
 800e3a8:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <__assert_func+0x30>)
 800e3aa:	9100      	str	r1, [sp, #0]
 800e3ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3b0:	4906      	ldr	r1, [pc, #24]	; (800e3cc <__assert_func+0x34>)
 800e3b2:	462b      	mov	r3, r5
 800e3b4:	f000 f80e 	bl	800e3d4 <fiprintf>
 800e3b8:	f000 faac 	bl	800e914 <abort>
 800e3bc:	4b04      	ldr	r3, [pc, #16]	; (800e3d0 <__assert_func+0x38>)
 800e3be:	461c      	mov	r4, r3
 800e3c0:	e7f3      	b.n	800e3aa <__assert_func+0x12>
 800e3c2:	bf00      	nop
 800e3c4:	200000b8 	.word	0x200000b8
 800e3c8:	08011fbd 	.word	0x08011fbd
 800e3cc:	08011fca 	.word	0x08011fca
 800e3d0:	08011ff8 	.word	0x08011ff8

0800e3d4 <fiprintf>:
 800e3d4:	b40e      	push	{r1, r2, r3}
 800e3d6:	b503      	push	{r0, r1, lr}
 800e3d8:	4601      	mov	r1, r0
 800e3da:	ab03      	add	r3, sp, #12
 800e3dc:	4805      	ldr	r0, [pc, #20]	; (800e3f4 <fiprintf+0x20>)
 800e3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3e2:	6800      	ldr	r0, [r0, #0]
 800e3e4:	9301      	str	r3, [sp, #4]
 800e3e6:	f000 f897 	bl	800e518 <_vfiprintf_r>
 800e3ea:	b002      	add	sp, #8
 800e3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3f0:	b003      	add	sp, #12
 800e3f2:	4770      	bx	lr
 800e3f4:	200000b8 	.word	0x200000b8

0800e3f8 <__ascii_mbtowc>:
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	b901      	cbnz	r1, 800e3fe <__ascii_mbtowc+0x6>
 800e3fc:	a901      	add	r1, sp, #4
 800e3fe:	b142      	cbz	r2, 800e412 <__ascii_mbtowc+0x1a>
 800e400:	b14b      	cbz	r3, 800e416 <__ascii_mbtowc+0x1e>
 800e402:	7813      	ldrb	r3, [r2, #0]
 800e404:	600b      	str	r3, [r1, #0]
 800e406:	7812      	ldrb	r2, [r2, #0]
 800e408:	1e10      	subs	r0, r2, #0
 800e40a:	bf18      	it	ne
 800e40c:	2001      	movne	r0, #1
 800e40e:	b002      	add	sp, #8
 800e410:	4770      	bx	lr
 800e412:	4610      	mov	r0, r2
 800e414:	e7fb      	b.n	800e40e <__ascii_mbtowc+0x16>
 800e416:	f06f 0001 	mvn.w	r0, #1
 800e41a:	e7f8      	b.n	800e40e <__ascii_mbtowc+0x16>

0800e41c <memmove>:
 800e41c:	4288      	cmp	r0, r1
 800e41e:	b510      	push	{r4, lr}
 800e420:	eb01 0402 	add.w	r4, r1, r2
 800e424:	d902      	bls.n	800e42c <memmove+0x10>
 800e426:	4284      	cmp	r4, r0
 800e428:	4623      	mov	r3, r4
 800e42a:	d807      	bhi.n	800e43c <memmove+0x20>
 800e42c:	1e43      	subs	r3, r0, #1
 800e42e:	42a1      	cmp	r1, r4
 800e430:	d008      	beq.n	800e444 <memmove+0x28>
 800e432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e43a:	e7f8      	b.n	800e42e <memmove+0x12>
 800e43c:	4402      	add	r2, r0
 800e43e:	4601      	mov	r1, r0
 800e440:	428a      	cmp	r2, r1
 800e442:	d100      	bne.n	800e446 <memmove+0x2a>
 800e444:	bd10      	pop	{r4, pc}
 800e446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e44a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e44e:	e7f7      	b.n	800e440 <memmove+0x24>

0800e450 <__malloc_lock>:
 800e450:	4801      	ldr	r0, [pc, #4]	; (800e458 <__malloc_lock+0x8>)
 800e452:	f000 bc1f 	b.w	800ec94 <__retarget_lock_acquire_recursive>
 800e456:	bf00      	nop
 800e458:	20000a24 	.word	0x20000a24

0800e45c <__malloc_unlock>:
 800e45c:	4801      	ldr	r0, [pc, #4]	; (800e464 <__malloc_unlock+0x8>)
 800e45e:	f000 bc1a 	b.w	800ec96 <__retarget_lock_release_recursive>
 800e462:	bf00      	nop
 800e464:	20000a24 	.word	0x20000a24

0800e468 <_realloc_r>:
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	4680      	mov	r8, r0
 800e46e:	4614      	mov	r4, r2
 800e470:	460e      	mov	r6, r1
 800e472:	b921      	cbnz	r1, 800e47e <_realloc_r+0x16>
 800e474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e478:	4611      	mov	r1, r2
 800e47a:	f7ff bdad 	b.w	800dfd8 <_malloc_r>
 800e47e:	b92a      	cbnz	r2, 800e48c <_realloc_r+0x24>
 800e480:	f7ff fd3e 	bl	800df00 <_free_r>
 800e484:	4625      	mov	r5, r4
 800e486:	4628      	mov	r0, r5
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48c:	f000 fc6a 	bl	800ed64 <_malloc_usable_size_r>
 800e490:	4284      	cmp	r4, r0
 800e492:	4607      	mov	r7, r0
 800e494:	d802      	bhi.n	800e49c <_realloc_r+0x34>
 800e496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e49a:	d812      	bhi.n	800e4c2 <_realloc_r+0x5a>
 800e49c:	4621      	mov	r1, r4
 800e49e:	4640      	mov	r0, r8
 800e4a0:	f7ff fd9a 	bl	800dfd8 <_malloc_r>
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d0ed      	beq.n	800e486 <_realloc_r+0x1e>
 800e4aa:	42bc      	cmp	r4, r7
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	bf28      	it	cs
 800e4b2:	463a      	movcs	r2, r7
 800e4b4:	f7fd fe62 	bl	800c17c <memcpy>
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4640      	mov	r0, r8
 800e4bc:	f7ff fd20 	bl	800df00 <_free_r>
 800e4c0:	e7e1      	b.n	800e486 <_realloc_r+0x1e>
 800e4c2:	4635      	mov	r5, r6
 800e4c4:	e7df      	b.n	800e486 <_realloc_r+0x1e>

0800e4c6 <__sfputc_r>:
 800e4c6:	6893      	ldr	r3, [r2, #8]
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	b410      	push	{r4}
 800e4ce:	6093      	str	r3, [r2, #8]
 800e4d0:	da08      	bge.n	800e4e4 <__sfputc_r+0x1e>
 800e4d2:	6994      	ldr	r4, [r2, #24]
 800e4d4:	42a3      	cmp	r3, r4
 800e4d6:	db01      	blt.n	800e4dc <__sfputc_r+0x16>
 800e4d8:	290a      	cmp	r1, #10
 800e4da:	d103      	bne.n	800e4e4 <__sfputc_r+0x1e>
 800e4dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e0:	f000 b94a 	b.w	800e778 <__swbuf_r>
 800e4e4:	6813      	ldr	r3, [r2, #0]
 800e4e6:	1c58      	adds	r0, r3, #1
 800e4e8:	6010      	str	r0, [r2, #0]
 800e4ea:	7019      	strb	r1, [r3, #0]
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <__sfputs_r>:
 800e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	460f      	mov	r7, r1
 800e4fa:	4614      	mov	r4, r2
 800e4fc:	18d5      	adds	r5, r2, r3
 800e4fe:	42ac      	cmp	r4, r5
 800e500:	d101      	bne.n	800e506 <__sfputs_r+0x12>
 800e502:	2000      	movs	r0, #0
 800e504:	e007      	b.n	800e516 <__sfputs_r+0x22>
 800e506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50a:	463a      	mov	r2, r7
 800e50c:	4630      	mov	r0, r6
 800e50e:	f7ff ffda 	bl	800e4c6 <__sfputc_r>
 800e512:	1c43      	adds	r3, r0, #1
 800e514:	d1f3      	bne.n	800e4fe <__sfputs_r+0xa>
 800e516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e518 <_vfiprintf_r>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	460d      	mov	r5, r1
 800e51e:	b09d      	sub	sp, #116	; 0x74
 800e520:	4614      	mov	r4, r2
 800e522:	4698      	mov	r8, r3
 800e524:	4606      	mov	r6, r0
 800e526:	b118      	cbz	r0, 800e530 <_vfiprintf_r+0x18>
 800e528:	6983      	ldr	r3, [r0, #24]
 800e52a:	b90b      	cbnz	r3, 800e530 <_vfiprintf_r+0x18>
 800e52c:	f000 fb14 	bl	800eb58 <__sinit>
 800e530:	4b89      	ldr	r3, [pc, #548]	; (800e758 <_vfiprintf_r+0x240>)
 800e532:	429d      	cmp	r5, r3
 800e534:	d11b      	bne.n	800e56e <_vfiprintf_r+0x56>
 800e536:	6875      	ldr	r5, [r6, #4]
 800e538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e53a:	07d9      	lsls	r1, r3, #31
 800e53c:	d405      	bmi.n	800e54a <_vfiprintf_r+0x32>
 800e53e:	89ab      	ldrh	r3, [r5, #12]
 800e540:	059a      	lsls	r2, r3, #22
 800e542:	d402      	bmi.n	800e54a <_vfiprintf_r+0x32>
 800e544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e546:	f000 fba5 	bl	800ec94 <__retarget_lock_acquire_recursive>
 800e54a:	89ab      	ldrh	r3, [r5, #12]
 800e54c:	071b      	lsls	r3, r3, #28
 800e54e:	d501      	bpl.n	800e554 <_vfiprintf_r+0x3c>
 800e550:	692b      	ldr	r3, [r5, #16]
 800e552:	b9eb      	cbnz	r3, 800e590 <_vfiprintf_r+0x78>
 800e554:	4629      	mov	r1, r5
 800e556:	4630      	mov	r0, r6
 800e558:	f000 f96e 	bl	800e838 <__swsetup_r>
 800e55c:	b1c0      	cbz	r0, 800e590 <_vfiprintf_r+0x78>
 800e55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e560:	07dc      	lsls	r4, r3, #31
 800e562:	d50e      	bpl.n	800e582 <_vfiprintf_r+0x6a>
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	b01d      	add	sp, #116	; 0x74
 800e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56e:	4b7b      	ldr	r3, [pc, #492]	; (800e75c <_vfiprintf_r+0x244>)
 800e570:	429d      	cmp	r5, r3
 800e572:	d101      	bne.n	800e578 <_vfiprintf_r+0x60>
 800e574:	68b5      	ldr	r5, [r6, #8]
 800e576:	e7df      	b.n	800e538 <_vfiprintf_r+0x20>
 800e578:	4b79      	ldr	r3, [pc, #484]	; (800e760 <_vfiprintf_r+0x248>)
 800e57a:	429d      	cmp	r5, r3
 800e57c:	bf08      	it	eq
 800e57e:	68f5      	ldreq	r5, [r6, #12]
 800e580:	e7da      	b.n	800e538 <_vfiprintf_r+0x20>
 800e582:	89ab      	ldrh	r3, [r5, #12]
 800e584:	0598      	lsls	r0, r3, #22
 800e586:	d4ed      	bmi.n	800e564 <_vfiprintf_r+0x4c>
 800e588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e58a:	f000 fb84 	bl	800ec96 <__retarget_lock_release_recursive>
 800e58e:	e7e9      	b.n	800e564 <_vfiprintf_r+0x4c>
 800e590:	2300      	movs	r3, #0
 800e592:	9309      	str	r3, [sp, #36]	; 0x24
 800e594:	2320      	movs	r3, #32
 800e596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e59e:	2330      	movs	r3, #48	; 0x30
 800e5a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e764 <_vfiprintf_r+0x24c>
 800e5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5a8:	f04f 0901 	mov.w	r9, #1
 800e5ac:	4623      	mov	r3, r4
 800e5ae:	469a      	mov	sl, r3
 800e5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5b4:	b10a      	cbz	r2, 800e5ba <_vfiprintf_r+0xa2>
 800e5b6:	2a25      	cmp	r2, #37	; 0x25
 800e5b8:	d1f9      	bne.n	800e5ae <_vfiprintf_r+0x96>
 800e5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e5be:	d00b      	beq.n	800e5d8 <_vfiprintf_r+0xc0>
 800e5c0:	465b      	mov	r3, fp
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f7ff ff94 	bl	800e4f4 <__sfputs_r>
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	f000 80aa 	beq.w	800e726 <_vfiprintf_r+0x20e>
 800e5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5d4:	445a      	add	r2, fp
 800e5d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 80a2 	beq.w	800e726 <_vfiprintf_r+0x20e>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5ec:	f10a 0a01 	add.w	sl, sl, #1
 800e5f0:	9304      	str	r3, [sp, #16]
 800e5f2:	9307      	str	r3, [sp, #28]
 800e5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e5fa:	4654      	mov	r4, sl
 800e5fc:	2205      	movs	r2, #5
 800e5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e602:	4858      	ldr	r0, [pc, #352]	; (800e764 <_vfiprintf_r+0x24c>)
 800e604:	f7f1 fdec 	bl	80001e0 <memchr>
 800e608:	9a04      	ldr	r2, [sp, #16]
 800e60a:	b9d8      	cbnz	r0, 800e644 <_vfiprintf_r+0x12c>
 800e60c:	06d1      	lsls	r1, r2, #27
 800e60e:	bf44      	itt	mi
 800e610:	2320      	movmi	r3, #32
 800e612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e616:	0713      	lsls	r3, r2, #28
 800e618:	bf44      	itt	mi
 800e61a:	232b      	movmi	r3, #43	; 0x2b
 800e61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e620:	f89a 3000 	ldrb.w	r3, [sl]
 800e624:	2b2a      	cmp	r3, #42	; 0x2a
 800e626:	d015      	beq.n	800e654 <_vfiprintf_r+0x13c>
 800e628:	9a07      	ldr	r2, [sp, #28]
 800e62a:	4654      	mov	r4, sl
 800e62c:	2000      	movs	r0, #0
 800e62e:	f04f 0c0a 	mov.w	ip, #10
 800e632:	4621      	mov	r1, r4
 800e634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e638:	3b30      	subs	r3, #48	; 0x30
 800e63a:	2b09      	cmp	r3, #9
 800e63c:	d94e      	bls.n	800e6dc <_vfiprintf_r+0x1c4>
 800e63e:	b1b0      	cbz	r0, 800e66e <_vfiprintf_r+0x156>
 800e640:	9207      	str	r2, [sp, #28]
 800e642:	e014      	b.n	800e66e <_vfiprintf_r+0x156>
 800e644:	eba0 0308 	sub.w	r3, r0, r8
 800e648:	fa09 f303 	lsl.w	r3, r9, r3
 800e64c:	4313      	orrs	r3, r2
 800e64e:	9304      	str	r3, [sp, #16]
 800e650:	46a2      	mov	sl, r4
 800e652:	e7d2      	b.n	800e5fa <_vfiprintf_r+0xe2>
 800e654:	9b03      	ldr	r3, [sp, #12]
 800e656:	1d19      	adds	r1, r3, #4
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	9103      	str	r1, [sp, #12]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	bfbb      	ittet	lt
 800e660:	425b      	neglt	r3, r3
 800e662:	f042 0202 	orrlt.w	r2, r2, #2
 800e666:	9307      	strge	r3, [sp, #28]
 800e668:	9307      	strlt	r3, [sp, #28]
 800e66a:	bfb8      	it	lt
 800e66c:	9204      	strlt	r2, [sp, #16]
 800e66e:	7823      	ldrb	r3, [r4, #0]
 800e670:	2b2e      	cmp	r3, #46	; 0x2e
 800e672:	d10c      	bne.n	800e68e <_vfiprintf_r+0x176>
 800e674:	7863      	ldrb	r3, [r4, #1]
 800e676:	2b2a      	cmp	r3, #42	; 0x2a
 800e678:	d135      	bne.n	800e6e6 <_vfiprintf_r+0x1ce>
 800e67a:	9b03      	ldr	r3, [sp, #12]
 800e67c:	1d1a      	adds	r2, r3, #4
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	9203      	str	r2, [sp, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	bfb8      	it	lt
 800e686:	f04f 33ff 	movlt.w	r3, #4294967295
 800e68a:	3402      	adds	r4, #2
 800e68c:	9305      	str	r3, [sp, #20]
 800e68e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e774 <_vfiprintf_r+0x25c>
 800e692:	7821      	ldrb	r1, [r4, #0]
 800e694:	2203      	movs	r2, #3
 800e696:	4650      	mov	r0, sl
 800e698:	f7f1 fda2 	bl	80001e0 <memchr>
 800e69c:	b140      	cbz	r0, 800e6b0 <_vfiprintf_r+0x198>
 800e69e:	2340      	movs	r3, #64	; 0x40
 800e6a0:	eba0 000a 	sub.w	r0, r0, sl
 800e6a4:	fa03 f000 	lsl.w	r0, r3, r0
 800e6a8:	9b04      	ldr	r3, [sp, #16]
 800e6aa:	4303      	orrs	r3, r0
 800e6ac:	3401      	adds	r4, #1
 800e6ae:	9304      	str	r3, [sp, #16]
 800e6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6b4:	482c      	ldr	r0, [pc, #176]	; (800e768 <_vfiprintf_r+0x250>)
 800e6b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6ba:	2206      	movs	r2, #6
 800e6bc:	f7f1 fd90 	bl	80001e0 <memchr>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d03f      	beq.n	800e744 <_vfiprintf_r+0x22c>
 800e6c4:	4b29      	ldr	r3, [pc, #164]	; (800e76c <_vfiprintf_r+0x254>)
 800e6c6:	bb1b      	cbnz	r3, 800e710 <_vfiprintf_r+0x1f8>
 800e6c8:	9b03      	ldr	r3, [sp, #12]
 800e6ca:	3307      	adds	r3, #7
 800e6cc:	f023 0307 	bic.w	r3, r3, #7
 800e6d0:	3308      	adds	r3, #8
 800e6d2:	9303      	str	r3, [sp, #12]
 800e6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d6:	443b      	add	r3, r7
 800e6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e6da:	e767      	b.n	800e5ac <_vfiprintf_r+0x94>
 800e6dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	2001      	movs	r0, #1
 800e6e4:	e7a5      	b.n	800e632 <_vfiprintf_r+0x11a>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	3401      	adds	r4, #1
 800e6ea:	9305      	str	r3, [sp, #20]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	f04f 0c0a 	mov.w	ip, #10
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6f8:	3a30      	subs	r2, #48	; 0x30
 800e6fa:	2a09      	cmp	r2, #9
 800e6fc:	d903      	bls.n	800e706 <_vfiprintf_r+0x1ee>
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d0c5      	beq.n	800e68e <_vfiprintf_r+0x176>
 800e702:	9105      	str	r1, [sp, #20]
 800e704:	e7c3      	b.n	800e68e <_vfiprintf_r+0x176>
 800e706:	fb0c 2101 	mla	r1, ip, r1, r2
 800e70a:	4604      	mov	r4, r0
 800e70c:	2301      	movs	r3, #1
 800e70e:	e7f0      	b.n	800e6f2 <_vfiprintf_r+0x1da>
 800e710:	ab03      	add	r3, sp, #12
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	462a      	mov	r2, r5
 800e716:	4b16      	ldr	r3, [pc, #88]	; (800e770 <_vfiprintf_r+0x258>)
 800e718:	a904      	add	r1, sp, #16
 800e71a:	4630      	mov	r0, r6
 800e71c:	f7fd fde4 	bl	800c2e8 <_printf_float>
 800e720:	4607      	mov	r7, r0
 800e722:	1c78      	adds	r0, r7, #1
 800e724:	d1d6      	bne.n	800e6d4 <_vfiprintf_r+0x1bc>
 800e726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e728:	07d9      	lsls	r1, r3, #31
 800e72a:	d405      	bmi.n	800e738 <_vfiprintf_r+0x220>
 800e72c:	89ab      	ldrh	r3, [r5, #12]
 800e72e:	059a      	lsls	r2, r3, #22
 800e730:	d402      	bmi.n	800e738 <_vfiprintf_r+0x220>
 800e732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e734:	f000 faaf 	bl	800ec96 <__retarget_lock_release_recursive>
 800e738:	89ab      	ldrh	r3, [r5, #12]
 800e73a:	065b      	lsls	r3, r3, #25
 800e73c:	f53f af12 	bmi.w	800e564 <_vfiprintf_r+0x4c>
 800e740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e742:	e711      	b.n	800e568 <_vfiprintf_r+0x50>
 800e744:	ab03      	add	r3, sp, #12
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	462a      	mov	r2, r5
 800e74a:	4b09      	ldr	r3, [pc, #36]	; (800e770 <_vfiprintf_r+0x258>)
 800e74c:	a904      	add	r1, sp, #16
 800e74e:	4630      	mov	r0, r6
 800e750:	f7fe f86e 	bl	800c830 <_printf_i>
 800e754:	e7e4      	b.n	800e720 <_vfiprintf_r+0x208>
 800e756:	bf00      	nop
 800e758:	08012124 	.word	0x08012124
 800e75c:	08012144 	.word	0x08012144
 800e760:	08012104 	.word	0x08012104
 800e764:	08011fac 	.word	0x08011fac
 800e768:	08011fb6 	.word	0x08011fb6
 800e76c:	0800c2e9 	.word	0x0800c2e9
 800e770:	0800e4f5 	.word	0x0800e4f5
 800e774:	08011fb2 	.word	0x08011fb2

0800e778 <__swbuf_r>:
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	460e      	mov	r6, r1
 800e77c:	4614      	mov	r4, r2
 800e77e:	4605      	mov	r5, r0
 800e780:	b118      	cbz	r0, 800e78a <__swbuf_r+0x12>
 800e782:	6983      	ldr	r3, [r0, #24]
 800e784:	b90b      	cbnz	r3, 800e78a <__swbuf_r+0x12>
 800e786:	f000 f9e7 	bl	800eb58 <__sinit>
 800e78a:	4b21      	ldr	r3, [pc, #132]	; (800e810 <__swbuf_r+0x98>)
 800e78c:	429c      	cmp	r4, r3
 800e78e:	d12b      	bne.n	800e7e8 <__swbuf_r+0x70>
 800e790:	686c      	ldr	r4, [r5, #4]
 800e792:	69a3      	ldr	r3, [r4, #24]
 800e794:	60a3      	str	r3, [r4, #8]
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	071a      	lsls	r2, r3, #28
 800e79a:	d52f      	bpl.n	800e7fc <__swbuf_r+0x84>
 800e79c:	6923      	ldr	r3, [r4, #16]
 800e79e:	b36b      	cbz	r3, 800e7fc <__swbuf_r+0x84>
 800e7a0:	6923      	ldr	r3, [r4, #16]
 800e7a2:	6820      	ldr	r0, [r4, #0]
 800e7a4:	1ac0      	subs	r0, r0, r3
 800e7a6:	6963      	ldr	r3, [r4, #20]
 800e7a8:	b2f6      	uxtb	r6, r6
 800e7aa:	4283      	cmp	r3, r0
 800e7ac:	4637      	mov	r7, r6
 800e7ae:	dc04      	bgt.n	800e7ba <__swbuf_r+0x42>
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f000 f93c 	bl	800ea30 <_fflush_r>
 800e7b8:	bb30      	cbnz	r0, 800e808 <__swbuf_r+0x90>
 800e7ba:	68a3      	ldr	r3, [r4, #8]
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	60a3      	str	r3, [r4, #8]
 800e7c0:	6823      	ldr	r3, [r4, #0]
 800e7c2:	1c5a      	adds	r2, r3, #1
 800e7c4:	6022      	str	r2, [r4, #0]
 800e7c6:	701e      	strb	r6, [r3, #0]
 800e7c8:	6963      	ldr	r3, [r4, #20]
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	4283      	cmp	r3, r0
 800e7ce:	d004      	beq.n	800e7da <__swbuf_r+0x62>
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	07db      	lsls	r3, r3, #31
 800e7d4:	d506      	bpl.n	800e7e4 <__swbuf_r+0x6c>
 800e7d6:	2e0a      	cmp	r6, #10
 800e7d8:	d104      	bne.n	800e7e4 <__swbuf_r+0x6c>
 800e7da:	4621      	mov	r1, r4
 800e7dc:	4628      	mov	r0, r5
 800e7de:	f000 f927 	bl	800ea30 <_fflush_r>
 800e7e2:	b988      	cbnz	r0, 800e808 <__swbuf_r+0x90>
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e8:	4b0a      	ldr	r3, [pc, #40]	; (800e814 <__swbuf_r+0x9c>)
 800e7ea:	429c      	cmp	r4, r3
 800e7ec:	d101      	bne.n	800e7f2 <__swbuf_r+0x7a>
 800e7ee:	68ac      	ldr	r4, [r5, #8]
 800e7f0:	e7cf      	b.n	800e792 <__swbuf_r+0x1a>
 800e7f2:	4b09      	ldr	r3, [pc, #36]	; (800e818 <__swbuf_r+0xa0>)
 800e7f4:	429c      	cmp	r4, r3
 800e7f6:	bf08      	it	eq
 800e7f8:	68ec      	ldreq	r4, [r5, #12]
 800e7fa:	e7ca      	b.n	800e792 <__swbuf_r+0x1a>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	4628      	mov	r0, r5
 800e800:	f000 f81a 	bl	800e838 <__swsetup_r>
 800e804:	2800      	cmp	r0, #0
 800e806:	d0cb      	beq.n	800e7a0 <__swbuf_r+0x28>
 800e808:	f04f 37ff 	mov.w	r7, #4294967295
 800e80c:	e7ea      	b.n	800e7e4 <__swbuf_r+0x6c>
 800e80e:	bf00      	nop
 800e810:	08012124 	.word	0x08012124
 800e814:	08012144 	.word	0x08012144
 800e818:	08012104 	.word	0x08012104

0800e81c <__ascii_wctomb>:
 800e81c:	b149      	cbz	r1, 800e832 <__ascii_wctomb+0x16>
 800e81e:	2aff      	cmp	r2, #255	; 0xff
 800e820:	bf85      	ittet	hi
 800e822:	238a      	movhi	r3, #138	; 0x8a
 800e824:	6003      	strhi	r3, [r0, #0]
 800e826:	700a      	strbls	r2, [r1, #0]
 800e828:	f04f 30ff 	movhi.w	r0, #4294967295
 800e82c:	bf98      	it	ls
 800e82e:	2001      	movls	r0, #1
 800e830:	4770      	bx	lr
 800e832:	4608      	mov	r0, r1
 800e834:	4770      	bx	lr
	...

0800e838 <__swsetup_r>:
 800e838:	4b32      	ldr	r3, [pc, #200]	; (800e904 <__swsetup_r+0xcc>)
 800e83a:	b570      	push	{r4, r5, r6, lr}
 800e83c:	681d      	ldr	r5, [r3, #0]
 800e83e:	4606      	mov	r6, r0
 800e840:	460c      	mov	r4, r1
 800e842:	b125      	cbz	r5, 800e84e <__swsetup_r+0x16>
 800e844:	69ab      	ldr	r3, [r5, #24]
 800e846:	b913      	cbnz	r3, 800e84e <__swsetup_r+0x16>
 800e848:	4628      	mov	r0, r5
 800e84a:	f000 f985 	bl	800eb58 <__sinit>
 800e84e:	4b2e      	ldr	r3, [pc, #184]	; (800e908 <__swsetup_r+0xd0>)
 800e850:	429c      	cmp	r4, r3
 800e852:	d10f      	bne.n	800e874 <__swsetup_r+0x3c>
 800e854:	686c      	ldr	r4, [r5, #4]
 800e856:	89a3      	ldrh	r3, [r4, #12]
 800e858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e85c:	0719      	lsls	r1, r3, #28
 800e85e:	d42c      	bmi.n	800e8ba <__swsetup_r+0x82>
 800e860:	06dd      	lsls	r5, r3, #27
 800e862:	d411      	bmi.n	800e888 <__swsetup_r+0x50>
 800e864:	2309      	movs	r3, #9
 800e866:	6033      	str	r3, [r6, #0]
 800e868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e86c:	81a3      	strh	r3, [r4, #12]
 800e86e:	f04f 30ff 	mov.w	r0, #4294967295
 800e872:	e03e      	b.n	800e8f2 <__swsetup_r+0xba>
 800e874:	4b25      	ldr	r3, [pc, #148]	; (800e90c <__swsetup_r+0xd4>)
 800e876:	429c      	cmp	r4, r3
 800e878:	d101      	bne.n	800e87e <__swsetup_r+0x46>
 800e87a:	68ac      	ldr	r4, [r5, #8]
 800e87c:	e7eb      	b.n	800e856 <__swsetup_r+0x1e>
 800e87e:	4b24      	ldr	r3, [pc, #144]	; (800e910 <__swsetup_r+0xd8>)
 800e880:	429c      	cmp	r4, r3
 800e882:	bf08      	it	eq
 800e884:	68ec      	ldreq	r4, [r5, #12]
 800e886:	e7e6      	b.n	800e856 <__swsetup_r+0x1e>
 800e888:	0758      	lsls	r0, r3, #29
 800e88a:	d512      	bpl.n	800e8b2 <__swsetup_r+0x7a>
 800e88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e88e:	b141      	cbz	r1, 800e8a2 <__swsetup_r+0x6a>
 800e890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e894:	4299      	cmp	r1, r3
 800e896:	d002      	beq.n	800e89e <__swsetup_r+0x66>
 800e898:	4630      	mov	r0, r6
 800e89a:	f7ff fb31 	bl	800df00 <_free_r>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	6363      	str	r3, [r4, #52]	; 0x34
 800e8a2:	89a3      	ldrh	r3, [r4, #12]
 800e8a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8a8:	81a3      	strh	r3, [r4, #12]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	6063      	str	r3, [r4, #4]
 800e8ae:	6923      	ldr	r3, [r4, #16]
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	89a3      	ldrh	r3, [r4, #12]
 800e8b4:	f043 0308 	orr.w	r3, r3, #8
 800e8b8:	81a3      	strh	r3, [r4, #12]
 800e8ba:	6923      	ldr	r3, [r4, #16]
 800e8bc:	b94b      	cbnz	r3, 800e8d2 <__swsetup_r+0x9a>
 800e8be:	89a3      	ldrh	r3, [r4, #12]
 800e8c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c8:	d003      	beq.n	800e8d2 <__swsetup_r+0x9a>
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f000 fa09 	bl	800ece4 <__smakebuf_r>
 800e8d2:	89a0      	ldrh	r0, [r4, #12]
 800e8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8d8:	f010 0301 	ands.w	r3, r0, #1
 800e8dc:	d00a      	beq.n	800e8f4 <__swsetup_r+0xbc>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	60a3      	str	r3, [r4, #8]
 800e8e2:	6963      	ldr	r3, [r4, #20]
 800e8e4:	425b      	negs	r3, r3
 800e8e6:	61a3      	str	r3, [r4, #24]
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	b943      	cbnz	r3, 800e8fe <__swsetup_r+0xc6>
 800e8ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8f0:	d1ba      	bne.n	800e868 <__swsetup_r+0x30>
 800e8f2:	bd70      	pop	{r4, r5, r6, pc}
 800e8f4:	0781      	lsls	r1, r0, #30
 800e8f6:	bf58      	it	pl
 800e8f8:	6963      	ldrpl	r3, [r4, #20]
 800e8fa:	60a3      	str	r3, [r4, #8]
 800e8fc:	e7f4      	b.n	800e8e8 <__swsetup_r+0xb0>
 800e8fe:	2000      	movs	r0, #0
 800e900:	e7f7      	b.n	800e8f2 <__swsetup_r+0xba>
 800e902:	bf00      	nop
 800e904:	200000b8 	.word	0x200000b8
 800e908:	08012124 	.word	0x08012124
 800e90c:	08012144 	.word	0x08012144
 800e910:	08012104 	.word	0x08012104

0800e914 <abort>:
 800e914:	b508      	push	{r3, lr}
 800e916:	2006      	movs	r0, #6
 800e918:	f000 fa54 	bl	800edc4 <raise>
 800e91c:	2001      	movs	r0, #1
 800e91e:	f7f3 ffcd 	bl	80028bc <_exit>
	...

0800e924 <__sflush_r>:
 800e924:	898a      	ldrh	r2, [r1, #12]
 800e926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92a:	4605      	mov	r5, r0
 800e92c:	0710      	lsls	r0, r2, #28
 800e92e:	460c      	mov	r4, r1
 800e930:	d458      	bmi.n	800e9e4 <__sflush_r+0xc0>
 800e932:	684b      	ldr	r3, [r1, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	dc05      	bgt.n	800e944 <__sflush_r+0x20>
 800e938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dc02      	bgt.n	800e944 <__sflush_r+0x20>
 800e93e:	2000      	movs	r0, #0
 800e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e946:	2e00      	cmp	r6, #0
 800e948:	d0f9      	beq.n	800e93e <__sflush_r+0x1a>
 800e94a:	2300      	movs	r3, #0
 800e94c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e950:	682f      	ldr	r7, [r5, #0]
 800e952:	602b      	str	r3, [r5, #0]
 800e954:	d032      	beq.n	800e9bc <__sflush_r+0x98>
 800e956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	075a      	lsls	r2, r3, #29
 800e95c:	d505      	bpl.n	800e96a <__sflush_r+0x46>
 800e95e:	6863      	ldr	r3, [r4, #4]
 800e960:	1ac0      	subs	r0, r0, r3
 800e962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e964:	b10b      	cbz	r3, 800e96a <__sflush_r+0x46>
 800e966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e968:	1ac0      	subs	r0, r0, r3
 800e96a:	2300      	movs	r3, #0
 800e96c:	4602      	mov	r2, r0
 800e96e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e970:	6a21      	ldr	r1, [r4, #32]
 800e972:	4628      	mov	r0, r5
 800e974:	47b0      	blx	r6
 800e976:	1c43      	adds	r3, r0, #1
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	d106      	bne.n	800e98a <__sflush_r+0x66>
 800e97c:	6829      	ldr	r1, [r5, #0]
 800e97e:	291d      	cmp	r1, #29
 800e980:	d82c      	bhi.n	800e9dc <__sflush_r+0xb8>
 800e982:	4a2a      	ldr	r2, [pc, #168]	; (800ea2c <__sflush_r+0x108>)
 800e984:	40ca      	lsrs	r2, r1
 800e986:	07d6      	lsls	r6, r2, #31
 800e988:	d528      	bpl.n	800e9dc <__sflush_r+0xb8>
 800e98a:	2200      	movs	r2, #0
 800e98c:	6062      	str	r2, [r4, #4]
 800e98e:	04d9      	lsls	r1, r3, #19
 800e990:	6922      	ldr	r2, [r4, #16]
 800e992:	6022      	str	r2, [r4, #0]
 800e994:	d504      	bpl.n	800e9a0 <__sflush_r+0x7c>
 800e996:	1c42      	adds	r2, r0, #1
 800e998:	d101      	bne.n	800e99e <__sflush_r+0x7a>
 800e99a:	682b      	ldr	r3, [r5, #0]
 800e99c:	b903      	cbnz	r3, 800e9a0 <__sflush_r+0x7c>
 800e99e:	6560      	str	r0, [r4, #84]	; 0x54
 800e9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9a2:	602f      	str	r7, [r5, #0]
 800e9a4:	2900      	cmp	r1, #0
 800e9a6:	d0ca      	beq.n	800e93e <__sflush_r+0x1a>
 800e9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9ac:	4299      	cmp	r1, r3
 800e9ae:	d002      	beq.n	800e9b6 <__sflush_r+0x92>
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f7ff faa5 	bl	800df00 <_free_r>
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	6360      	str	r0, [r4, #52]	; 0x34
 800e9ba:	e7c1      	b.n	800e940 <__sflush_r+0x1c>
 800e9bc:	6a21      	ldr	r1, [r4, #32]
 800e9be:	2301      	movs	r3, #1
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	47b0      	blx	r6
 800e9c4:	1c41      	adds	r1, r0, #1
 800e9c6:	d1c7      	bne.n	800e958 <__sflush_r+0x34>
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d0c4      	beq.n	800e958 <__sflush_r+0x34>
 800e9ce:	2b1d      	cmp	r3, #29
 800e9d0:	d001      	beq.n	800e9d6 <__sflush_r+0xb2>
 800e9d2:	2b16      	cmp	r3, #22
 800e9d4:	d101      	bne.n	800e9da <__sflush_r+0xb6>
 800e9d6:	602f      	str	r7, [r5, #0]
 800e9d8:	e7b1      	b.n	800e93e <__sflush_r+0x1a>
 800e9da:	89a3      	ldrh	r3, [r4, #12]
 800e9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9e0:	81a3      	strh	r3, [r4, #12]
 800e9e2:	e7ad      	b.n	800e940 <__sflush_r+0x1c>
 800e9e4:	690f      	ldr	r7, [r1, #16]
 800e9e6:	2f00      	cmp	r7, #0
 800e9e8:	d0a9      	beq.n	800e93e <__sflush_r+0x1a>
 800e9ea:	0793      	lsls	r3, r2, #30
 800e9ec:	680e      	ldr	r6, [r1, #0]
 800e9ee:	bf08      	it	eq
 800e9f0:	694b      	ldreq	r3, [r1, #20]
 800e9f2:	600f      	str	r7, [r1, #0]
 800e9f4:	bf18      	it	ne
 800e9f6:	2300      	movne	r3, #0
 800e9f8:	eba6 0807 	sub.w	r8, r6, r7
 800e9fc:	608b      	str	r3, [r1, #8]
 800e9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ea02:	dd9c      	ble.n	800e93e <__sflush_r+0x1a>
 800ea04:	6a21      	ldr	r1, [r4, #32]
 800ea06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea08:	4643      	mov	r3, r8
 800ea0a:	463a      	mov	r2, r7
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	47b0      	blx	r6
 800ea10:	2800      	cmp	r0, #0
 800ea12:	dc06      	bgt.n	800ea22 <__sflush_r+0xfe>
 800ea14:	89a3      	ldrh	r3, [r4, #12]
 800ea16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1a:	81a3      	strh	r3, [r4, #12]
 800ea1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea20:	e78e      	b.n	800e940 <__sflush_r+0x1c>
 800ea22:	4407      	add	r7, r0
 800ea24:	eba8 0800 	sub.w	r8, r8, r0
 800ea28:	e7e9      	b.n	800e9fe <__sflush_r+0xda>
 800ea2a:	bf00      	nop
 800ea2c:	20400001 	.word	0x20400001

0800ea30 <_fflush_r>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	690b      	ldr	r3, [r1, #16]
 800ea34:	4605      	mov	r5, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	b913      	cbnz	r3, 800ea40 <_fflush_r+0x10>
 800ea3a:	2500      	movs	r5, #0
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	bd38      	pop	{r3, r4, r5, pc}
 800ea40:	b118      	cbz	r0, 800ea4a <_fflush_r+0x1a>
 800ea42:	6983      	ldr	r3, [r0, #24]
 800ea44:	b90b      	cbnz	r3, 800ea4a <_fflush_r+0x1a>
 800ea46:	f000 f887 	bl	800eb58 <__sinit>
 800ea4a:	4b14      	ldr	r3, [pc, #80]	; (800ea9c <_fflush_r+0x6c>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	d11b      	bne.n	800ea88 <_fflush_r+0x58>
 800ea50:	686c      	ldr	r4, [r5, #4]
 800ea52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d0ef      	beq.n	800ea3a <_fflush_r+0xa>
 800ea5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea5c:	07d0      	lsls	r0, r2, #31
 800ea5e:	d404      	bmi.n	800ea6a <_fflush_r+0x3a>
 800ea60:	0599      	lsls	r1, r3, #22
 800ea62:	d402      	bmi.n	800ea6a <_fflush_r+0x3a>
 800ea64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea66:	f000 f915 	bl	800ec94 <__retarget_lock_acquire_recursive>
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	f7ff ff59 	bl	800e924 <__sflush_r>
 800ea72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea74:	07da      	lsls	r2, r3, #31
 800ea76:	4605      	mov	r5, r0
 800ea78:	d4e0      	bmi.n	800ea3c <_fflush_r+0xc>
 800ea7a:	89a3      	ldrh	r3, [r4, #12]
 800ea7c:	059b      	lsls	r3, r3, #22
 800ea7e:	d4dd      	bmi.n	800ea3c <_fflush_r+0xc>
 800ea80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea82:	f000 f908 	bl	800ec96 <__retarget_lock_release_recursive>
 800ea86:	e7d9      	b.n	800ea3c <_fflush_r+0xc>
 800ea88:	4b05      	ldr	r3, [pc, #20]	; (800eaa0 <_fflush_r+0x70>)
 800ea8a:	429c      	cmp	r4, r3
 800ea8c:	d101      	bne.n	800ea92 <_fflush_r+0x62>
 800ea8e:	68ac      	ldr	r4, [r5, #8]
 800ea90:	e7df      	b.n	800ea52 <_fflush_r+0x22>
 800ea92:	4b04      	ldr	r3, [pc, #16]	; (800eaa4 <_fflush_r+0x74>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	bf08      	it	eq
 800ea98:	68ec      	ldreq	r4, [r5, #12]
 800ea9a:	e7da      	b.n	800ea52 <_fflush_r+0x22>
 800ea9c:	08012124 	.word	0x08012124
 800eaa0:	08012144 	.word	0x08012144
 800eaa4:	08012104 	.word	0x08012104

0800eaa8 <std>:
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	b510      	push	{r4, lr}
 800eaac:	4604      	mov	r4, r0
 800eaae:	e9c0 3300 	strd	r3, r3, [r0]
 800eab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eab6:	6083      	str	r3, [r0, #8]
 800eab8:	8181      	strh	r1, [r0, #12]
 800eaba:	6643      	str	r3, [r0, #100]	; 0x64
 800eabc:	81c2      	strh	r2, [r0, #14]
 800eabe:	6183      	str	r3, [r0, #24]
 800eac0:	4619      	mov	r1, r3
 800eac2:	2208      	movs	r2, #8
 800eac4:	305c      	adds	r0, #92	; 0x5c
 800eac6:	f7fd fb67 	bl	800c198 <memset>
 800eaca:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <std+0x38>)
 800eacc:	6263      	str	r3, [r4, #36]	; 0x24
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <std+0x3c>)
 800ead0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ead2:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <std+0x40>)
 800ead4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <std+0x44>)
 800ead8:	6224      	str	r4, [r4, #32]
 800eada:	6323      	str	r3, [r4, #48]	; 0x30
 800eadc:	bd10      	pop	{r4, pc}
 800eade:	bf00      	nop
 800eae0:	0800edfd 	.word	0x0800edfd
 800eae4:	0800ee1f 	.word	0x0800ee1f
 800eae8:	0800ee57 	.word	0x0800ee57
 800eaec:	0800ee7b 	.word	0x0800ee7b

0800eaf0 <_cleanup_r>:
 800eaf0:	4901      	ldr	r1, [pc, #4]	; (800eaf8 <_cleanup_r+0x8>)
 800eaf2:	f000 b8af 	b.w	800ec54 <_fwalk_reent>
 800eaf6:	bf00      	nop
 800eaf8:	0800ea31 	.word	0x0800ea31

0800eafc <__sfmoreglue>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	2268      	movs	r2, #104	; 0x68
 800eb00:	1e4d      	subs	r5, r1, #1
 800eb02:	4355      	muls	r5, r2
 800eb04:	460e      	mov	r6, r1
 800eb06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb0a:	f7ff fa65 	bl	800dfd8 <_malloc_r>
 800eb0e:	4604      	mov	r4, r0
 800eb10:	b140      	cbz	r0, 800eb24 <__sfmoreglue+0x28>
 800eb12:	2100      	movs	r1, #0
 800eb14:	e9c0 1600 	strd	r1, r6, [r0]
 800eb18:	300c      	adds	r0, #12
 800eb1a:	60a0      	str	r0, [r4, #8]
 800eb1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb20:	f7fd fb3a 	bl	800c198 <memset>
 800eb24:	4620      	mov	r0, r4
 800eb26:	bd70      	pop	{r4, r5, r6, pc}

0800eb28 <__sfp_lock_acquire>:
 800eb28:	4801      	ldr	r0, [pc, #4]	; (800eb30 <__sfp_lock_acquire+0x8>)
 800eb2a:	f000 b8b3 	b.w	800ec94 <__retarget_lock_acquire_recursive>
 800eb2e:	bf00      	nop
 800eb30:	20000a25 	.word	0x20000a25

0800eb34 <__sfp_lock_release>:
 800eb34:	4801      	ldr	r0, [pc, #4]	; (800eb3c <__sfp_lock_release+0x8>)
 800eb36:	f000 b8ae 	b.w	800ec96 <__retarget_lock_release_recursive>
 800eb3a:	bf00      	nop
 800eb3c:	20000a25 	.word	0x20000a25

0800eb40 <__sinit_lock_acquire>:
 800eb40:	4801      	ldr	r0, [pc, #4]	; (800eb48 <__sinit_lock_acquire+0x8>)
 800eb42:	f000 b8a7 	b.w	800ec94 <__retarget_lock_acquire_recursive>
 800eb46:	bf00      	nop
 800eb48:	20000a26 	.word	0x20000a26

0800eb4c <__sinit_lock_release>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	; (800eb54 <__sinit_lock_release+0x8>)
 800eb4e:	f000 b8a2 	b.w	800ec96 <__retarget_lock_release_recursive>
 800eb52:	bf00      	nop
 800eb54:	20000a26 	.word	0x20000a26

0800eb58 <__sinit>:
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	f7ff fff0 	bl	800eb40 <__sinit_lock_acquire>
 800eb60:	69a3      	ldr	r3, [r4, #24]
 800eb62:	b11b      	cbz	r3, 800eb6c <__sinit+0x14>
 800eb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb68:	f7ff bff0 	b.w	800eb4c <__sinit_lock_release>
 800eb6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb70:	6523      	str	r3, [r4, #80]	; 0x50
 800eb72:	4b13      	ldr	r3, [pc, #76]	; (800ebc0 <__sinit+0x68>)
 800eb74:	4a13      	ldr	r2, [pc, #76]	; (800ebc4 <__sinit+0x6c>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb7a:	42a3      	cmp	r3, r4
 800eb7c:	bf04      	itt	eq
 800eb7e:	2301      	moveq	r3, #1
 800eb80:	61a3      	streq	r3, [r4, #24]
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 f820 	bl	800ebc8 <__sfp>
 800eb88:	6060      	str	r0, [r4, #4]
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 f81c 	bl	800ebc8 <__sfp>
 800eb90:	60a0      	str	r0, [r4, #8]
 800eb92:	4620      	mov	r0, r4
 800eb94:	f000 f818 	bl	800ebc8 <__sfp>
 800eb98:	2200      	movs	r2, #0
 800eb9a:	60e0      	str	r0, [r4, #12]
 800eb9c:	2104      	movs	r1, #4
 800eb9e:	6860      	ldr	r0, [r4, #4]
 800eba0:	f7ff ff82 	bl	800eaa8 <std>
 800eba4:	68a0      	ldr	r0, [r4, #8]
 800eba6:	2201      	movs	r2, #1
 800eba8:	2109      	movs	r1, #9
 800ebaa:	f7ff ff7d 	bl	800eaa8 <std>
 800ebae:	68e0      	ldr	r0, [r4, #12]
 800ebb0:	2202      	movs	r2, #2
 800ebb2:	2112      	movs	r1, #18
 800ebb4:	f7ff ff78 	bl	800eaa8 <std>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	61a3      	str	r3, [r4, #24]
 800ebbc:	e7d2      	b.n	800eb64 <__sinit+0xc>
 800ebbe:	bf00      	nop
 800ebc0:	08011d8c 	.word	0x08011d8c
 800ebc4:	0800eaf1 	.word	0x0800eaf1

0800ebc8 <__sfp>:
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebca:	4607      	mov	r7, r0
 800ebcc:	f7ff ffac 	bl	800eb28 <__sfp_lock_acquire>
 800ebd0:	4b1e      	ldr	r3, [pc, #120]	; (800ec4c <__sfp+0x84>)
 800ebd2:	681e      	ldr	r6, [r3, #0]
 800ebd4:	69b3      	ldr	r3, [r6, #24]
 800ebd6:	b913      	cbnz	r3, 800ebde <__sfp+0x16>
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff ffbd 	bl	800eb58 <__sinit>
 800ebde:	3648      	adds	r6, #72	; 0x48
 800ebe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	d503      	bpl.n	800ebf0 <__sfp+0x28>
 800ebe8:	6833      	ldr	r3, [r6, #0]
 800ebea:	b30b      	cbz	r3, 800ec30 <__sfp+0x68>
 800ebec:	6836      	ldr	r6, [r6, #0]
 800ebee:	e7f7      	b.n	800ebe0 <__sfp+0x18>
 800ebf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebf4:	b9d5      	cbnz	r5, 800ec2c <__sfp+0x64>
 800ebf6:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <__sfp+0x88>)
 800ebf8:	60e3      	str	r3, [r4, #12]
 800ebfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebfe:	6665      	str	r5, [r4, #100]	; 0x64
 800ec00:	f000 f847 	bl	800ec92 <__retarget_lock_init_recursive>
 800ec04:	f7ff ff96 	bl	800eb34 <__sfp_lock_release>
 800ec08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec10:	6025      	str	r5, [r4, #0]
 800ec12:	61a5      	str	r5, [r4, #24]
 800ec14:	2208      	movs	r2, #8
 800ec16:	4629      	mov	r1, r5
 800ec18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec1c:	f7fd fabc 	bl	800c198 <memset>
 800ec20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec28:	4620      	mov	r0, r4
 800ec2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec2c:	3468      	adds	r4, #104	; 0x68
 800ec2e:	e7d9      	b.n	800ebe4 <__sfp+0x1c>
 800ec30:	2104      	movs	r1, #4
 800ec32:	4638      	mov	r0, r7
 800ec34:	f7ff ff62 	bl	800eafc <__sfmoreglue>
 800ec38:	4604      	mov	r4, r0
 800ec3a:	6030      	str	r0, [r6, #0]
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d1d5      	bne.n	800ebec <__sfp+0x24>
 800ec40:	f7ff ff78 	bl	800eb34 <__sfp_lock_release>
 800ec44:	230c      	movs	r3, #12
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	e7ee      	b.n	800ec28 <__sfp+0x60>
 800ec4a:	bf00      	nop
 800ec4c:	08011d8c 	.word	0x08011d8c
 800ec50:	ffff0001 	.word	0xffff0001

0800ec54 <_fwalk_reent>:
 800ec54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec58:	4606      	mov	r6, r0
 800ec5a:	4688      	mov	r8, r1
 800ec5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec60:	2700      	movs	r7, #0
 800ec62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec66:	f1b9 0901 	subs.w	r9, r9, #1
 800ec6a:	d505      	bpl.n	800ec78 <_fwalk_reent+0x24>
 800ec6c:	6824      	ldr	r4, [r4, #0]
 800ec6e:	2c00      	cmp	r4, #0
 800ec70:	d1f7      	bne.n	800ec62 <_fwalk_reent+0xe>
 800ec72:	4638      	mov	r0, r7
 800ec74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec78:	89ab      	ldrh	r3, [r5, #12]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d907      	bls.n	800ec8e <_fwalk_reent+0x3a>
 800ec7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec82:	3301      	adds	r3, #1
 800ec84:	d003      	beq.n	800ec8e <_fwalk_reent+0x3a>
 800ec86:	4629      	mov	r1, r5
 800ec88:	4630      	mov	r0, r6
 800ec8a:	47c0      	blx	r8
 800ec8c:	4307      	orrs	r7, r0
 800ec8e:	3568      	adds	r5, #104	; 0x68
 800ec90:	e7e9      	b.n	800ec66 <_fwalk_reent+0x12>

0800ec92 <__retarget_lock_init_recursive>:
 800ec92:	4770      	bx	lr

0800ec94 <__retarget_lock_acquire_recursive>:
 800ec94:	4770      	bx	lr

0800ec96 <__retarget_lock_release_recursive>:
 800ec96:	4770      	bx	lr

0800ec98 <__swhatbuf_r>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	460e      	mov	r6, r1
 800ec9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca0:	2900      	cmp	r1, #0
 800eca2:	b096      	sub	sp, #88	; 0x58
 800eca4:	4614      	mov	r4, r2
 800eca6:	461d      	mov	r5, r3
 800eca8:	da08      	bge.n	800ecbc <__swhatbuf_r+0x24>
 800ecaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	602a      	str	r2, [r5, #0]
 800ecb2:	061a      	lsls	r2, r3, #24
 800ecb4:	d410      	bmi.n	800ecd8 <__swhatbuf_r+0x40>
 800ecb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecba:	e00e      	b.n	800ecda <__swhatbuf_r+0x42>
 800ecbc:	466a      	mov	r2, sp
 800ecbe:	f000 f903 	bl	800eec8 <_fstat_r>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	dbf1      	blt.n	800ecaa <__swhatbuf_r+0x12>
 800ecc6:	9a01      	ldr	r2, [sp, #4]
 800ecc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecd0:	425a      	negs	r2, r3
 800ecd2:	415a      	adcs	r2, r3
 800ecd4:	602a      	str	r2, [r5, #0]
 800ecd6:	e7ee      	b.n	800ecb6 <__swhatbuf_r+0x1e>
 800ecd8:	2340      	movs	r3, #64	; 0x40
 800ecda:	2000      	movs	r0, #0
 800ecdc:	6023      	str	r3, [r4, #0]
 800ecde:	b016      	add	sp, #88	; 0x58
 800ece0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ece4 <__smakebuf_r>:
 800ece4:	898b      	ldrh	r3, [r1, #12]
 800ece6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ece8:	079d      	lsls	r5, r3, #30
 800ecea:	4606      	mov	r6, r0
 800ecec:	460c      	mov	r4, r1
 800ecee:	d507      	bpl.n	800ed00 <__smakebuf_r+0x1c>
 800ecf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	6123      	str	r3, [r4, #16]
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	6163      	str	r3, [r4, #20]
 800ecfc:	b002      	add	sp, #8
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
 800ed00:	ab01      	add	r3, sp, #4
 800ed02:	466a      	mov	r2, sp
 800ed04:	f7ff ffc8 	bl	800ec98 <__swhatbuf_r>
 800ed08:	9900      	ldr	r1, [sp, #0]
 800ed0a:	4605      	mov	r5, r0
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7ff f963 	bl	800dfd8 <_malloc_r>
 800ed12:	b948      	cbnz	r0, 800ed28 <__smakebuf_r+0x44>
 800ed14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed18:	059a      	lsls	r2, r3, #22
 800ed1a:	d4ef      	bmi.n	800ecfc <__smakebuf_r+0x18>
 800ed1c:	f023 0303 	bic.w	r3, r3, #3
 800ed20:	f043 0302 	orr.w	r3, r3, #2
 800ed24:	81a3      	strh	r3, [r4, #12]
 800ed26:	e7e3      	b.n	800ecf0 <__smakebuf_r+0xc>
 800ed28:	4b0d      	ldr	r3, [pc, #52]	; (800ed60 <__smakebuf_r+0x7c>)
 800ed2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed2c:	89a3      	ldrh	r3, [r4, #12]
 800ed2e:	6020      	str	r0, [r4, #0]
 800ed30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed34:	81a3      	strh	r3, [r4, #12]
 800ed36:	9b00      	ldr	r3, [sp, #0]
 800ed38:	6163      	str	r3, [r4, #20]
 800ed3a:	9b01      	ldr	r3, [sp, #4]
 800ed3c:	6120      	str	r0, [r4, #16]
 800ed3e:	b15b      	cbz	r3, 800ed58 <__smakebuf_r+0x74>
 800ed40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed44:	4630      	mov	r0, r6
 800ed46:	f000 f8d1 	bl	800eeec <_isatty_r>
 800ed4a:	b128      	cbz	r0, 800ed58 <__smakebuf_r+0x74>
 800ed4c:	89a3      	ldrh	r3, [r4, #12]
 800ed4e:	f023 0303 	bic.w	r3, r3, #3
 800ed52:	f043 0301 	orr.w	r3, r3, #1
 800ed56:	81a3      	strh	r3, [r4, #12]
 800ed58:	89a0      	ldrh	r0, [r4, #12]
 800ed5a:	4305      	orrs	r5, r0
 800ed5c:	81a5      	strh	r5, [r4, #12]
 800ed5e:	e7cd      	b.n	800ecfc <__smakebuf_r+0x18>
 800ed60:	0800eaf1 	.word	0x0800eaf1

0800ed64 <_malloc_usable_size_r>:
 800ed64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed68:	1f18      	subs	r0, r3, #4
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	bfbc      	itt	lt
 800ed6e:	580b      	ldrlt	r3, [r1, r0]
 800ed70:	18c0      	addlt	r0, r0, r3
 800ed72:	4770      	bx	lr

0800ed74 <_raise_r>:
 800ed74:	291f      	cmp	r1, #31
 800ed76:	b538      	push	{r3, r4, r5, lr}
 800ed78:	4604      	mov	r4, r0
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	d904      	bls.n	800ed88 <_raise_r+0x14>
 800ed7e:	2316      	movs	r3, #22
 800ed80:	6003      	str	r3, [r0, #0]
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ed8a:	b112      	cbz	r2, 800ed92 <_raise_r+0x1e>
 800ed8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed90:	b94b      	cbnz	r3, 800eda6 <_raise_r+0x32>
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 f830 	bl	800edf8 <_getpid_r>
 800ed98:	462a      	mov	r2, r5
 800ed9a:	4601      	mov	r1, r0
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eda2:	f000 b817 	b.w	800edd4 <_kill_r>
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d00a      	beq.n	800edc0 <_raise_r+0x4c>
 800edaa:	1c59      	adds	r1, r3, #1
 800edac:	d103      	bne.n	800edb6 <_raise_r+0x42>
 800edae:	2316      	movs	r3, #22
 800edb0:	6003      	str	r3, [r0, #0]
 800edb2:	2001      	movs	r0, #1
 800edb4:	e7e7      	b.n	800ed86 <_raise_r+0x12>
 800edb6:	2400      	movs	r4, #0
 800edb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edbc:	4628      	mov	r0, r5
 800edbe:	4798      	blx	r3
 800edc0:	2000      	movs	r0, #0
 800edc2:	e7e0      	b.n	800ed86 <_raise_r+0x12>

0800edc4 <raise>:
 800edc4:	4b02      	ldr	r3, [pc, #8]	; (800edd0 <raise+0xc>)
 800edc6:	4601      	mov	r1, r0
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	f7ff bfd3 	b.w	800ed74 <_raise_r>
 800edce:	bf00      	nop
 800edd0:	200000b8 	.word	0x200000b8

0800edd4 <_kill_r>:
 800edd4:	b538      	push	{r3, r4, r5, lr}
 800edd6:	4d07      	ldr	r5, [pc, #28]	; (800edf4 <_kill_r+0x20>)
 800edd8:	2300      	movs	r3, #0
 800edda:	4604      	mov	r4, r0
 800eddc:	4608      	mov	r0, r1
 800edde:	4611      	mov	r1, r2
 800ede0:	602b      	str	r3, [r5, #0]
 800ede2:	f7f3 fd5b 	bl	800289c <_kill>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	d102      	bne.n	800edf0 <_kill_r+0x1c>
 800edea:	682b      	ldr	r3, [r5, #0]
 800edec:	b103      	cbz	r3, 800edf0 <_kill_r+0x1c>
 800edee:	6023      	str	r3, [r4, #0]
 800edf0:	bd38      	pop	{r3, r4, r5, pc}
 800edf2:	bf00      	nop
 800edf4:	20000a20 	.word	0x20000a20

0800edf8 <_getpid_r>:
 800edf8:	f7f3 bd48 	b.w	800288c <_getpid>

0800edfc <__sread>:
 800edfc:	b510      	push	{r4, lr}
 800edfe:	460c      	mov	r4, r1
 800ee00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee04:	f000 f894 	bl	800ef30 <_read_r>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	bfab      	itete	ge
 800ee0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee10:	181b      	addge	r3, r3, r0
 800ee12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee16:	bfac      	ite	ge
 800ee18:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee1a:	81a3      	strhlt	r3, [r4, #12]
 800ee1c:	bd10      	pop	{r4, pc}

0800ee1e <__swrite>:
 800ee1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee22:	461f      	mov	r7, r3
 800ee24:	898b      	ldrh	r3, [r1, #12]
 800ee26:	05db      	lsls	r3, r3, #23
 800ee28:	4605      	mov	r5, r0
 800ee2a:	460c      	mov	r4, r1
 800ee2c:	4616      	mov	r6, r2
 800ee2e:	d505      	bpl.n	800ee3c <__swrite+0x1e>
 800ee30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee34:	2302      	movs	r3, #2
 800ee36:	2200      	movs	r2, #0
 800ee38:	f000 f868 	bl	800ef0c <_lseek_r>
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee46:	81a3      	strh	r3, [r4, #12]
 800ee48:	4632      	mov	r2, r6
 800ee4a:	463b      	mov	r3, r7
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee52:	f000 b817 	b.w	800ee84 <_write_r>

0800ee56 <__sseek>:
 800ee56:	b510      	push	{r4, lr}
 800ee58:	460c      	mov	r4, r1
 800ee5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee5e:	f000 f855 	bl	800ef0c <_lseek_r>
 800ee62:	1c43      	adds	r3, r0, #1
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	bf15      	itete	ne
 800ee68:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee72:	81a3      	strheq	r3, [r4, #12]
 800ee74:	bf18      	it	ne
 800ee76:	81a3      	strhne	r3, [r4, #12]
 800ee78:	bd10      	pop	{r4, pc}

0800ee7a <__sclose>:
 800ee7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee7e:	f000 b813 	b.w	800eea8 <_close_r>
	...

0800ee84 <_write_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	; (800eea4 <_write_r+0x20>)
 800ee88:	4604      	mov	r4, r0
 800ee8a:	4608      	mov	r0, r1
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	602a      	str	r2, [r5, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	f7f3 fd39 	bl	800290a <_write>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_write_r+0x1e>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_write_r+0x1e>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	20000a20 	.word	0x20000a20

0800eea8 <_close_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d06      	ldr	r5, [pc, #24]	; (800eec4 <_close_r+0x1c>)
 800eeac:	2300      	movs	r3, #0
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	602b      	str	r3, [r5, #0]
 800eeb4:	f7f3 fd45 	bl	8002942 <_close>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	d102      	bne.n	800eec2 <_close_r+0x1a>
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	b103      	cbz	r3, 800eec2 <_close_r+0x1a>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	20000a20 	.word	0x20000a20

0800eec8 <_fstat_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_fstat_r+0x20>)
 800eecc:	2300      	movs	r3, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	4608      	mov	r0, r1
 800eed2:	4611      	mov	r1, r2
 800eed4:	602b      	str	r3, [r5, #0]
 800eed6:	f7f3 fd40 	bl	800295a <_fstat>
 800eeda:	1c43      	adds	r3, r0, #1
 800eedc:	d102      	bne.n	800eee4 <_fstat_r+0x1c>
 800eede:	682b      	ldr	r3, [r5, #0]
 800eee0:	b103      	cbz	r3, 800eee4 <_fstat_r+0x1c>
 800eee2:	6023      	str	r3, [r4, #0]
 800eee4:	bd38      	pop	{r3, r4, r5, pc}
 800eee6:	bf00      	nop
 800eee8:	20000a20 	.word	0x20000a20

0800eeec <_isatty_r>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4d06      	ldr	r5, [pc, #24]	; (800ef08 <_isatty_r+0x1c>)
 800eef0:	2300      	movs	r3, #0
 800eef2:	4604      	mov	r4, r0
 800eef4:	4608      	mov	r0, r1
 800eef6:	602b      	str	r3, [r5, #0]
 800eef8:	f7f3 fd3f 	bl	800297a <_isatty>
 800eefc:	1c43      	adds	r3, r0, #1
 800eefe:	d102      	bne.n	800ef06 <_isatty_r+0x1a>
 800ef00:	682b      	ldr	r3, [r5, #0]
 800ef02:	b103      	cbz	r3, 800ef06 <_isatty_r+0x1a>
 800ef04:	6023      	str	r3, [r4, #0]
 800ef06:	bd38      	pop	{r3, r4, r5, pc}
 800ef08:	20000a20 	.word	0x20000a20

0800ef0c <_lseek_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4d07      	ldr	r5, [pc, #28]	; (800ef2c <_lseek_r+0x20>)
 800ef10:	4604      	mov	r4, r0
 800ef12:	4608      	mov	r0, r1
 800ef14:	4611      	mov	r1, r2
 800ef16:	2200      	movs	r2, #0
 800ef18:	602a      	str	r2, [r5, #0]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	f7f3 fd38 	bl	8002990 <_lseek>
 800ef20:	1c43      	adds	r3, r0, #1
 800ef22:	d102      	bne.n	800ef2a <_lseek_r+0x1e>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	b103      	cbz	r3, 800ef2a <_lseek_r+0x1e>
 800ef28:	6023      	str	r3, [r4, #0]
 800ef2a:	bd38      	pop	{r3, r4, r5, pc}
 800ef2c:	20000a20 	.word	0x20000a20

0800ef30 <_read_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d07      	ldr	r5, [pc, #28]	; (800ef50 <_read_r+0x20>)
 800ef34:	4604      	mov	r4, r0
 800ef36:	4608      	mov	r0, r1
 800ef38:	4611      	mov	r1, r2
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	602a      	str	r2, [r5, #0]
 800ef3e:	461a      	mov	r2, r3
 800ef40:	f7f3 fcc6 	bl	80028d0 <_read>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	d102      	bne.n	800ef4e <_read_r+0x1e>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	b103      	cbz	r3, 800ef4e <_read_r+0x1e>
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	bd38      	pop	{r3, r4, r5, pc}
 800ef50:	20000a20 	.word	0x20000a20

0800ef54 <_init>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	bf00      	nop
 800ef58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5a:	bc08      	pop	{r3}
 800ef5c:	469e      	mov	lr, r3
 800ef5e:	4770      	bx	lr

0800ef60 <_fini>:
 800ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef62:	bf00      	nop
 800ef64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef66:	bc08      	pop	{r3}
 800ef68:	469e      	mov	lr, r3
 800ef6a:	4770      	bx	lr
